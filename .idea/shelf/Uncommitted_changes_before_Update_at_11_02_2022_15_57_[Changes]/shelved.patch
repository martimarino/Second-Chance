Index: src/main/java/it/unipi/dii/largescale/secondchance/controller/ProfileController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.it.unipi.dii.largescale.secondchance.controller;\r\n\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.geometry.Insets;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.*;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.layout.*;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.text.Text;\r\nimport javafx.stage.Stage;\r\nimport main.java.it.unipi.dii.largescale.secondchance.connection.ConnectionMongoDB;\r\nimport main.java.it.unipi.dii.largescale.secondchance.connection.ConnectionNeo4jDB;\r\nimport main.java.it.unipi.dii.largescale.secondchance.entity.Balance;\r\nimport main.java.it.unipi.dii.largescale.secondchance.entity.User;\r\nimport main.java.it.unipi.dii.largescale.secondchance.utils.Session;\r\nimport main.java.it.unipi.dii.largescale.secondchance.utils.Utility;\r\nimport org.bson.*;\r\nimport javafx.stage.StageStyle;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\n\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\n\r\n\r\npublic class ProfileController extends MainController {\r\n\r\n    public GridPane userInfo;\r\n\r\n    public BorderPane review;\r\n    public Pane profileImage;\r\n    HBox reviewsBox;\r\n\r\n    @FXML public Pane nextReviews, prevReviews;\r\n    public Button refreshBtn;\r\n    public Label balanceText;\r\n    public ImageView imageProfile;\r\n\r\n    public ArrayList<String> follower;\r\n    public ArrayList<String> following;\r\n\r\n    private List<Document> listReviews;\r\n\r\n    @FXML public Button btnLogout;\r\n    @FXML public Button btnAddFunds;\r\n    @FXML private Text balanceValue, titleProfile;\r\n\r\n    public Button followersButton, followingButton;\r\n    public Button interestedInsertionsButton, insertionButton;\r\n\r\n    private User user;\r\n\r\n    int scrollPage;\r\n    int scrollPage2;\r\n    int nPage = 2;\r\n    String type_img;\r\n    boolean choice;\r\n\r\n    public void initialize(){\r\n\r\n        user  = Session.getLoggedUser();\r\n        double bal = Balance.balance.getCredit();\r\n        balanceValue.setText(String.format(\"%.2f\", bal) + \"â‚¬\");\r\n        type_img = \"user\";\r\n        followersButton.setOnMouseClicked(event ->  {choice = true; showUsersList(true);});\r\n        followingButton.setOnMouseClicked(event ->  {choice = false; showUsersList(false);});\r\n\r\n        setProfile();\r\n\r\n        System.out.println(\"USERNAME init: \" + user.getUsername());\r\n    }\r\n\r\n    public void initialize(String us) {\r\n\r\n        user = Session.getLoggedUser();\r\n\r\n        scrollPage = 0;\r\n        scrollPage2 = 0;\r\n\r\n        if(!us.equals(user.getUsername())) {\r\n\r\n            balanceValue.setVisible(false);\r\n            btnAddFunds.setDisable(true);\r\n            btnAddFunds.setVisible(false);\r\n            refreshBtn.setVisible(false);\r\n            refreshBtn.setDisable(true);\r\n            btnLogout.setDisable(true);\r\n            btnLogout.setVisible(false);\r\n            balanceText.setVisible(false);\r\n            interestedInsertionsButton.setDisable(true);\r\n            interestedInsertionsButton.setVisible(false);\r\n            insertionButton.setLayoutY(240);\r\n            insertionButton.setText(\"View insertion published\");\r\n            titleProfile.setText(\"Profile of \" + us);\r\n            titleProfile.setLayoutX(270);\r\n            titleProfile.setLayoutY(70);\r\n            profileImage.setLayoutY(20);\r\n            profileImage.setLayoutX(70);\r\n\r\n            Document userSearched = ConnectionMongoDB.connMongo.findUserByUsername(us);\r\n            user = User.fromDocument(userSearched);\r\n\r\n            setProfile();\r\n        }\r\n        System.out.println(\"USERNAME INIT: \" + user.getUsername());\r\n    }\r\n\r\n    public void setProfile(){\r\n\r\n        prevReviews.setDisable(true);\r\n        prevReviews.setVisible(false);\r\n\r\n        reviewsBox = new HBox();\r\n        reviewsBox.setSpacing(100);\r\n        review.setCenter(reviewsBox);\r\n\r\n        scrollPage = 0;\r\n\r\n        userInfo.getChildren().clear();\r\n        profileImage.getChildren().clear();\r\n\r\n        String rate = (Double.isNaN(user.getRating()))? \"No reviews\" : Double.toString(user.getRating());\r\n\r\n        Label username = new Label(user.getUsername());\r\n        Label name = new Label(user.getName());\r\n        Label email = new Label(user.getEmail());\r\n        Label country = new Label(user.getCountry());\r\n        Label city = new Label(user.getCity());\r\n        Label address = new Label(user.getAddress());\r\n        Label rating = new Label(rate);\r\n        Label usernameText = new Label(\"Username:\");\r\n        Label nameText = new Label(\"Name:\");\r\n        Label emailText = new Label(\"Email:\");\r\n        Label countryText = new Label(\"Country:\");\r\n        Label cityText = new Label(\"City:\");\r\n        Label addressText = new Label(\"Address:\");\r\n        Label ratingText = new Label(\"Rating:\");\r\n\r\n        setProfileImage();\r\n\r\n        System.out.println(\"USER:\" + username + \" \" + name +  \" \" + email +  \" \" + country +  \" \" + city +  \" \" + address + \" \"+ user.getImage());\r\n\r\n        userInfo.add(usernameText, 0, 0);\r\n        userInfo.add(nameText, 0, 1);\r\n        userInfo.add(emailText, 0, 2);\r\n        userInfo.add(countryText, 0, 3);\r\n        userInfo.add(cityText, 0, 4);\r\n        userInfo.add(addressText, 0, 5);\r\n        userInfo.add(ratingText, 0, 6);\r\n\r\n        userInfo.add(username, 1,0);\r\n        userInfo.add(name, 1, 1);\r\n        userInfo.add(email, 1, 2);\r\n        userInfo.add(country, 1, 3);\r\n        userInfo.add(city, 1, 4);\r\n        userInfo.add(address, 1, 5);\r\n        userInfo.add(rating, 1, 6);\r\n\r\n        updateUserBalance();\r\n        listReviews = user.getReviews();\r\n\r\n        if (listReviews == null) {\r\n            nextReviews.setDisable(true);\r\n            nextReviews.setVisible(false);\r\n        } else {\r\n            if (listReviews.size() < 3) {\r\n                System.out.println(\"Reviews nulle, disattivo i bottoni\");\r\n                nextReviews.setDisable(true);\r\n                nextReviews.setVisible(false);\r\n            }\r\n            showReviews();\r\n        }\r\n    }\r\n\r\n    public void setProfileImage() {\r\n\r\n        Label label = new Label(\"Change image!\");\r\n        label.setVisible(false);\r\n\r\n        if (user.getImage().equals(\"user.png\")) {\r\n\r\n            try {\r\n                FileInputStream imageStream = new FileInputStream(\"target/classes/img/user.png\");\r\n                Image img = new Image(imageStream);\r\n                imageProfile = new ImageView();\r\n                imageProfile.setImage(img);\r\n\r\n            } catch (FileNotFoundException e) {\r\n                e.printStackTrace();\r\n            }\r\n        } else {\r\n            imageProfile = Utility.getGoodImage(user.getImage(), 100, type_img);\r\n        }\r\n\r\n        label.setTranslateX(0);\r\n        label.setTranslateY(40);\r\n        label.setTextFill(Color.BLUEVIOLET);\r\n        label.setStyle(\"-fx-background-radius: 20px; -fx-background-color: white;\");\r\n        profileImage.getChildren().add(imageProfile);\r\n        profileImage.getChildren().add(label);\r\n\r\n        profileImage.setOnMouseClicked(event->{\r\n                    try {\r\n                        showAddImgProfile();\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n        );\r\n\r\n        profileImage.hoverProperty().addListener((observable, oldValue, newValue) -> label.setVisible(newValue));\r\n    }\r\n\r\n    /* ********** FOLLOWERS/ING STATS SECTION ********** */\r\n\r\n    public void showUsersList(boolean choice) {\r\n\r\n        try( FileInputStream imageStream = new FileInputStream(\"target/classes/img/secondchance.png\") ) {\r\n\r\n            Image image = new Image(imageStream);\r\n            FXMLLoader loader = new FXMLLoader();\r\n            loader.setLocation(FollowController.class.getResource(\"/FXML/FollowPage.fxml\"));\r\n            Stage stage = new Stage(StageStyle.DECORATED);\r\n            stage.getIcons().add(image);\r\n            Scene scene = new Scene(loader.load());\r\n            scene.getStylesheets().add(Objects.requireNonNull(getClass().getResource(\"/CSS/FollowStyle.css\")).toExternalForm());\r\n            stage.setScene(scene);\r\n            stage.setTitle(\"Your insertions\");\r\n            FollowController controller = loader.getController();\r\n            if(choice) //followers page\r\n            {\r\n                follower = ConnectionNeo4jDB.connNeo.retrieveFollowersByUser(user.getUsername());\r\n\r\n                if (follower.size() == 0) {\r\n                    Utility.infoBox(\"You have not followers.\", \"Information\", \"No followers!\");\r\n                    return;\r\n                }\r\n                controller.initialize(follower);\r\n            }\r\n            else {\r\n                following = ConnectionNeo4jDB.connNeo.retrieveFollowingByUser(user.getUsername());\r\n\r\n                if (following.size() == 0) {\r\n                    Utility.infoBox(\"You have not following.\", \"Information\", \"No following!\");\r\n                    return;\r\n                }\r\n                controller.initialize(following);\r\n            }\r\n            stage.show();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /* ********** BALANCE SECTION ********** */\r\n\r\n    public void updateUserBalance() {\r\n\r\n        double new_balance = Balance.balance.getCredit();\r\n        System.out.println(\"NEW BALANCE HERE: \" + String.format(\"%.2f\",new_balance));\r\n        balanceValue.setText(String.format(\"%.2f\",new_balance) + \"â‚¬\");\r\n\r\n    }\r\n\r\n    public void addFundsShow() throws IOException {\r\n        Stage stage = new Stage();\r\n        Utility.changePage(stage, \"AddFunds\");\r\n    }\r\n\r\n    public void showInsertions() throws IOException {\r\n\r\n        try( FileInputStream imageStream = new FileInputStream(\"target/classes/img/secondchance.png\") ) {\r\n            Image image = new Image(imageStream);\r\n            FXMLLoader loader = new FXMLLoader();\r\n            loader.setLocation(InsertionListController.class.getResource(\"/FXML/InsertionList.fxml\"));\r\n            Stage stage = new Stage(StageStyle.DECORATED);\r\n            stage.getIcons().add(image);\r\n            Scene scene = new Scene(loader.load());\r\n            scene.getStylesheets().add(Objects.requireNonNull(getClass().getResource(\"/CSS/InsertionListStyle.css\")).toExternalForm());\r\n            stage.setScene(scene);\r\n            stage.setTitle(\"Your insertions\");\r\n            InsertionListController controller = loader.getController();\r\n            controller.initialize(user.getUsername());\r\n\r\n            stage.show();\r\n        }\r\n    }\r\n\r\n    public void showInsertionsLiked() throws IOException {\r\n\r\n        try( FileInputStream imageStream = new FileInputStream(\"target/classes/img/secondchance.png\") ) {\r\n            Image image = new Image(imageStream);\r\n            FXMLLoader loader = new FXMLLoader();\r\n            loader.setLocation(InsertionListLikedController.class.getResource(\"/FXML/InsertionListLiked.fxml\"));\r\n            Stage stage = new Stage(StageStyle.DECORATED);\r\n            stage.getIcons().add(image);\r\n            stage.setTitle(\"Insertions you are interested in\");\r\n            Scene scene = new Scene(loader.load());\r\n            scene.getStylesheets().add(Objects.requireNonNull(getClass().getResource(\"/CSS/InsertionListLikedStyle.css\")).toExternalForm());\r\n            stage.setScene(scene);\r\n\r\n            InsertionListLikedController controller = loader.getController();\r\n            controller.initialize(user.getUsername());\r\n\r\n            stage.show();\r\n        }\r\n    }\r\n\r\n    public void logout() throws IOException {\r\n\r\n        Session session = Session.getInstance();\r\n        session.getLogoutUser();\r\n\r\n        // Closing current window\r\n        Stage stage = (Stage) btnLogout.getScene().getWindow();\r\n        stage.close();\r\n\r\n        // Open sign-in window\r\n        Stage primaryStage = new Stage();\r\n        primaryStage.setTitle(\"SecondChance\");\r\n        Utility.changePage(primaryStage, \"SignIn\");\r\n    }\r\n\r\n    public void showReviews() {\r\n        System.out.println(\"SCROLL OUT REVIEWS: \" + scrollPage);\r\n\r\n        for (int i = 0; i < nPage && scrollPage < listReviews.size(); i++) {\r\n            System.out.println(\"SCROLL IN REVIEWS: \" + scrollPage + \"i: \" + i);\r\n            addReviews();\r\n        }\r\n    }\r\n\r\n    private void addReviews() {\r\n\r\n        Label user = new Label(\"User: \" + listReviews.get(scrollPage).getString(\"reviewer\"));\r\n        user.setTextFill(Color.WHITE);\r\n        Utility.printTerminal(listReviews.toString());\r\n\r\n        Label text = new Label(listReviews.get(scrollPage).getString(\"text\"));\r\n        text.setTextFill(Color.WHITE);\r\n        Label title = new Label(\"Title: \" + listReviews.get(scrollPage).getString(\"title\"));\r\n        title.setTextFill(Color.WHITE);\r\n        Label rating = new Label(\"Rating: \" + listReviews.get(scrollPage).getInteger(\"rating\"));\r\n        rating.setTextFill(Color.WHITE);\r\n        text.setWrapText(true);\r\n\r\n        VBox feed = new VBox(user, text, title, rating);\r\n        feed.setStyle(\"-fx-background-color: white; -fx-padding: 8\");\r\n        feed.setSpacing(10);\r\n        feed.setPadding(new Insets(5, 5, 5, 5));\r\n        feed.setPrefHeight(100);\r\n        feed.setPrefWidth(300);\r\n        feed.setAlignment(Pos.CENTER);\r\n\r\n        String cssLayout =\r\n                \"-fx-border-color: rgb(102, 153, 255);\\n\" +\r\n                        \"-fx-background-color: rgb(230, 179, 255);\\n\" +\r\n                        \"-fx-background-radius: 50;\\n\" +\r\n                        \"-fx-border-radius: 50;\\n\";\r\n        feed.setStyle(cssLayout);\r\n\r\n        reviewsBox.getChildren().add(feed);\r\n\r\n        scrollPage++;\r\n    }\r\n\r\n    public void prevReviews() {\r\n        reviewsBox.getChildren().clear();\r\n        scrollPage = Utility.prevPageReviews(scrollPage, nPage, prevReviews);\r\n\r\n        if (scrollPage == 0) {\r\n            nextReviews.setDisable(false);\r\n            nextReviews.setVisible(true);\r\n        }\r\n\r\n        showReviews();\r\n    }\r\n\r\n    public void nextReviews() {\r\n        reviewsBox.getChildren().clear();\r\n        Utility.nextPage(scrollPage + nPage, (ArrayList<Document>) listReviews, nextReviews, prevReviews);\r\n\r\n        if (scrollPage == listReviews.size() - 1) {\r\n            nextReviews.setVisible(false);\r\n            nextReviews.setDisable(true);\r\n        }\r\n\r\n        showReviews();\r\n    }\r\n\r\n    public void showAddImgProfile() {\r\n\r\n        try (FileInputStream imageStream = new FileInputStream(\"target/classes/img/secondchance.png\")) {\r\n\r\n            Image image = new Image(imageStream);\r\n            FXMLLoader loader = new FXMLLoader();\r\n            loader.setLocation(SearchInsertionController.class.getResource(\"/FXML/UpdateProfileImage.fxml\"));\r\n            Stage stage = new Stage(StageStyle.DECORATED);\r\n            stage.getIcons().add(image);\r\n            stage.setTitle(\"Update Profile Image\");\r\n            stage.setScene(new Scene(loader.load()));\r\n            AddProfileImageController controller = loader.getController();\r\n            controller.initialize();\r\n            stage.show();\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/unipi/dii/largescale/secondchance/controller/ProfileController.java b/src/main/java/it/unipi/dii/largescale/secondchance/controller/ProfileController.java
--- a/src/main/java/it/unipi/dii/largescale/secondchance/controller/ProfileController.java	(revision 190fd7128d92f590f9f2fdee59ddb2931f30cfd5)
+++ b/src/main/java/it/unipi/dii/largescale/secondchance/controller/ProfileController.java	(date 1644591441834)
@@ -36,6 +36,7 @@
 
     public BorderPane review;
     public Pane profileImage;
+    public AnchorPane anchorPane;
     HBox reviewsBox;
 
     @FXML public Pane nextReviews, prevReviews;
@@ -72,6 +73,9 @@
         followersButton.setOnMouseClicked(event ->  {choice = true; showUsersList(true);});
         followingButton.setOnMouseClicked(event ->  {choice = false; showUsersList(false);});
 
+        insertionButton.setOnMouseClicked(event -> {showInsertions("insertionList", user.getUsername());});
+        interestedInsertionsButton.setOnMouseClicked(event -> {showInsertions("insertionListLiked", user.getUsername());});
+
         setProfile();
 
         System.out.println("USERNAME init: " + user.getUsername());
@@ -84,6 +88,9 @@
         scrollPage = 0;
         scrollPage2 = 0;
 
+        insertionButton.setOnMouseClicked(event -> {showInsertions("insertionList", us);});
+        interestedInsertionsButton.setOnMouseClicked(event -> {showInsertions("insertionListLiked", us);});
+
         if(!us.equals(user.getUsername())) {
 
             balanceValue.setVisible(false);
@@ -103,7 +110,13 @@
             titleProfile.setLayoutY(70);
             profileImage.setLayoutY(20);
             profileImage.setLayoutX(70);
-
+            Button commonLikes = new Button();
+            commonLikes.setText("Common Likes");
+            commonLikes.setOnMouseClicked(event -> {showInsertions("insertionListCommon", us); });
+            commonLikes.setLayoutY(280);
+            commonLikes.setLayoutX(400);
+            commonLikes.setStyle("-fx-background-color: rgb(197, 197, 237)rgb(197, 197, 237); -fx-background-radius: 20; -fx-pref-height: 25; -fx-pref-width: 270; -fx-text-fill: #65626b");
+            anchorPane.getChildren().add(commonLikes);
             Document userSearched = ConnectionMongoDB.connMongo.findUserByUsername(us);
             user = User.fromDocument(userSearched);
 
@@ -274,7 +287,9 @@
         Utility.changePage(stage, "AddFunds");
     }
 
-    public void showInsertions() throws IOException {
+    public void showInsertions(String typePage, String username){
+
+        ArrayList<Document> list = new ArrayList<>();
 
         try( FileInputStream imageStream = new FileInputStream("target/classes/img/secondchance.png") ) {
             Image image = new Image(imageStream);
@@ -287,29 +302,36 @@
             stage.setScene(scene);
             stage.setTitle("Your insertions");
             InsertionListController controller = loader.getController();
-            controller.initialize(user.getUsername());
 
-            stage.show();
-        }
-    }
+            switch(typePage){
+                case "insertionList":   //insertion published by user
+                    System.out.println("insertionList");
+                    list = ConnectionMongoDB.connMongo.findInsertionBySeller(username);
+                    break;
+                case "insertionListLiked":  //insertion user likes
+                    System.out.println("insertionListLiked");
+                    ArrayList<String> followed_ins = ConnectionNeo4jDB.connNeo.retrieveFollowedInsertionByUser(username);
+                    list = ConnectionMongoDB.connMongo.findInsertionDetailsNeo4J(followed_ins);
+                    break;
+                case "insertionListCommon":  //insertion in common between logged user and current user
+                    System.out.println("insertionListCommon");
+                    ArrayList<String> listCommon = ConnectionNeo4jDB.connNeo.findCommonLikes(Session.getLoggedUser().getUsername(), username);
+                    list = ConnectionMongoDB.connMongo.findInsertionDetailsNeo4J(listCommon);
+                    break;
+                default:
+                    return;
+            }
 
-    public void showInsertionsLiked() throws IOException {
-
-        try( FileInputStream imageStream = new FileInputStream("target/classes/img/secondchance.png") ) {
-            Image image = new Image(imageStream);
-            FXMLLoader loader = new FXMLLoader();
-            loader.setLocation(InsertionListLikedController.class.getResource("/FXML/InsertionListLiked.fxml"));
-            Stage stage = new Stage(StageStyle.DECORATED);
-            stage.getIcons().add(image);
-            stage.setTitle("Insertions you are interested in");
-            Scene scene = new Scene(loader.load());
-            scene.getStylesheets().add(Objects.requireNonNull(getClass().getResource("/CSS/InsertionListLikedStyle.css")).toExternalForm());
-            stage.setScene(scene);
-
-            InsertionListLikedController controller = loader.getController();
-            controller.initialize(user.getUsername());
-
+            if(list.size() == 0)
+            {
+                Utility.infoBox("There are no insertions", "Advise", "No insertions");
+                return;
+            }
+            controller.initialize(list, username);
             stage.show();
+
+        } catch (IOException e) {
+            e.printStackTrace();
         }
     }
 
Index: src/main/java/it/unipi/dii/largescale/secondchance/connection/ConnectionNeo4jDB.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.it.unipi.dii.largescale.secondchance.connection;\r\n\r\nimport main.java.it.unipi.dii.largescale.secondchance.entity.Insertion;\r\nimport main.java.it.unipi.dii.largescale.secondchance.entity.User;\r\nimport main.java.it.unipi.dii.largescale.secondchance.utils.Utility;\r\nimport org.bson.Document;\r\nimport org.neo4j.driver.*;\r\nimport org.neo4j.driver.Record;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport static org.neo4j.driver.Values.parameters;\r\n\r\npublic class ConnectionNeo4jDB implements AutoCloseable\r\n{\r\n    private Driver driver;\r\n    String uri = \"neo4j://127.0.0.1:7687\";\r\n    String user = \"neo4j\";\r\n    String password = \"2nd-chance\";\r\n    public static ConnectionNeo4jDB connNeo;\r\n\r\n    public void open()\r\n    {\r\n        driver = GraphDatabase.driver( uri, AuthTokens.basic( user, password ) );\r\n    }\r\n\r\n    @Override\r\n    public void close()\r\n    {\r\n        driver.close();\r\n    }\r\n\r\n    public boolean addUser(final User u)\r\n    {\r\n        this.open();\r\n        try ( Session session = driver.session() )\r\n        {\r\n            session.writeTransaction((TransactionWork<Void>) tx -> {\r\n                tx.run(\"MERGE (u:User {username: $username, country: $country})\",\r\n                        parameters(\"username\", u.getUsername(),\r\n                                \"country\", u.getCountry()));\r\n                return null;\r\n            });\r\n            return true;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }finally{\r\n            this.close();\r\n        }\r\n    }\r\n\r\n    public boolean addInsertion(final Insertion i)\r\n    {\r\n        this.open();\r\n        try ( Session session = driver.session() )\r\n        {\r\n            session.writeTransaction((TransactionWork<Void>) tx -> {\r\n                tx.run( \"MERGE (i:Insertion {uniq_id: $uniq_id, category: $category,\" +\r\n                                \"gender: $gender})\",\r\n                        parameters( \"uniq_id\", i.getId(), \"category\", i.getCategory(),\r\n                                \"gender\", i.getGender()));\r\n                return null;\r\n            });\r\n            this.close();\r\n            return true;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            Utility.printTerminal(\"Cannot create new insertion node\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public void followUser(String follower, String followed) {\r\n        this.open();\r\n        System.out.println(\"USER_FOLLOWER: \" + follower + \"USER_FOLLOWED : \" + followed);\r\n        try ( Session session = driver.session() )\r\n        {\r\n            session.writeTransaction((TransactionWork<Void>) tx -> {\r\n                tx.run( \"MATCH (u:User),(v) \" +\r\n                                \"WHERE u.username = $username1 AND v.username = $username2 \" +\r\n                                \"CREATE (u)-[:FOLLOWS]->(v)\",\r\n                        parameters( \"username1\", follower, \"username2\", followed));\r\n                return null;\r\n            });\r\n            this.close();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void unfollowUser(String unfollower, String unfollowed) {\r\n        this.open();\r\n        try ( Session session = driver.session() )\r\n        {\r\n            session.writeTransaction((TransactionWork<Void>) tx -> {\r\n                tx.run( \"MATCH (u:User)-[rel:FOLLOWS]->(v)  \" +\r\n                                \"WHERE u.username = $username1 AND v.username = $username2 \" +\r\n                                \"DELETE rel\",\r\n                        parameters( \"username1\", unfollower, \"username2\", unfollowed));\r\n                return null;\r\n            });\r\n            this.close();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public ArrayList<String> getSuggestedUsers(String username, String country, int k) {\r\n        this.open();\r\n        ArrayList<String> suggestions = new ArrayList<>();\r\n        try (Session session = driver.session()) {\r\n\r\n            List<String> similar = session.readTransaction((TransactionWork<List<String>>) tx -> {\r\n\r\n                Result result = tx.run( \"MATCH (u:User)-[:FOLLOWS]->(m)-[:FOLLOWS]->(others) \" +\r\n\r\n                                \"WHERE u.username = $username AND u.country = $country AND others.country = $country \" +\r\n                                \"AND NOT (u)-[:FOLLOWS]->(others) \" +\r\n                                \"RETURN others.username as SuggUsers \" +\r\n                                \"LIMIT $k\",\r\n                        parameters(\"username\", username,\r\n                                \"country\", country,\r\n                                \"k\", k));\r\n                while (result.hasNext()) {\r\n                    Record r = result.next();\r\n                    suggestions.add(r.get(\"SuggUsers\").asString());\r\n                }\r\n                return suggestions;\r\n            });\r\n            Utility.printTerminal(\"NEO4j\\n\" + similar);\r\n            this.close();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return suggestions;\r\n    }\r\n\r\n\r\n    public ArrayList<String> getFollowedInsertions(String username, int k) {\r\n\r\n        this.open();\r\n        ArrayList<String> followed = new ArrayList<>();\r\n        try (Session session = driver.session()) {\r\n\r\n            List<String> insertions = session.readTransaction((TransactionWork<List<String>>) tx -> {\r\n\r\n                Result result = tx.run( \"MATCH (u:User)-[:FOLLOWS]->(m)-[:POSTED]->(i:Insertion) \" +\r\n                                \"WHERE u.username = $username \" +\r\n                                \"RETURN i.uniq_id as SuggIns \" +\r\n                                \"LIMIT $k\",\r\n                        parameters(\"username\", username,\r\n                                \"k\", k));\r\n\r\n                while (result.hasNext()) {\r\n                    Record r = result.next();\r\n                    System.out.println(\"SUGGINS: \" + r.get(\"SuggIns\").asString());\r\n                    followed.add(r.get(\"SuggIns\").asString());\r\n                }\r\n                return followed;\r\n            });\r\n            Utility.printTerminal(\"NEO4j\\n\" + insertions);\r\n            this.close();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return followed;\r\n\r\n    }\r\n\r\n    public boolean likeInsertion(String username, String insertion_id) {\r\n\r\n        this.open();\r\n        System.out.println(\"INSERTION NEO : \" + insertion_id);\r\n\r\n        try (Session session = driver.session()) {\r\n            session.writeTransaction((TransactionWork<Void>) tx -> {\r\n                tx.run(\r\n                        \"MATCH (u:User {username: $username})\" +\r\n                                \"CREATE (u)-[rel:INTERESTED]->(i: Insertion {uniq_id: $id})\", parameters(\"username\", username,\r\n                                \"id\", insertion_id));\r\n                return null;\r\n            });\r\n            return true;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }finally{\r\n            this.close();\r\n        }\r\n    }\r\n\r\n    public boolean dislikeInsertion(String username, String insertion_id) {\r\n\r\n        this.open();\r\n\r\n        try (Session session = driver.session()) {\r\n            session.writeTransaction((TransactionWork<Void>) tx -> {\r\n                tx.run(\r\n                        \"MATCH (u:User { username: $username})-[r:INTERESTED]->(i :Insertion { uniq_id: $id})\\n\" +\r\n                                \"DELETE r\", parameters(\"username\", username,\r\n                                \"id\", insertion_id));\r\n                return null;\r\n            });\r\n            return true;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }finally {\r\n            this.close();\r\n        }\r\n    }\r\n\r\n\r\n    public boolean showIfInterested(String username, String insertion_id) {\r\n\r\n        this.open();\r\n\r\n        try (Session session = driver.session()) {\r\n            Boolean relation = session.readTransaction((TransactionWork<Boolean>) tx -> {\r\n                Result result = tx.run(\"MATCH (u:User { username: $username})-[r:INTERESTED]->(i :Insertion { uniq_id: $id})\\n\" +\r\n                        \"RETURN r\", parameters(\"username\", username,\r\n                        \"id\", insertion_id));\r\n\r\n                return result.hasNext();\r\n            });\r\n            System.out.println(relation);\r\n            this.close();\r\n            return relation;\r\n        }\r\n    }\r\n\r\n    public boolean deleteInsertion(String uniq_id) {\r\n        this.open();\r\n\r\n        try (Session session = driver.session()) {\r\n            session.writeTransaction((TransactionWork<Void>) tx -> {\r\n                tx.run(\"MATCH (i:Insertion{uniq_id : $uniq_id}) DETACH DELETE i;\",\r\n                        parameters(\"uniq_id\", uniq_id));\r\n                return null;\r\n            });\r\n            return true;\r\n        }catch(Exception e)\r\n        {\r\n            return false;\r\n        }finally{\r\n            this.close();\r\n        }\r\n    }\r\n\r\n    public boolean checkIfFollows(String us1, String us2) {\r\n\r\n        this.open();\r\n        Boolean check;\r\n\r\n        try(Session session = driver.session()) {\r\n            check = session.readTransaction((TransactionWork<Boolean>) tx -> {\r\n                Result result = tx.run(\r\n                        \"MATCH (a:User {username: $username1})-[r:FOLLOWS]->(b:User {username: $username2}) \" +\r\n                                \"RETURN r\",\r\n                        parameters( \"username1\", us1,\r\n                                \"username2\", us2));\r\n\r\n                return result.hasNext();\r\n            });\r\n            this.close();\r\n            return check;\r\n        }\r\n    }\r\n\r\n    public void followUnfollowButton(String text, String us1, String us2) {\r\n\r\n        switch (text) {\r\n            case \"Follow\":\r\n                followUser(us1, us2);\r\n                break;\r\n\r\n            case \"Unfollow\":\r\n                unfollowUser(us1, us2);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    public boolean createPostedRelationship(String node1, String node2) {\r\n\r\n        this.open();\r\n        try(Session session = driver.session()) {\r\n                session.writeTransaction((TransactionWork<Void>) tx -> {\r\n                tx.run(\r\n                        \"MATCH (u:User),(i:Insertion) \" +\r\n                                \"WHERE u.username = $username AND i.uniq_id = $id \" +\r\n                                \"CREATE (u)-[:POSTED]->(i)\",\r\n                        parameters( \"username\", node1,\r\n                                \"id\", node2));\r\n                return null;\r\n            });\r\n            this.close();\r\n            return true;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        Utility.printTerminal(\"Cannot create POSTED relationship\");\r\n        return false;\r\n\r\n    }\r\n\r\n    /* ********** USER SOCIAL FUNCTIONALITIES ********** */\r\n\r\n    public ArrayList<String> retrieveFollowersByUser(String user) {\r\n\r\n        this.open();\r\n        ArrayList<String> followers = new ArrayList<>();\r\n\r\n        try (Session session = driver.session()) {\r\n\r\n            List<String> follow = session.readTransaction((TransactionWork<List<String>>) tx -> {\r\n                Result result = tx.run( \"MATCH (u:User) <- [r:FOLLOWS] - (u1:User) \" +\r\n                                \"WHERE u.username = $username \" +\r\n                                \"RETURN u1.username as name \",\r\n                        parameters( \"username\", user));\r\n\r\n                while(result.hasNext())\r\n                {\r\n                    Record r = result.next();\r\n                    followers.add(r.get(\"name\").asString());\r\n                }\r\n                return followers;\r\n            });\r\n            if(!follow.isEmpty())\r\n                Utility.printTerminal(follow.get(0));\r\n            this.close();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return followers;\r\n    }\r\n\r\n    public ArrayList<String> retrieveFollowingByUser(String user) {\r\n\r\n        this.open();\r\n        ArrayList<String> following = new ArrayList<>();\r\n\r\n        try (Session session = driver.session()) {\r\n\r\n            List<String> follow = session.readTransaction((TransactionWork<List<String>>) tx -> {\r\n                Result result = tx.run( \"MATCH (u:User) - [r:FOLLOWS] -> (u1:User) \" +\r\n                                \"WHERE u.username = $username \" +\r\n                                \"RETURN u1.username as name \",\r\n                        parameters( \"username\", user));\r\n\r\n                while(result.hasNext())\r\n                {\r\n                    Record r = result.next();\r\n                    following.add(r.get(\"name\").asString());\r\n                }\r\n                return following;\r\n            });\r\n            if(!follow.isEmpty())\r\n                Utility.printTerminal(follow.get(0));\r\n            this.close();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return following;\r\n    }\r\n\r\n    public ArrayList<String> retrieveFollowedInsertionByUser(String user) {\r\n\r\n        this.open();\r\n        ArrayList<String> followed_ins = new ArrayList<>();\r\n\r\n        try (Session session = driver.session()) {\r\n\r\n            List<String> follow = session.readTransaction((TransactionWork<List<String>>) tx -> {\r\n                Result result = tx.run( \"MATCH (u:User) - [r:INTERESTED] -> (i:Insertion)\" +\r\n                                \"WHERE u.username = $username \" +\r\n                                \"RETURN i.uniq_id as uniq_id\",\r\n                        parameters( \"username\", user));\r\n\r\n                while(result.hasNext())\r\n                {\r\n                    Record r = result.next();\r\n                    followed_ins.add(r.get(\"uniq_id\").asString());\r\n                }\r\n                return followed_ins;\r\n            });\r\n            if(!followed_ins.isEmpty())\r\n                Utility.printTerminal(\"*************** NEO4j FOLLOWED INSERTIONS ***************\\n\"\r\n                                        + followed_ins.get(0));\r\n            this.close();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return followed_ins;\r\n    }\r\n\r\n    public boolean deleteInsertionNeo4J(String id) {\r\n        this.open();\r\n\r\n        try (Session session = driver.session()) {\r\n            session.writeTransaction((TransactionWork<Void>) tx -> {\r\n                tx.run(\r\n                        \"MATCH (u:Insertion {uniq_id: $id})\" +\r\n                                \"DETACH DELETE u\", parameters(\"id\", id));\r\n                return null;\r\n            });\r\n            return true;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }finally{\r\n            this.close();\r\n        }\r\n    }\r\n\r\n    public ArrayList<String> findMostFollowedUsers(int k) {\r\n\r\n        this.open();\r\n        ArrayList<String> followedUsers = new ArrayList<>();\r\n\r\n        try (Session session = driver.session()) {\r\n\r\n            session.readTransaction((TransactionWork<List<String>>) tx -> {\r\n                Result result = tx.run(\"match(u:User)-[r:FOLLOWS]->(u1:User) \" +\r\n                                \"RETURN u1.username as user, COUNT(r) as counter order by counter DESC limit $k\",\r\n                        parameters(\"k\", k));\r\n\r\n                while (result.hasNext()) {\r\n                    Record r = result.next();\r\n                    String user = r.get(\"user\").asString();\r\n                    int count = r.get(\"counter\").asInt();\r\n                    String us = user + \":\" + count;\r\n                    followedUsers.add(us);\r\n                }\r\n\r\n                return followedUsers;\r\n\r\n            });\r\n        } catch (Exception e)\r\n        {\r\n            e.printStackTrace();\r\n        }\r\n        return followedUsers;\r\n    }\r\n\r\n    public ArrayList<String> findNumberInterestingForCategory() {\r\n\r\n        this.open();\r\n        ArrayList<String> interesting = new ArrayList<>();\r\n\r\n        try (Session session = driver.session()) {\r\n\r\n            session.readTransaction((TransactionWork<List<String>>) tx -> {\r\n                Result result = tx.run(\"match(u:User)-[r:INTERESTED]->(i:Insertion) \" +\r\n                        \"RETURN DISTINCT i.category as category, count(r) AS counter\" +\r\n                        \" ORDER BY counter DESC\");\r\n\r\n                while (result.hasNext()) {\r\n                    Record r = result.next();\r\n                    String category = r.get(\"category\").asString();\r\n                    int count = r.get(\"counter\").asInt();\r\n                    String ins = category + \":\" + count;\r\n                    interesting.add(ins);\r\n                }\r\n\r\n                return interesting;\r\n\r\n            });\r\n        } catch (Exception e)\r\n        {\r\n            e.printStackTrace();\r\n        }\r\n        return interesting;\r\n\r\n    }\r\n\r\n    public ArrayList<String> findNumberPostedInsertionForCountry() {\r\n\r\n        this.open();\r\n        ArrayList<String> posted = new ArrayList<>();\r\n\r\n        try (Session session = driver.session()) {\r\n\r\n            session.readTransaction((TransactionWork<List<String>>) tx -> {\r\n                Result result = tx.run(\"match(u:User)-[r:POSTED]->(i:Insertion) \" +\r\n                        \"RETURN DISTINCT u.country as country, count(r) AS counter\" +\r\n                        \" ORDER BY counter DESC\");\r\n\r\n                while (result.hasNext()) {\r\n                    Record r = result.next();\r\n                    String country = r.get(\"country\").asString();\r\n                    int count = r.get(\"counter\").asInt();\r\n                    String ins = country + \":\" + count;\r\n                    posted.add(ins);\r\n                }\r\n\r\n                return posted;\r\n\r\n            });\r\n        } catch (Exception e)\r\n        {\r\n            e.printStackTrace();\r\n        }\r\n        return posted;\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/unipi/dii/largescale/secondchance/connection/ConnectionNeo4jDB.java b/src/main/java/it/unipi/dii/largescale/secondchance/connection/ConnectionNeo4jDB.java
--- a/src/main/java/it/unipi/dii/largescale/secondchance/connection/ConnectionNeo4jDB.java	(revision 190fd7128d92f590f9f2fdee59ddb2931f30cfd5)
+++ b/src/main/java/it/unipi/dii/largescale/secondchance/connection/ConnectionNeo4jDB.java	(date 1644577276754)
@@ -3,7 +3,6 @@
 import main.java.it.unipi.dii.largescale.secondchance.entity.Insertion;
 import main.java.it.unipi.dii.largescale.secondchance.entity.User;
 import main.java.it.unipi.dii.largescale.secondchance.utils.Utility;
-import org.bson.Document;
 import org.neo4j.driver.*;
 import org.neo4j.driver.Record;
 
@@ -12,30 +11,25 @@
 
 import static org.neo4j.driver.Values.parameters;
 
-public class ConnectionNeo4jDB implements AutoCloseable
-{
+public class ConnectionNeo4jDB implements AutoCloseable {
     private Driver driver;
     String uri = "neo4j://127.0.0.1:7687";
     String user = "neo4j";
     String password = "2nd-chance";
     public static ConnectionNeo4jDB connNeo;
 
-    public void open()
-    {
-        driver = GraphDatabase.driver( uri, AuthTokens.basic( user, password ) );
+    public void open() {
+        driver = GraphDatabase.driver(uri, AuthTokens.basic(user, password));
     }
 
     @Override
-    public void close()
-    {
+    public void close() {
         driver.close();
     }
 
-    public boolean addUser(final User u)
-    {
+    public boolean addUser(final User u) {
         this.open();
-        try ( Session session = driver.session() )
-        {
+        try (Session session = driver.session()) {
             session.writeTransaction((TransactionWork<Void>) tx -> {
                 tx.run("MERGE (u:User {username: $username, country: $country})",
                         parameters("username", u.getUsername(),
@@ -46,21 +40,18 @@
         } catch (Exception e) {
             e.printStackTrace();
             return false;
-        }finally{
+        } finally {
             this.close();
         }
     }
 
-    public boolean addInsertion(final Insertion i)
-    {
+    public boolean addInsertion(final Insertion i) {
         this.open();
-        try ( Session session = driver.session() )
-        {
+        try (Session session = driver.session()) {
             session.writeTransaction((TransactionWork<Void>) tx -> {
-                tx.run( "MERGE (i:Insertion {uniq_id: $uniq_id, category: $category," +
+                tx.run("MERGE (i:Insertion {uniq_id: $uniq_id, category: $category," +
                                 "gender: $gender})",
-                        parameters( "uniq_id", i.getId(), "category", i.getCategory(),
-                                "gender", i.getGender()));
+                        parameters("uniq_id", i.getId(), "category", i.getCategory()));
                 return null;
             });
             this.close();
@@ -75,13 +66,12 @@
     public void followUser(String follower, String followed) {
         this.open();
         System.out.println("USER_FOLLOWER: " + follower + "USER_FOLLOWED : " + followed);
-        try ( Session session = driver.session() )
-        {
+        try (Session session = driver.session()) {
             session.writeTransaction((TransactionWork<Void>) tx -> {
-                tx.run( "MATCH (u:User),(v) " +
+                tx.run("MATCH (u:User),(v) " +
                                 "WHERE u.username = $username1 AND v.username = $username2 " +
                                 "CREATE (u)-[:FOLLOWS]->(v)",
-                        parameters( "username1", follower, "username2", followed));
+                        parameters("username1", follower, "username2", followed));
                 return null;
             });
             this.close();
@@ -92,13 +82,12 @@
 
     public void unfollowUser(String unfollower, String unfollowed) {
         this.open();
-        try ( Session session = driver.session() )
-        {
+        try (Session session = driver.session()) {
             session.writeTransaction((TransactionWork<Void>) tx -> {
-                tx.run( "MATCH (u:User)-[rel:FOLLOWS]->(v)  " +
+                tx.run("MATCH (u:User)-[rel:FOLLOWS]->(v)  " +
                                 "WHERE u.username = $username1 AND v.username = $username2 " +
                                 "DELETE rel",
-                        parameters( "username1", unfollower, "username2", unfollowed));
+                        parameters("username1", unfollower, "username2", unfollowed));
                 return null;
             });
             this.close();
@@ -114,7 +103,7 @@
 
             List<String> similar = session.readTransaction((TransactionWork<List<String>>) tx -> {
 
-                Result result = tx.run( "MATCH (u:User)-[:FOLLOWS]->(m)-[:FOLLOWS]->(others) " +
+                Result result = tx.run("MATCH (u:User)-[:FOLLOWS]->(m)-[:FOLLOWS]->(others) " +
 
                                 "WHERE u.username = $username AND u.country = $country AND others.country = $country " +
                                 "AND NOT (u)-[:FOLLOWS]->(others) " +
@@ -146,7 +135,7 @@
 
             List<String> insertions = session.readTransaction((TransactionWork<List<String>>) tx -> {
 
-                Result result = tx.run( "MATCH (u:User)-[:FOLLOWS]->(m)-[:POSTED]->(i:Insertion) " +
+                Result result = tx.run("MATCH (u:User)-[:FOLLOWS]->(m)-[:POSTED]->(i:Insertion) " +
                                 "WHERE u.username = $username " +
                                 "RETURN i.uniq_id as SuggIns " +
                                 "LIMIT $k",
@@ -186,7 +175,7 @@
         } catch (Exception e) {
             e.printStackTrace();
             return false;
-        }finally{
+        } finally {
             this.close();
         }
     }
@@ -207,7 +196,7 @@
         } catch (Exception e) {
             e.printStackTrace();
             return false;
-        }finally {
+        } finally {
             this.close();
         }
     }
@@ -241,10 +230,9 @@
                 return null;
             });
             return true;
-        }catch(Exception e)
-        {
+        } catch (Exception e) {
             return false;
-        }finally{
+        } finally {
             this.close();
         }
     }
@@ -254,12 +242,12 @@
         this.open();
         Boolean check;
 
-        try(Session session = driver.session()) {
+        try (Session session = driver.session()) {
             check = session.readTransaction((TransactionWork<Boolean>) tx -> {
                 Result result = tx.run(
                         "MATCH (a:User {username: $username1})-[r:FOLLOWS]->(b:User {username: $username2}) " +
                                 "RETURN r",
-                        parameters( "username1", us1,
+                        parameters("username1", us1,
                                 "username2", us2));
 
                 return result.hasNext();
@@ -289,13 +277,13 @@
     public boolean createPostedRelationship(String node1, String node2) {
 
         this.open();
-        try(Session session = driver.session()) {
-                session.writeTransaction((TransactionWork<Void>) tx -> {
+        try (Session session = driver.session()) {
+            session.writeTransaction((TransactionWork<Void>) tx -> {
                 tx.run(
                         "MATCH (u:User),(i:Insertion) " +
                                 "WHERE u.username = $username AND i.uniq_id = $id " +
                                 "CREATE (u)-[:POSTED]->(i)",
-                        parameters( "username", node1,
+                        parameters("username", node1,
                                 "id", node2));
                 return null;
             });
@@ -319,19 +307,18 @@
         try (Session session = driver.session()) {
 
             List<String> follow = session.readTransaction((TransactionWork<List<String>>) tx -> {
-                Result result = tx.run( "MATCH (u:User) <- [r:FOLLOWS] - (u1:User) " +
+                Result result = tx.run("MATCH (u:User) <- [r:FOLLOWS] - (u1:User) " +
                                 "WHERE u.username = $username " +
                                 "RETURN u1.username as name ",
-                        parameters( "username", user));
+                        parameters("username", user));
 
-                while(result.hasNext())
-                {
+                while (result.hasNext()) {
                     Record r = result.next();
                     followers.add(r.get("name").asString());
                 }
                 return followers;
             });
-            if(!follow.isEmpty())
+            if (!follow.isEmpty())
                 Utility.printTerminal(follow.get(0));
             this.close();
         } catch (Exception e) {
@@ -348,19 +335,18 @@
         try (Session session = driver.session()) {
 
             List<String> follow = session.readTransaction((TransactionWork<List<String>>) tx -> {
-                Result result = tx.run( "MATCH (u:User) - [r:FOLLOWS] -> (u1:User) " +
+                Result result = tx.run("MATCH (u:User) - [r:FOLLOWS] -> (u1:User) " +
                                 "WHERE u.username = $username " +
                                 "RETURN u1.username as name ",
-                        parameters( "username", user));
+                        parameters("username", user));
 
-                while(result.hasNext())
-                {
+                while (result.hasNext()) {
                     Record r = result.next();
                     following.add(r.get("name").asString());
                 }
                 return following;
             });
-            if(!follow.isEmpty())
+            if (!follow.isEmpty())
                 Utility.printTerminal(follow.get(0));
             this.close();
         } catch (Exception e) {
@@ -377,21 +363,20 @@
         try (Session session = driver.session()) {
 
             List<String> follow = session.readTransaction((TransactionWork<List<String>>) tx -> {
-                Result result = tx.run( "MATCH (u:User) - [r:INTERESTED] -> (i:Insertion)" +
+                Result result = tx.run("MATCH (u:User) - [r:INTERESTED] -> (i:Insertion)" +
                                 "WHERE u.username = $username " +
                                 "RETURN i.uniq_id as uniq_id",
-                        parameters( "username", user));
+                        parameters("username", user));
 
-                while(result.hasNext())
-                {
+                while (result.hasNext()) {
                     Record r = result.next();
                     followed_ins.add(r.get("uniq_id").asString());
                 }
                 return followed_ins;
             });
-            if(!followed_ins.isEmpty())
+            if (!followed_ins.isEmpty())
                 Utility.printTerminal("*************** NEO4j FOLLOWED INSERTIONS ***************\n"
-                                        + followed_ins.get(0));
+                        + followed_ins.get(0));
             this.close();
         } catch (Exception e) {
             e.printStackTrace();
@@ -413,7 +398,7 @@
         } catch (Exception e) {
             e.printStackTrace();
             return false;
-        }finally{
+        } finally {
             this.close();
         }
     }
@@ -441,8 +426,7 @@
                 return followedUsers;
 
             });
-        } catch (Exception e)
-        {
+        } catch (Exception e) {
             e.printStackTrace();
         }
         return followedUsers;
@@ -471,8 +455,7 @@
                 return interesting;
 
             });
-        } catch (Exception e)
-        {
+        } catch (Exception e) {
             e.printStackTrace();
         }
         return interesting;
@@ -502,11 +485,38 @@
                 return posted;
 
             });
-        } catch (Exception e)
-        {
+        } catch (Exception e) {
             e.printStackTrace();
         }
         return posted;
 
+    }
+
+    public ArrayList<String> findCommonLikes(String currentUser, String otherUser) {
+
+        this.open();
+        ArrayList<String> commonLikes = new ArrayList<>();
+
+        try (Session session = driver.session()) {
+
+            session.readTransaction((TransactionWork<List<String>>) tx -> {
+                Result result = tx.run(
+                        "match(U:User{username: $currentUser})-[:INTERESTED]->(i:Insertion)<-[:INTERESTED]-(u1:User{username: $otherUser}) " +
+                                "return i.uniq_id as id;",
+                        parameters("currentUser", currentUser,
+                                "otherUser", otherUser));
+
+                while (result.hasNext()) {
+                    Record r = result.next();
+                    commonLikes.add(r.get("id").asString());
+                }
+
+                return commonLikes;
+            });
+
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return commonLikes;
     }
 }
Index: src/main/java/it/unipi/dii/largescale/secondchance/connection/ConnectionMongoDB.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.it.unipi.dii.largescale.secondchance.connection;\r\n\r\nimport com.mongodb.*;\r\nimport com.mongodb.client.*;\r\nimport com.mongodb.client.MongoClient;\r\nimport com.mongodb.client.model.*;\r\nimport com.mongodb.client.result.DeleteResult;\r\nimport com.mongodb.client.result.UpdateResult;\r\nimport main.java.it.unipi.dii.largescale.secondchance.entity.Balance;\r\nimport main.java.it.unipi.dii.largescale.secondchance.entity.Insertion;\r\nimport main.java.it.unipi.dii.largescale.secondchance.entity.Review;\r\nimport main.java.it.unipi.dii.largescale.secondchance.entity.User;\r\nimport main.java.it.unipi.dii.largescale.secondchance.utils.Session;\r\nimport main.java.it.unipi.dii.largescale.secondchance.utils.Utility;\r\nimport org.bson.Document;\r\nimport org.bson.conversions.Bson;\r\nimport org.bson.types.ObjectId;\r\n\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.*;\r\nimport java.util.function.Consumer;\r\n\r\nimport static com.mongodb.client.model.Aggregates.*;\r\nimport static com.mongodb.client.model.Filters.*;\r\nimport static com.mongodb.client.model.Projections.*;\r\nimport static com.mongodb.client.model.Sorts.descending;\r\nimport static com.mongodb.client.model.Updates.*;\r\n\r\npublic class ConnectionMongoDB{\r\n\r\n    private final String clusterAddress = \"mongodb://172.16.4.114:27020,172.16.4.115:27020,172.16.4.116:27020/\" +\r\n            \"?retryWrites=true&w=majority&wtimeout=10000\";\r\n\r\n    public static ConnectionMongoDB connMongo;\r\n    private MongoClient mongoClient;\r\n    private MongoDatabase db;\r\n    MongoCursor<Document> cursor;\r\n\r\n    static MongoCollection<Document> userColl;\r\n    static MongoCollection<Document> insertionColl;\r\n    static MongoCollection<Document> codeColl;\r\n    static MongoCollection<Document> balanceColl;\r\n\r\n    /* ********* CONNECTION SECTION ********* */\r\n\r\n    public void connectToVms(){\r\n        mongoClient = MongoClients.create(clusterAddress);\r\n\r\n        // Read Preferences at DB level\r\n        // Write concern at DB level\r\n        db = mongoClient.getDatabase(\"lsmdb\")\r\n                .withReadPreference(ReadPreference.secondary())\r\n                .withWriteConcern(WriteConcern.W1);\r\n\r\n        // Read Preferences at collection level\r\n        userColl = db.getCollection(\"user\")\r\n                .withReadPreference(ReadPreference.secondary());\r\n\r\n        insertionColl = db.getCollection(\"insertion\")\r\n                .withReadPreference(ReadPreference.secondary());\r\n\r\n        codeColl = db.getCollection(\"code\")\r\n                .withReadPreference(ReadPreference.secondary());\r\n\r\n        balanceColl = db.getCollection(\"balance\")\r\n                .withReadPreference(ReadPreference.primary())\r\n                .withWriteConcern(WriteConcern.W3);\r\n\r\n    }\r\n\r\n    public void connectToLocal(){\r\n        ConnectionString uri = new ConnectionString(\"mongodb://localhost:27017\");\r\n        mongoClient = MongoClients.create(uri);\r\n        db = mongoClient.getDatabase(\"local\");\r\n\r\n        userColl = db.getCollection(\"user\");\r\n        insertionColl = db.getCollection(\"insertion\");\r\n        codeColl = db.getCollection(\"code\");\r\n        balanceColl = db.getCollection(\"balance\");\r\n    }\r\n\r\n    public void connectToAtlas(){\r\n        ConnectionString uri = new ConnectionString(\"mongodb+srv://roots:1234@cluster0.n8fgw.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\");\r\n        mongoClient = MongoClients.create(uri);\r\n        db = mongoClient.getDatabase(\"project\");\r\n        userColl = db.getCollection(\"user\");\r\n        insertionColl = db.getCollection(\"insertion\");\r\n        codeColl = db.getCollection(\"code\");\r\n        balanceColl = db.getCollection(\"balance\");\r\n\r\n    }\r\n\r\n    public void openConnection() {\r\n\r\n        connectToLocal();\r\n        //connectToVms();\r\n        //connectToAtlas();\r\n\r\n        System.out.println(\"**************** USER ******************\");\r\n        System.out.println(userColl.countDocuments());\r\n        System.out.println(\"**************** INSERTION ******************\");\r\n        System.out.println(insertionColl.countDocuments());\r\n        System.out.println(\"**************** CODE ******************\");\r\n        System.out.println(codeColl.countDocuments());\r\n\r\n        // 2 - Find the first document\r\n        userColl.find().limit(1).forEach(printDocuments());\r\n\r\n    }\r\n\r\n    public void closeConnection() {\r\n        mongoClient.close();\r\n    }\r\n\r\n    private static Consumer<Document> printDocuments() {\r\n        return doc -> System.out.println(doc.toJson());\r\n    }\r\n\r\n    /* ************************* USER SECTION ************************* */\r\n\r\n    public boolean registerUser(User u) {\r\n\r\n        if (userAlreadyPresent(u.getUsername())) {\r\n            Utility.infoBox(\"Please, choose another username and try again.\", \"Error\", \"Username already used!\");\r\n            return false;\r\n        }\r\n\r\n        Document user = new Document(\"address\", u.getAddress())\r\n                .append(\"city\", u.getCity())\r\n                .append(\"country\", u.getCountry())\r\n                .append(\"email\", u.getEmail())\r\n                .append(\"img_profile\", u.getImage())\r\n                .append(\"name\", u.getName())\r\n                .append(\"password\", u.getPassword())\r\n                .append(\"suspended\", u.getSuspended())\r\n                .append(\"username\", u.getUsername());\r\n\r\n        Document balanceUser = new Document(\"username\", u.getUsername())\r\n                .append(\"credit\", 0);\r\n\r\n        userColl.insertOne(user);\r\n        balanceColl.insertOne(balanceUser);\r\n\r\n        return true;\r\n    }\r\n\r\n    public Document findUserByUsername(String username) {\r\n\r\n        cursor = userColl.find(eq(\"username\", username)).iterator();\r\n\r\n        if (cursor.hasNext())\r\n            return cursor.next();\r\n\r\n        Utility.infoBox(\"There is no user with this username.\", \"Error\", \"Username not found!\");\r\n        return null;\r\n\r\n    }\r\n\r\n    public boolean userAlreadyPresent(String username) {\r\n\r\n        cursor = userColl.find(eq(\"username\", username)).iterator();\r\n        return cursor.hasNext();\r\n\r\n    }\r\n\r\n    public boolean checkCredentials(String username, String encrypted) {\r\n\r\n        cursor = userColl.find(and(eq(\"username\", username), eq(\"password\", encrypted))).iterator();\r\n\r\n        return cursor.hasNext();\r\n    }\r\n\r\n    public User findUserDetails(String username) {\r\n\r\n        User logUser = new User();\r\n        Document user = userColl.find(eq(\"username\", username)).first();\r\n        logUser.setUsername(user.getString(\"username\"));\r\n        logUser.setName(user.getString(\"name\"));\r\n        logUser.setEmail(user.getString(\"email\"));\r\n        logUser.setAddress(user.getString(\"address\"));\r\n        logUser.setCity(user.getString(\"city\"));\r\n        logUser.setCountry(user.getString(\"country\"));\r\n        logUser.setSuspended(user.getBoolean(\"suspended\"));\r\n        logUser.setImage(user.getString(\"img_profile\"));\r\n        if((ArrayList<Document>) user.get(\"reviews\") != null){\r\n            logUser.setReviews((ArrayList<Document>) user.get(\"reviews\"));\r\n            logUser.setRating(user.getDouble(\"rating\"));\r\n        }\r\n        if((ArrayList<Document>) user.get(\"sold\") != null)\r\n            logUser.setSold((ArrayList<Document>) user.get(\"sold\"));\r\n        if((ArrayList<Document>) user.get(\"purchased\")!= null)\r\n            logUser.setPurchased((ArrayList<Document>) user.get(\"purchased\"));\r\n\r\n        return logUser;\r\n    }\r\n\r\n    public ArrayList<Document> followedUserInsertions(ArrayList<String> insList) {\r\n\r\n        ArrayList<Document> insertions = new ArrayList<>();\r\n\r\n        for (String s : insList) {\r\n            Document d = insertionColl.find(eq(\"_id\", new ObjectId(s))).first();\r\n            insertions.add(d);\r\n        }\r\n\r\n        return insertions;\r\n    }\r\n\r\n    public ArrayList<Document> findUserByFilters(String country, String rating) {\r\n\r\n        ArrayList<Document> users = new ArrayList<>();\r\n        double r ;\r\n        double lowerBound = 0;\r\n        double upperBound = 0;\r\n\r\n        if(!rating.equals(\"rating\")){\r\n            r = Double.parseDouble(rating);\r\n            lowerBound = r-0.5;\r\n            upperBound = r+0.5;\r\n        }\r\n\r\n        if(country.equals(\"country\") && !rating.equals(\"rating\"))\r\n        {\r\n            cursor  = userColl.find(and(lte(\"rating\", upperBound), gt(\"rating\", lowerBound))).iterator();\r\n        }\r\n        else if(!country.equals(\"country\") && rating.equals(\"rating\"))\r\n        {\r\n            cursor  = userColl.find(eq(\"country\", country)).iterator();\r\n        }\r\n        else{\r\n            cursor  = userColl.find(and(eq(\"country\", country), lte(\"rating\", upperBound), gt(\"rating\", lowerBound))).iterator();\r\n        }\r\n\r\n        while(cursor.hasNext())\r\n        {\r\n            users.add(cursor.next());\r\n        }\r\n\r\n        return users;\r\n\r\n    }\r\n\r\n    public void deleteUserMongo(String username) {\r\n\r\n        Bson query = eq(\"username\", username);\r\n\r\n        try {\r\n            userColl.deleteOne(query);\r\n        } catch (MongoException me) {\r\n            System.err.println(\"Unable to delete due to an error: \" + me);\r\n        }\r\n    }\r\n\r\n    public void submitNewProfileImg(String url, String user) {\r\n\r\n        Document queryUser = new Document().append(\"username\",  user);\r\n\r\n        Bson updatesUser = Updates.combine(\r\n                Updates.set(\"img_profile\", url)\r\n        );\r\n\r\n        UpdateOptions options = new UpdateOptions().upsert(true);\r\n\r\n        try {\r\n            UpdateResult resultUser = userColl.updateOne(queryUser, updatesUser, options);\r\n            System.out.println(\"Modified document count: \" + resultUser.getModifiedCount());\r\n            System.out.println(\"Upserted id: \" + resultUser.getUpsertedId()); // only contains a value when an upsert is performed\r\n        } catch (MongoException me) {\r\n            System.err.println(\"Unable to update due to an error: \" + me);\r\n        }\r\n    }\r\n\r\n    public void updateLoggedUser() {\r\n\r\n        Bson filter = eq(\"username\", Session.getLoggedUser().getUsername());\r\n        Bson update = set(\"purchased\", Session.getLoggedUser().getPurchased());\r\n        userColl.findOneAndUpdate(filter, update);\r\n\r\n        update = set(\"sold\", Session.getLoggedUser().getSold());\r\n        userColl.findOneAndUpdate(filter, update);\r\n\r\n    }\r\n\r\n    /* *********************** INSERTION SECTION *********************** */\r\n\r\n    public ArrayList<Document> findViralInsertions(int k) {\r\n\r\n        ArrayList<Document> insertions = new ArrayList<>();\r\n        Bson sort = sort(descending(\"interested\"));\r\n        Bson limit = limit(k);\r\n\r\n        AggregateIterable<Document> r = insertionColl.aggregate(Arrays.asList(sort ,limit));\r\n\r\n        for (Document document : r)\r\n            insertions.add(document);\r\n\r\n        return insertions;\r\n    }\r\n\r\n    public ArrayList<Document> findInsertionByFilters(String size, String price, String gender, String status, String category, String color) {\r\n\r\n        ArrayList<Document> insertions = new ArrayList<>();\r\n        List<Bson> filters = new ArrayList<>();\r\n\r\n        if(!size.equals(\"size\")) {\r\n            filters.add(Filters.eq(\"size\", size));\r\n        }\r\n        if(!price.equals(\"price\")) {\r\n            String[] range = price.split(\"-\");\r\n            if(range.length == 1) {\r\n                filters.add(Filters.gte(\"price\", Double.parseDouble(range[0])));\r\n            } else {\r\n                filters.add(Filters.gte(\"price\", Double.parseDouble(range[0])));\r\n                filters.add(Filters.lte(\"price\", Double.parseDouble(range[1])));\r\n            }\r\n        }\r\n        if(!gender.equals(\"gender\")) {\r\n            filters.add(Filters.eq(\"gender\", gender));\r\n        }\r\n        if(!status.equals(\"status\")) {\r\n            filters.add(Filters.eq(\"status\", status));\r\n        }\r\n        if(!category.equals(\"category\")) {\r\n            filters.add(Filters.eq(\"category\", category));\r\n        }\r\n        if(!color.equals(\"color\")) {\r\n            filters.add(Filters.eq(\"color\", color));\r\n        }\r\n\r\n        cursor = insertionColl.find(Filters.and(filters)).iterator();\r\n        while(cursor.hasNext())\r\n            insertions.add(cursor.next());\r\n\r\n        return insertions;\r\n    }\r\n\r\n    public ArrayList<Document> findInsertionBySeller(String seller) {\r\n\r\n        ArrayList<Document> insertions = new ArrayList<>();\r\n\r\n        cursor = insertionColl.find(eq(\"seller\", seller)).iterator();\r\n        while (cursor.hasNext())\r\n            insertions.add(cursor.next());\r\n\r\n        return insertions;\r\n    }\r\n\r\n    public ArrayList<Document> findInsertionByBrand(String brand) {\r\n\r\n        ArrayList<Document> insertions = new ArrayList<>();\r\n\r\n        cursor = insertionColl.find(eq(\"brand\", brand)).iterator();\r\n        while (cursor.hasNext())\r\n            insertions.add(cursor.next());\r\n\r\n        return insertions;\r\n    }\r\n\r\n    public Insertion findInsertion(String insertion_id) {\r\n\r\n        Insertion insertion = new Insertion();\r\n        Document insertion_found = insertionColl.find(eq(\"_id\", new ObjectId(insertion_id))).first();\r\n\r\n        if(insertion_found == null)\r\n            return null;\r\n        insertion.setId(insertion_found.get(\"_id\").toString());\r\n        insertion.setBrand(insertion_found.getString(\"brand\"));\r\n        insertion.setCountry(insertion_found.getString(\"country\"));\r\n        insertion.setCategory(insertion_found.getString(\"category\"));\r\n        insertion.setColor(insertion_found.getString(\"color\"));\r\n        insertion.setDescription(insertion_found.getString(\"description\"));\r\n        insertion.setGender(insertion_found.getString(\"gender\"));\r\n        insertion.setImage_url(insertion_found.getString(\"image_url\"));\r\n        insertion.setInterested(insertion_found.getInteger(\"interested\"));\r\n        insertion.setPrice(insertion_found.getDouble(\"price\"));\r\n        insertion.setViews(insertion_found.getInteger(\"views\"));\r\n        insertion.setSeller(insertion_found.getString(\"seller\"));\r\n        insertion.setSize(insertion_found.getString(\"size\"));\r\n        insertion.setStatus(insertion_found.getString(\"status\"));\r\n        insertion.setTimestamp(insertion_found.getString(\"timestamp\"));\r\n\r\n        return insertion;\r\n\r\n    }\r\n\r\n    public void rollBackInsertion(int i, String username, Insertion insertion) {\r\n\r\n        for(; i < 4; i++) {\r\n            switch (i) {\r\n                case 0: //insert insertion again\r\n                    insertionColl.insertOne(Insertion.toDocument(insertion));\r\n                    System.out.println(\"CASE 0\");\r\n                    continue;\r\n                case 1: //remove item from sold array in user\r\n                    Bson filter_sold = eq(\"username\", insertion.getSeller());\r\n                    Bson update = Updates.popLast(\"sold\");\r\n                    userColl.findOneAndUpdate(filter_sold, update);\r\n                    System.out.println(\"CASE 1\");\r\n                    continue;\r\n                case 2: //decrement seller balance\r\n                    updateBalance(insertion.getSeller(), insertion.getPrice(), '-');\r\n                    System.out.println(\"CASE 2\");\r\n                    continue;\r\n                case 3: //increment buyer balance\r\n                    updateBalance(username, insertion.getPrice(), '+');\r\n                    System.out.println(\"CASE 3\");\r\n                    continue;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    public boolean buyCurrentInsertion(String username, Insertion insertion){\r\n\r\n        ClientSession clientSession = mongoClient.startSession();\r\n\r\n        SimpleDateFormat date = new SimpleDateFormat(\"yy-MM-dd HH:mm:ss\");\r\n        String timestamp = date.format(new Date());\r\n\r\n        TransactionBody<String> txnFunc = () -> {\r\n\r\n            double currentBalance = ConnectionMongoDB.connMongo.getBalance();\r\n            double checkBalance = currentBalance - insertion.getPrice();\r\n\r\n            if (checkBalance < 0.0) {\r\n                Utility.infoBox(\"Cannot purchase, not enough balance\", \"Error\", \"Error purchase\");\r\n                return \"Buyer has not enough balance\";\r\n            }\r\n\r\n            boolean upBuyer, upSeller;\r\n            upBuyer = updateBalance(Session.getLoggedUser().getUsername(), insertion.getPrice(), '-');\r\n            if(!upBuyer)\r\n            {\r\n                Utility.infoBox(\"Cannot buy product\", \"Error\", \"Error purchase\");\r\n                return \"Cannot update buyer balance\";\r\n            } else {\r\n                upSeller = updateBalance(insertion.getSeller(), insertion.getPrice(), '+');\r\n                if(!upSeller) {\r\n                    rollBackInsertion(3, Session.getLoggedUser().getUsername(), insertion);\r\n                    Utility.infoBox(\"Cannot buy product\", \"Error\", \"Error purchase\");\r\n                    return \"Cannot update seller balance\";\r\n                }\r\n            }\r\n\r\n            //order purchased\r\n            Document purchased = new Document()\r\n                    .append(\"_id\", new ObjectId())\r\n                    .append(\"timestamp\", timestamp)\r\n                    .append(\"seller\", insertion.getSeller())\r\n                    .append(\"reviewed\", false)\r\n                    .append(\"insertion\", new Document(\"image\", insertion.getImage_url()).\r\n                            append(\"price\", insertion.getPrice()).\r\n                            append(\"size\", insertion.getSize()).\r\n                            append(\"status\", insertion.getStatus()).\r\n                            append(\"category\", insertion.getCategory()));\r\n\r\n            //order sold\r\n            Document sold = new Document()\r\n                    .append(\"_id\", new ObjectId())\r\n                    .append(\"timestamp\", timestamp)\r\n                    .append(\"buyer\", username)\r\n                    .append(\"reviewed\", false)\r\n                    .append(\"insertion\", new Document(\"image\", insertion.getImage_url()).\r\n                            append(\"price\", insertion.getPrice()).\r\n                            append(\"size\", insertion.getSize()).\r\n                            append(\"status\", insertion.getStatus()).\r\n                            append(\"category\", insertion.getCategory()));\r\n\r\n            Bson filter_sold = eq(\"username\", insertion.getSeller());\r\n            BasicDBObject update_sold = new BasicDBObject(\"$push\", new BasicDBObject(\"sold\", sold));\r\n\r\n            //insert new document into user collection\r\n            try {\r\n                userColl.findOneAndUpdate(filter_sold, update_sold);\r\n            } catch (MongoException e) {\r\n                rollBackInsertion(2, Session.getLoggedUser().getUsername(), insertion);\r\n                return (\"Unable to insert item in sold array: \" + e);\r\n            }\r\n\r\n            //update local purchased array\r\n            ArrayList<Document> purc;\r\n            if(Session.getLoggedUser().getPurchased() != null)\r\n                purc = Session.getLoggedUser().getPurchased();\r\n            else\r\n                purc = new ArrayList<>();\r\n            purc.add(purchased);\r\n            Session.getLoggedUser().setPurchased(purc);\r\n\r\n            try {\r\n                insertionColl.deleteOne(new Document(\"image_url\", insertion.getImage_url()).append(\"seller\", insertion.getSeller()).append(\"timestamp\", insertion.getTimestamp()));\r\n                return \"OK\";\r\n            } catch (MongoException e) {\r\n                rollBackInsertion(1, Session.getLoggedUser().getUsername(), insertion);\r\n                return (\"Unable to delete insertion: \" + e);\r\n            }\r\n        };\r\n        return executeTransaction(clientSession, txnFunc);\r\n    }\r\n\r\n    private boolean executeTransaction(ClientSession clientSession, TransactionBody<String> txnFunc) {\r\n\r\n        String message = \"\";\r\n\r\n        message = clientSession.withTransaction(txnFunc);\r\n\r\n        System.out.println(message);\r\n\r\n        return message.equals(\"OK\");\r\n    }\r\n\r\n    public boolean updateNumInterested(String insertion_id, int i) {\r\n\r\n        Bson filter = eq(\"_id\", new ObjectId(insertion_id));\r\n        Bson update = inc(\"interested\", i);\r\n        try {\r\n            db.getCollection(\"insertion\").findOneAndUpdate(filter, update);\r\n            return true;\r\n        }catch(MongoException me){\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public void updateNumView(String uniq_id) {\r\n\r\n        Bson filter = eq(\"_id\", new ObjectId(uniq_id));\r\n        Bson update = inc(\"views\", 1);\r\n\r\n        db.getCollection(\"insertion\").findOneAndUpdate(filter, update);\r\n\r\n    }\r\n\r\n    public ArrayList<Document> findTopRatedUsersByCountry(String country) {\r\n\r\n        ArrayList<Document> list = new ArrayList<>();\r\n\r\n        BasicDBObject whereQuery = new BasicDBObject();\r\n        whereQuery.put(\"country\", country);\r\n\r\n        try (MongoCursor<Document> cursor = userColl.find(whereQuery).iterator()) {\r\n            while (cursor.hasNext()) {\r\n                Document doc = cursor.next();\r\n                if (doc.get(\"rating\") == null)\r\n                    continue;\r\n                list.add(doc);\r\n            }\r\n        }\r\n        return list;\r\n\r\n    }\r\n\r\n    /* ************************* ADMIN SECTION ************************* */\r\n\r\n    public Document verifyUserInDB(String username, boolean choice) {\r\n\r\n        Document user;\r\n\r\n        if (choice)\r\n            user = userColl.find(eq(\"username\", username)).first();\r\n        else\r\n            user = userColl.find(eq(\"name\", username)).first();\r\n\r\n        return user;\r\n    }\r\n\r\n    public Document verifyInsertionInDB(String id, boolean choice) {\r\n\r\n        Document insertion;\r\n\r\n        if (choice)\r\n            insertion = insertionColl.find(eq(\"_id\", new ObjectId(id))).first();\r\n        else\r\n            insertion = insertionColl.find(eq(\"seller\", id)).first();\r\n\r\n        return insertion;\r\n    }\r\n\r\n    public ArrayList<Document> findMostActiveUsersSellers(int k, boolean choice) {\r\n\r\n        ArrayList<Document> orders = new ArrayList<>();\r\n        AggregateIterable<Document> aggr;\r\n        // true = select the top k users with more purchased orders\r\n        if(choice) {\r\n\r\n            Bson match = match(exists(\"purchased.0\"));\r\n            Bson projection = new Document(\"$size\", \"$purchased\");\r\n            Bson project = Aggregates.project(new Document(\"count\", projection).append(\"username\", \"$username\"));\r\n            Bson sort = sort(descending(\"count\"));\r\n            Bson limit = limit(k);\r\n            aggr = userColl.aggregate(\r\n                    Arrays.asList(\r\n                            match, project, sort, limit\r\n                    )\r\n            );\r\n        }\r\n        else        // false = select the top k with more purchased orders\r\n        {\r\n            Bson match = match(exists(\"sold.0\"));\r\n            Bson projection = new Document(\"$size\", \"$sold\");\r\n            Bson project = Aggregates.project(new Document(\"count\", projection).append(\"username\", \"$username\"));\r\n            Bson sort = sort(descending(\"count\"));\r\n            Bson limit = limit(k);\r\n            aggr = userColl.aggregate(\r\n                    Arrays.asList(\r\n                            match, project, sort, limit\r\n                    )\r\n            );\r\n        }\r\n        for (Document d : aggr)\r\n            orders.add(d);\r\n\r\n        return orders;\r\n    }\r\n\r\n    public ArrayList<Document> findTopKRatedUser(int k, String country) {\r\n\r\n        ArrayList<Document> array = new ArrayList<>();\r\n\r\n        Bson limit = limit(k);\r\n        Bson project = project(fields(excludeId(), include(\"username\"), include(\"rating\")));\r\n        AggregateIterable<Document> aggr  = userColl.aggregate(\r\n                Arrays.asList(\r\n                        Aggregates.match(Filters.eq(\"country\", country)),\r\n                        Aggregates.sort(descending(\"rating\")),\r\n                        project,\r\n                        limit\r\n                )\r\n        );\r\n\r\n        for (Document document : aggr) {\r\n\r\n            //document.append(\"name\", document.getString(\"name\"));\r\n            //document.append(\"rating\", document.getDouble(\"rating\"));\r\n            array.add(document);\r\n        }\r\n        return array;\r\n    }\r\n\r\n    public ArrayList<Document> findTopKInterestingInsertion(int k, String category) {\r\n\r\n        ArrayList<Document> array = new ArrayList<>();\r\n\r\n        Bson limit = limit(k);\r\n        AggregateIterable<Document> aggr = insertionColl.aggregate(\r\n                Arrays.asList(\r\n                        Aggregates.match(Filters.eq(\"category\", category)),\r\n                        Aggregates.sort(descending(\"interested\")),\r\n                        limit\r\n                )\r\n        );\r\n\r\n        for (Document document : aggr)\r\n            array.add(document);\r\n\r\n        return array;\r\n    }\r\n\r\n    public ArrayList<Document> findTopKViewedInsertion(int k, String category) {\r\n\r\n        ArrayList<Document> array = new ArrayList<>();\r\n\r\n        Bson limit = limit(k);\r\n        AggregateIterable<Document> aggr  = insertionColl.aggregate(\r\n                Arrays.asList(\r\n                        Aggregates.match(Filters.eq(\"category\", category)),\r\n                        Aggregates.sort(descending(\"views\")),\r\n                        limit\r\n                )\r\n        );\r\n\r\n        for (Document document : aggr)\r\n            array.add(document);\r\n\r\n        return array;\r\n    }\r\n\r\n    public void suspendUser(String username) {\r\n\r\n        Document query = new Document().append(\"username\",  username);\r\n        Bson updates = Updates.combine(\r\n                Updates.set(\"suspended\", true));\r\n                UpdateOptions options = new UpdateOptions().upsert(true);\r\n\r\n        try {\r\n            UpdateResult result = userColl.updateOne(query, updates, options);\r\n            System.out.println(\"Modified document count: \" + result.getModifiedCount());\r\n            System.out.println(\"Upserted id: \" + result.getUpsertedId()); // only contains a value when an upsert is performed\r\n        }catch (MongoException me) {\r\n            System.err.println(\"Unable to update due to an error: \" + me);\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    public void unsuspendUser(String username) {\r\n\r\n        Document query = new Document().append(\"username\",  username);\r\n\r\n        Bson updates = Updates.combine(\r\n                Updates.set(\"suspended\", false));\r\n                UpdateOptions options = new UpdateOptions().upsert(true);\r\n\r\n        try {\r\n            UpdateResult result = userColl.updateOne(query, updates, options);\r\n            System.out.println(\"Modified document count: \" + result.getModifiedCount());\r\n            System.out.println(\"Upserted id: \" + result.getUpsertedId()); // only contains a value when an upsert is performed\r\n        } catch (MongoException me) {\r\n            System.err.println(\"Unable to update due to an error: \" + me);\r\n        }\r\n    }\r\n\r\n    public Insertion findInsertionDetails(String id) {\r\n\r\n        Insertion ins = new Insertion();\r\n        Document insertion = insertionColl.find(eq(\"_id\", new ObjectId(id))).first();\r\n\r\n        ins.setCategory(insertion.getString(\"category\"));\r\n        ins.setPrice(insertion.getDouble(\"price\"));\r\n        ins.setViews(insertion.getInteger(\"views\"));\r\n\r\n        return ins;\r\n    }\r\n\r\n    public ArrayList<Insertion> findMultipleInsertionDetails(String seller) {\r\n\r\n        ArrayList<Insertion> array = new ArrayList<>();\r\n\r\n        AggregateIterable<Document> aggr  = insertionColl.aggregate(\r\n                Arrays.asList(\r\n                        Aggregates.match(Filters.eq(\"seller\", seller))\r\n                )\r\n        );\r\n\r\n        for (Document document : aggr) {\r\n            Insertion ins = new Insertion();\r\n            ins.setCategory(document.getString(\"category\"));\r\n            ins.setPrice(document.getDouble(\"price\"));\r\n            ins.setViews(document.getInteger(\"views\"));\r\n            ins.setId(document.get(\"_id\").toString());\r\n            ins.setImage_url(document.getString(\"image_url\"));\r\n            array.add(ins);\r\n        }\r\n        return array;\r\n    }\r\n\r\n    public ArrayList<Insertion> findInsertionDetailsNeo4J(ArrayList<String> followed_ins)  {\r\n\r\n        Insertion ins;\r\n        ArrayList<Insertion> insertions = new ArrayList<Insertion>();\r\n\r\n        for (String followed_in : followed_ins) {\r\n            Document insertion = insertionColl.find(eq(\"_id\", new ObjectId(followed_in))).first();\r\n\r\n            ins = new Insertion();\r\n            ins.setCategory(insertion.getString(\"category\"));\r\n            ins.setPrice(insertion.getDouble(\"price\"));\r\n            ins.setImage_url(insertion.getString(\"image_url\"));\r\n            ins.setViews(insertion.getInteger(\"views\"));\r\n            ins.setSeller(insertion.getString(\"seller\"));\r\n            ins.setId(insertion.get(\"_id\").toString());\r\n\r\n            insertions.add(ins);\r\n        }\r\n        return insertions;\r\n    }\r\n\r\n    public void addInsertion(Insertion i) throws Exception {\r\n\r\n        Document ins = Insertion.toDocument(i);\r\n        insertionColl.insertOne(ins);\r\n\r\n    }\r\n\r\n    public void addReview(Review rev) {\r\n\r\n        Document review = new Document()\r\n                .append(\"timestamp\", rev.getTimestamp())\r\n                .append(\"reviewer\", rev.getReviewer())\r\n                .append(\"title\", rev.getTitle())\r\n                .append(\"text\", rev.getText())\r\n                .append(\"rating\", rev.getRating());\r\n\r\n        System.out.println(\"REVIEW: \" + review);\r\n        BasicDBObject query = new BasicDBObject();\r\n        query.put(\"username\", rev.getSeller());\r\n\r\n        BasicDBObject push_data = new BasicDBObject(\"$push\", new BasicDBObject(\"reviews\", review));\r\n\r\n        userColl.findOneAndUpdate(query, push_data);\r\n    }\r\n\r\n    public void updateSellerRating(String seller) {\r\n\r\n        Document d = userColl.find(eq(\"username\", seller)).first();\r\n        List<Document> list;\r\n        list = d.getList(\"reviews\", Document.class);\r\n\r\n        Double avg;\r\n        int sum = 0;\r\n\r\n        for (Document document : list) {\r\n            sum += document.getInteger(\"rating\");\r\n        }\r\n\r\n        avg = (double) sum / (double) list.size();\r\n\r\n        BasicDBObject newDocument = new BasicDBObject();\r\n        newDocument.put(\"rating\", avg);\r\n        // {$set: {\"rating\": avg}}\r\n        BasicDBObject updateObject = new BasicDBObject();\r\n        updateObject.put(\"$set\", newDocument);\r\n        // condition (where field \"reviews\" exists)\r\n        BasicDBObject query = new BasicDBObject();\r\n        query.put(\"username\", d.getString(\"username\"));\r\n\r\n        userColl.updateOne(query, updateObject);\r\n    }\r\n\r\n    public void setInsertionReviewed(String timestamp, Document up) {\r\n\r\n        BasicDBObject query = new BasicDBObject();\r\n        query.put(\"username\",Session.getLoggedUser().getUsername());\r\n        query.put(\"purchased.timestamp\", timestamp);\r\n        BasicDBObject update = new BasicDBObject(\"$set\", new BasicDBObject(\"purchased.$.reviewed\", true));\r\n        userColl.findOneAndUpdate(query, update);\r\n\r\n    }\r\n\r\n    public boolean deleteInsertionMongo(String id) {\r\n\r\n        Bson query = eq(\"_id\", new ObjectId(id));\r\n\r\n        try {\r\n            DeleteResult result = insertionColl.deleteOne(query);\r\n            return (result.getDeletedCount() == 1);\r\n        } catch (MongoException me) {\r\n            System.err.println(\"Unable to delete due to an error: \" + me);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /* ************************* BALANCE SECTION ************************* */\r\n\r\n    public void addFundsToWallet(String username, String id_code) {\r\n\r\n        Document code;\r\n        double new_balance = 0.0;\r\n\r\n        code = codeColl.find(eq(\"code\", id_code)).first();\r\n        if (code == null) {\r\n            Utility.infoBox(\"The code that you have inserted is not valid.\", \"Error\", \"Code doesn't exist!\");\r\n            return;\r\n        }\r\n\r\n        double creditToAdd = code.getInteger(\"credit\");\r\n        new_balance = ConnectionMongoDB.connMongo.getBalance() + creditToAdd;\r\n\r\n        try {\r\n            updateBalance(Session.getLoggedUser().getUsername(), creditToAdd, '+');\r\n            Utility.infoBox(\"Deposit of \" + code.getInteger(\"credit\") + \"â‚¬ euros successfully executed\", \"Success\", \"Deposit done!\");\r\n            deleteCode(code.getString(\"_id\"));\r\n        } catch (MongoException me) {\r\n            System.err.println(\"Unable to update due to an error: \" + me);\r\n        }\r\n    }\r\n\r\n    public boolean updateBalance(String username, double credit, char c) {\r\n\r\n        double updated;\r\n        Bson query = eq(\"username\", username);\r\n        Bson update = null;\r\n\r\n        switch(c) {\r\n            case '+':\r\n                update = inc(\"credit\", credit);\r\n                break;\r\n            case '-':\r\n                update = inc(\"credit\", -credit);\r\n                break;\r\n            default:\r\n                Utility.printTerminal(\"Operation not allowed.\");\r\n                break;\r\n        }\r\n\r\n        //update balance\r\n        try {\r\n            Document d = balanceColl.findOneAndUpdate(query, update);\r\n            updated = d.getDouble(\"credit\");\r\n            Balance.balance.setCredit(updated);\r\n            return true;\r\n        } catch (MongoException me) {\r\n            System.err.println(\"Unable to update \" + username + \"'s balance: \" + me);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public double getBalance() {\r\n\r\n        FindIterable<Document> cursor = null;\r\n        try {\r\n            Bson filter = Filters.eq(\"username\", Session.getLoggedUser().getUsername());\r\n            Bson projection = fields(include(\"credit\"), excludeId());\r\n            cursor = balanceColl.find(filter).projection(projection);\r\n        } catch (MongoException me) {\r\n            System.err.println(\"Unable to get balance from db: \" + me);\r\n        }\r\n        return cursor.first().getDouble(\"credit\");\r\n    }\r\n\r\n    public boolean insertBalance(Balance b) {\r\n\r\n        try {\r\n            balanceColl.insertOne(b.toDocument());\r\n            return true;\r\n        } catch (MongoException me) {\r\n            System.err.println(\"Unable to add new document in balance collection: \" + me);\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    /* ************************* CODE SECTION ************************* */\r\n\r\n    private void deleteCode(String id) {\r\n\r\n        Bson query = eq(\"_id\", id);\r\n\r\n        try {\r\n            DeleteResult result = codeColl.deleteOne(query);\r\n            System.out.println(\"Deleted document count: \" + result.getDeletedCount());\r\n        } catch (MongoException me) {\r\n            System.err.println(\"Unable to delete due to an error: \" + me);\r\n        }\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/unipi/dii/largescale/secondchance/connection/ConnectionMongoDB.java b/src/main/java/it/unipi/dii/largescale/secondchance/connection/ConnectionMongoDB.java
--- a/src/main/java/it/unipi/dii/largescale/secondchance/connection/ConnectionMongoDB.java	(revision 190fd7128d92f590f9f2fdee59ddb2931f30cfd5)
+++ b/src/main/java/it/unipi/dii/largescale/secondchance/connection/ConnectionMongoDB.java	(date 1644589280436)
@@ -92,8 +92,8 @@
 
     public void openConnection() {
 
-        connectToLocal();
-        //connectToVms();
+        //connectToLocal();
+        connectToVms();
         //connectToAtlas();
 
         System.out.println("**************** USER ******************");
@@ -745,14 +745,14 @@
         return array;
     }
 
-    public ArrayList<Insertion> findInsertionDetailsNeo4J(ArrayList<String> followed_ins)  {
+    public ArrayList<Document> findInsertionDetailsNeo4J(ArrayList<String> followed_ins)  {
 
-        Insertion ins;
-        ArrayList<Insertion> insertions = new ArrayList<Insertion>();
+        //Insertion ins;
+        ArrayList<Document> insertions = new ArrayList<>();
 
         for (String followed_in : followed_ins) {
             Document insertion = insertionColl.find(eq("_id", new ObjectId(followed_in))).first();
-
+            /*
             ins = new Insertion();
             ins.setCategory(insertion.getString("category"));
             ins.setPrice(insertion.getDouble("price"));
@@ -760,8 +760,8 @@
             ins.setViews(insertion.getInteger("views"));
             ins.setSeller(insertion.getString("seller"));
             ins.setId(insertion.get("_id").toString());
-
-            insertions.add(ins);
+            */
+            insertions.add(insertion);
         }
         return insertions;
     }
Index: src/main/java/it/unipi/dii/largescale/secondchance/controller/InsertionListController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.it.unipi.dii.largescale.secondchance.controller;\r\n\r\nimport javafx.geometry.HPos;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.layout.*;\r\nimport main.java.it.unipi.dii.largescale.secondchance.connection.ConnectionMongoDB;\r\nimport main.java.it.unipi.dii.largescale.secondchance.connection.ConnectionNeo4jDB;\r\nimport main.java.it.unipi.dii.largescale.secondchance.entity.Insertion;\r\nimport main.java.it.unipi.dii.largescale.secondchance.utils.Session;\r\nimport main.java.it.unipi.dii.largescale.secondchance.utils.Utility;\r\nimport org.bson.Document;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class InsertionListController {\r\n\r\n    public ArrayList<Document> list;\r\n    public BorderPane bp;\r\n    public VBox box;\r\n    public Pane prev, next;\r\n    private final int k = 3;\r\n    private int index;\r\n\r\n    String user;\r\n    String type_img;\r\n\r\n    public void initialize(String username) {\r\n\r\n        type_img = \"user\";\r\n        user = username;\r\n        list = ConnectionMongoDB.connMongo.findInsertionBySeller(username);\r\n        box = new VBox(20);\r\n        index = 0;\r\n\r\n        prev.setDisable(true);\r\n        next.setDisable(true);\r\n        prev.setVisible(false);\r\n        next.setVisible(false);\r\n\r\n        showInsertionList();\r\n    }\r\n\r\n    public void showInsertionList() {\r\n\r\n        box.getChildren().clear();\r\n\r\n        //if there are more than k insertions enable next button\r\n        if (list.size()-index > k) {\r\n            next.setDisable(false);\r\n            next.setVisible(true);\r\n        }\r\n        System.out.println(\"(show) INDEX: \" + index);\r\n\r\n        for (int i = 0; i < k && index < list.size(); i++)\r\n            addInsertions();\r\n\r\n        bp.setCenter(box);\r\n\r\n    }\r\n\r\n    private void addInsertions() {\r\n\r\n        String id = list.get(index).get(\"_id\").toString();\r\n\r\n        HBox hb = new HBox();\r\n        VBox info = new VBox();\r\n\r\n        ImageView image = Utility.getGoodImage(list.get(index).getString(\"image_url\"), 150, type_img);\r\n        Label status = new Label(\"Status: \" + list.get(index).getString(\"status\"));\r\n        Label price = new Label(list.get(index).getDouble(\"price\") + \" \" + \"â‚¬\");\r\n        Label brand = new Label(\"Brand: \" + list.get(index).getString(\"brand\"));\r\n        Button delete = new Button(\"Delete\");\r\n\r\n        info.getChildren().add(status);\r\n        info.getChildren().add(price);\r\n        info.getChildren().add(brand);\r\n        hb.getChildren().add(image);\r\n        hb.getChildren().add(info);\r\n\r\n        if(Session.getLoggedUser().getUsername().equals(user))\r\n            hb.getChildren().add(delete);\r\n\r\n        box.getChildren().add(hb);\r\n\r\n        image.setOnMouseClicked(event->{\r\n                    try {\r\n                        SearchInsertionController.showInsertionPage(id);\r\n                        ConnectionMongoDB.connMongo.updateNumView(id);\r\n                        //HomeController.updateInsertionview(id);\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n        );\r\n\r\n        delete.setOnMouseClicked(event -> {\r\n            if(Utility.confirmDeletion()) {\r\n                Insertion i = ConnectionMongoDB.connMongo.findInsertion(id);\r\n\r\n                if(i == null) {\r\n                    Utility.infoBox(\"Product already purchased\", \"Purchased\", \"Already purchased\");\r\n                    return;\r\n                }\r\n                if(!ConnectionMongoDB.connMongo.deleteInsertionMongo(id))\r\n                {\r\n                    Utility.printTerminal(\"Error deleting insertion MongoDB\");\r\n                    Utility.infoBox(\"Error deleting insertion\", \"Error\", \"Error deleting insertion\");\r\n                    return;\r\n                }\r\n                if(!ConnectionNeo4jDB.connNeo.deleteInsertionNeo4J(id))\r\n                {\r\n                    Utility.printTerminal(\"Error deleting insertion Neo4j\");\r\n                    Utility.infoBox(\"Error deleting insertion\", \"Error\", \"Error deleting insertion\");\r\n                    try {\r\n                        ConnectionMongoDB.connMongo.addInsertion(i);\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    return;\r\n                }\r\n                initialize(Session.getLoggedUser().getUsername());\r\n            }\r\n        });\r\n\r\n        GridPane.setHalignment(image, HPos.LEFT);\r\n        GridPane.setHalignment(status, HPos.LEFT);\r\n        GridPane.setHalignment(price, HPos.LEFT);\r\n        GridPane.setHalignment(brand, HPos.LEFT);\r\n        GridPane.setHalignment(delete, HPos.RIGHT);\r\n\r\n        delete.getStyleClass().add(\"button-delete\");\r\n        info.getStyleClass().add(\"vbox-info\");\r\n        hb.getStyleClass().add(\"hbox-insertion\");\r\n        box.getStyleClass().add(\"vbox-insertion\");\r\n\r\n        index++;\r\n        System.out.println(\"(add) INDEX: \" + index);\r\n\r\n    }\r\n\r\n    public void prevPage() {\r\n        System.out.println(\"(prev) INDEX: \" + index);\r\n\r\n        box.getChildren().clear();\r\n\r\n        if((index%k) == 0)\r\n            index -= 3;\r\n        else\r\n            index -= (index%k);\r\n        index -= 3;\r\n\r\n        System.out.println(\"(prev) INDEX: \" + index);\r\n\r\n        if (index == 0) {\r\n            prev.setDisable(true);\r\n            prev.setVisible(false);\r\n        }\r\n\r\n        showInsertionList();\r\n\r\n    }\r\n\r\n    public void nextPage() {\r\n\r\n        box.getChildren().clear();\r\n\r\n        System.out.println(\"(next) INDEX: \" + index);\r\n\r\n        showInsertionList();\r\n\r\n        if (index == list.size()) {\r\n            next.setDisable(true);\r\n            next.setVisible(false);\r\n        }\r\n\r\n        prev.setVisible(true);\r\n        prev.setDisable(false);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/unipi/dii/largescale/secondchance/controller/InsertionListController.java b/src/main/java/it/unipi/dii/largescale/secondchance/controller/InsertionListController.java
--- a/src/main/java/it/unipi/dii/largescale/secondchance/controller/InsertionListController.java	(revision 190fd7128d92f590f9f2fdee59ddb2931f30cfd5)
+++ b/src/main/java/it/unipi/dii/largescale/secondchance/controller/InsertionListController.java	(date 1644590814647)
@@ -12,6 +12,7 @@
 import main.java.it.unipi.dii.largescale.secondchance.utils.Utility;
 import org.bson.Document;
 
+import javax.print.Doc;
 import java.util.ArrayList;
 
 public class InsertionListController {
@@ -26,14 +27,13 @@
     String user;
     String type_img;
 
-    public void initialize(String username) {
+    public void initialize(ArrayList<Document> insertions, String username) {
 
-        type_img = "user";
+        type_img = "insertion";
         user = username;
-        list = ConnectionMongoDB.connMongo.findInsertionBySeller(username);
         box = new VBox(20);
         index = 0;
-
+        list = insertions;
         prev.setDisable(true);
         next.setDisable(true);
         prev.setVisible(false);
@@ -120,7 +120,8 @@
                     }
                     return;
                 }
-                initialize(Session.getLoggedUser().getUsername());
+                list.remove(Insertion.toDocument(i));
+                initialize(list, Session.getLoggedUser().getUsername());
             }
         });
 
Index: src/main/java/it/unipi/dii/largescale/secondchance/controller/SearchUserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.it.unipi.dii.largescale.secondchance.controller;\r\n\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.geometry.HPos;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.ComboBox;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.layout.*;\r\nimport javafx.stage.Stage;\r\nimport javafx.stage.StageStyle;\r\nimport main.java.it.unipi.dii.largescale.secondchance.connection.ConnectionMongoDB;\r\nimport main.java.it.unipi.dii.largescale.secondchance.connection.ConnectionNeo4jDB;\r\nimport main.java.it.unipi.dii.largescale.secondchance.entity.User;\r\nimport main.java.it.unipi.dii.largescale.secondchance.utils.Session;\r\nimport main.java.it.unipi.dii.largescale.secondchance.utils.Utility;\r\nimport org.bson.Document;\r\n\r\nimport javax.print.Doc;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\n\r\npublic class SearchUserController extends MainController{\r\n\r\n    Button followUnfollow;\r\n\r\n    public Button findUsers;\r\n    public TextField us;\r\n\r\n    // FindUsers panel variables\r\n\r\n    public BorderPane userFind;                 //pane to fill\r\n    public ComboBox<String> country;\r\n    public ComboBox<String> rating;\r\n    public Pane prevSearch, nextSearch;         //find users arrows\r\n    public HBox searchBox;                      //panel to fill and add to the BorderPane\r\n    public ArrayList<Document> searchedList;      //results of searched or filtered users\r\n    public int indexSearch;                     //next element to show\r\n\r\n    // Suggested sellers panel variables\r\n\r\n    public BorderPane userSugg;                 //pane to fill\r\n    public Pane prevSugg, nextSugg;             //suggestions arrows\r\n    public HBox suggBox;                       //panel to fill and add to the BorderPane\r\n    public ArrayList<Document> suggList;            //suggested users to show\r\n    public ArrayList<String> suggFromNeo;       //suggestions taken from Neo4j\r\n    public int indexSugg;                       //next element to show\r\n\r\n    int k = 3;            //how many to show per page\r\n    int m = 15;           //how many to show\r\n\r\n    public void initialize() throws IOException {\r\n\r\n        // Find user panel\r\n\r\n        searchBox = new HBox(20);\r\n        indexSearch = 0;\r\n        searchedList = new ArrayList<>();\r\n\r\n        us.setText(\"\");\r\n        country.setValue(\"country\");\r\n        rating.setValue(\"rating\");\r\n\r\n        prevSearch.setDisable(true);\r\n        nextSearch.setDisable(true);\r\n        prevSearch.setVisible(false);\r\n        nextSearch.setVisible(false);\r\n\r\n        prevSearch.setOnMouseClicked(event ->  { prevResults(true, indexSearch, searchBox, prevSearch, nextSearch, searchedList, userFind);});\r\n        nextSearch.setOnMouseClicked(event ->  { nextResults(true, indexSearch, searchBox, prevSearch, nextSearch, searchedList, userFind);});\r\n\r\n        // Suggested sellers\r\n\r\n        suggBox = new HBox(20);\r\n        indexSugg = 0;\r\n\r\n        suggList = new ArrayList<>();\r\n        suggFromNeo = new ArrayList<>();\r\n        prevSugg.setDisable(true);\r\n        prevSugg.setVisible(false);\r\n        nextSugg.setDisable(true);\r\n        nextSugg.setVisible(false);\r\n\r\n        prevSugg.setOnMouseClicked(event ->  { prevResults(false, indexSugg, suggBox, prevSugg, nextSugg, suggList, userSugg);});\r\n        nextSugg.setOnMouseClicked(event ->  { nextResults(false, indexSugg, suggBox, prevSugg, nextSugg, suggList, userSugg);});\r\n\r\n        //connection to Neo4j\r\n        suggFromNeo = ConnectionNeo4jDB.connNeo.getSuggestedUsers(Session.getLoggedUser().getUsername(), Session.getLoggedUser().getCountry(), k);\r\n\r\n        //if there are less than k suggested, add top k rated to the suggestions\r\n\r\n        if(suggFromNeo.size() < k)\r\n        {\r\n            Utility.printTerminal(\"Not enough suggestions\");\r\n            User user = Session.getLoggedUser();\r\n            ArrayList<Document> temp = ConnectionMongoDB.connMongo.findTopKRatedUser((m-suggFromNeo.size()), user.getCountry());\r\n            for(Document d : temp) {\r\n                suggFromNeo.add(d.getString(\"username\"));\r\n            }\r\n        }\r\n\r\n        //fill suggFromNeo list\r\n        for (String s : suggFromNeo) {\r\n            Document d = ConnectionMongoDB.connMongo.findUserByUsername(s);\r\n            suggList.add(d);\r\n        }\r\n\r\n        Utility.printTerminal(\"SUGG SIZE: \" + suggList.size());\r\n        showResult(false, suggBox, nextSugg, indexSugg, userSugg, suggList);\r\n    }\r\n\r\n    public void findUsers() throws IOException {\r\n\r\n        searchedList.removeAll(searchedList);\r\n        indexSearch = 0;\r\n        prevSearch.setDisable(true);\r\n        nextSearch.setDisable(true);\r\n        prevSearch.setVisible(false);\r\n        nextSearch.setVisible(false);\r\n\r\n        //if the TextField is empty apply filters\r\n        if (us.getText().equals(\"\")) {\r\n\r\n            //no filters applied\r\n            if (country.getValue().equals(\"country\") && rating.getValue().equals(\"rating\")) {\r\n                prevSearch.setDisable(false);\r\n                prevSearch.setVisible(true);\r\n                nextSearch.setDisable(false);\r\n                nextSearch.setVisible(true);\r\n                searchBox.getChildren().clear();\r\n                return;\r\n            }\r\n\r\n            searchedList = ConnectionMongoDB.connMongo.findUserByFilters(country.getValue(), rating.getValue());\r\n\r\n            if (searchedList.isEmpty()) {\r\n                Utility.infoBox(\"There is not a user with this characteristics!\", \"Advise\", \"User Advise\");\r\n                country.setValue(\"country\");\r\n                rating.setValue(\"rating\");\r\n                return;\r\n            }\r\n\r\n            showResult(true, searchBox, nextSearch, indexSearch, userFind, searchedList);\r\n\r\n            userFind.setCenter(searchBox);\r\n            country.setValue(\"country\");\r\n            rating.setValue(\"rating\");\r\n\r\n        } else {        //search case\r\n\r\n            searchedList.add(ConnectionMongoDB.connMongo.findUserByUsername(us.getText()));\r\n\r\n            if (searchedList.isEmpty())\r\n                Utility.infoBox(\"This user does not exists.\", \"Advise\", \"User Advise\");\r\n\r\n            showResult(false, suggBox, nextSugg, indexSugg, userSugg, suggList);\r\n\r\n        }\r\n\r\n        userFind.setCenter(searchBox);\r\n        us.setText(\"\");\r\n\r\n    }\r\n\r\n    private void setFollowUnfollowButton(Button follow, String user) {\r\n\r\n        follow.setStyle(\"-fx-background-color: none; -fx-border-color: black; -fx-border-radius: 5;\");\r\n        follow.setPrefWidth(90.0);\r\n        follow.setPrefHeight(20.0);\r\n        follow.setDisable(false);\r\n        follow.setVisible(true);\r\n        if(ConnectionNeo4jDB.connNeo.checkIfFollows(Session.getLoggedUser().getUsername(), user)) {\r\n            follow.setText(\"Unfollow\");\r\n        } else {\r\n            follow.setText(\"Follow\");\r\n        }\r\n\r\n        follow.setOnMouseClicked(event -> {\r\n            String action = follow.getText();\r\n            ConnectionNeo4jDB.connNeo.followUnfollowButton(action, Session.getLoggedUser().getUsername(), user);\r\n            if(action.equals(\"Follow\"))\r\n                follow.setText(\"Unfollow\");\r\n            if(action.equals(\"Unfollow\"))\r\n                follow.setText(\"Follow\");\r\n        });\r\n\r\n    }\r\n\r\n    public void showResult(boolean choice, HBox hb, Pane next, int index, BorderPane bp, ArrayList<Document> list) {\r\n        hb.getChildren().clear();\r\n\r\n        //if there are more than k insertions enable next button\r\n        if (list.size()-index > k) {\r\n            next.setDisable(false);\r\n            next.setVisible(true);\r\n        }\r\n        System.out.println(\"(show) INDEX: \" + index);\r\n\r\n        for (int i = 0; ((i < k) && (index < m) && (index < list.size())); i++)\r\n            addResult(choice, list, index, hb);\r\n\r\n        bp.setCenter(hb);\r\n    }\r\n\r\n    public void addResult(boolean choice, ArrayList<Document> list, int index, HBox hb) {\r\n\r\n        VBox vb = new VBox(10);\r\n        VBox det = new VBox();\r\n        Label rating;\r\n\r\n        try (FileInputStream imageStream = new FileInputStream(\"target/classes/img/user.png\")) {\r\n            System.out.println(list.get(index).getString(\"username\"));\r\n            Image image = new Image(imageStream);\r\n            ImageView im = new ImageView(image);\r\n            Label username = new Label(list.get(index).getString(\"username\"));\r\n            Label country = new Label(list.get(index).getString(\"country\"));\r\n            Label city = new Label(list.get(index).getString(\"city\"));\r\n            if(list.get(index).getDouble(\"rating\") != null)\r\n                rating = new Label(String.format(\"%.1f\", list.get(index).getDouble(\"rating\")));\r\n            else\r\n                rating = new Label(\"No reviews\");\r\n            followUnfollow = new Button();\r\n            setFollowUnfollowButton(followUnfollow, list.get(index).getString(\"username\"));\r\n\r\n            det.getChildren().add(username);\r\n            det.getChildren().add(country);\r\n            det.getChildren().add(city);\r\n            det.getChildren().add(rating);\r\n            det.setStyle(\"-fx-padding: 10px;\");\r\n\r\n            vb.getChildren().add(im);\r\n            vb.getChildren().add(det);\r\n            vb.getChildren().add(followUnfollow);\r\n            vb.setAlignment(Pos.CENTER);\r\n            vb.setStyle(\"-fx-min-width: 140px; -fx-background-color: white; -fx-padding: 8; -fx-background-radius: 20px;\");\r\n            hb.getChildren().add(vb);\r\n\r\n            GridPane.setHalignment(im, HPos.CENTER);\r\n            GridPane.setHalignment(username, HPos.CENTER);\r\n            GridPane.setHalignment(country, HPos.CENTER);\r\n            GridPane.setHalignment(city, HPos.CENTER);\r\n            GridPane.setHalignment(followUnfollow, HPos.CENTER);\r\n\r\n            vb.setOnMouseClicked(event->{\r\n                        try {\r\n                            System.out.println(\"USERNAME onclick: \" + username.getText());\r\n                            showUserPage(username.getText());\r\n                        } catch (Exception e) {\r\n                            e.printStackTrace();\r\n                        }\r\n                    }\r\n            );\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        hb.setStyle(\r\n                \"-fx-padding: 20;\\n\" +\r\n                        \"    -fx-hgap: 10;\\n\" +\r\n                        \"    -fx-vgap: 10;\");\r\n\r\n        if(choice)  //search\r\n            indexSearch++;\r\n        else        //sugg\r\n            indexSugg++;\r\n        System.out.println(\"(add sugg) INDEX: \" + index);\r\n\r\n    }\r\n\r\n    public void prevResults(boolean choice, int index, HBox hb, Pane prev, Pane next, ArrayList<Document> list, BorderPane bp) {\r\n\r\n        hb.getChildren().clear();\r\n        if(choice)  //search\r\n            indexSearch = Utility.prevPage(index, k, prev);\r\n        else        //sugg\r\n            indexSugg = Utility.prevPage(index, k, prev);\r\n        showResult(choice, hb, next, index, bp, list);\r\n\r\n    }\r\n\r\n    public void nextResults(boolean choice, int index, HBox hb, Pane prev, Pane next, ArrayList<Document> list, BorderPane bp) {\r\n\r\n        hb.getChildren().clear();\r\n        showResult(choice, hb, next, index, bp, list);\r\n        Utility.nextPage(index+k, list, next, prev);\r\n\r\n    }\r\n\r\n    private void showUserPage(String username) {\r\n\r\n        System.out.println(\"USERNAME show: \" + username);\r\n        try {\r\n            FXMLLoader loader = new FXMLLoader();\r\n            loader.setLocation(ProfileController.class.getResource(\"/FXML/Profile.fxml\"));\r\n\r\n            Stage stage = new Stage(StageStyle.DECORATED);\r\n            stage.setScene(new Scene(loader.load()));\r\n            ProfileController controller = loader.getController();\r\n            controller.initialize(username);\r\n            stage.show();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/unipi/dii/largescale/secondchance/controller/SearchUserController.java b/src/main/java/it/unipi/dii/largescale/secondchance/controller/SearchUserController.java
--- a/src/main/java/it/unipi/dii/largescale/secondchance/controller/SearchUserController.java	(revision 190fd7128d92f590f9f2fdee59ddb2931f30cfd5)
+++ b/src/main/java/it/unipi/dii/largescale/secondchance/controller/SearchUserController.java	(date 1644590341807)
@@ -159,7 +159,7 @@
             if (searchedList.isEmpty())
                 Utility.infoBox("This user does not exists.", "Advise", "User Advise");
 
-            showResult(false, suggBox, nextSugg, indexSugg, userSugg, suggList);
+            showResult(true, searchBox, nextSearch, indexSearch, userFind, searchedList);
 
         }
 
@@ -203,16 +203,22 @@
         System.out.println("(show) INDEX: " + index);
 
         for (int i = 0; ((i < k) && (index < m) && (index < list.size())); i++)
-            addResult(choice, list, index, hb);
+            addResult(choice, list, hb);
 
         bp.setCenter(hb);
     }
 
-    public void addResult(boolean choice, ArrayList<Document> list, int index, HBox hb) {
+    public void addResult(boolean choice, ArrayList<Document> list, HBox hb) {
 
         VBox vb = new VBox(10);
         VBox det = new VBox();
         Label rating;
+        int index;
+
+        if(choice)
+            index = indexSearch;
+        else
+            index = indexSugg;
 
         try (FileInputStream imageStream = new FileInputStream("target/classes/img/user.png")) {
             System.out.println(list.get(index).getString("username"));
@@ -256,19 +262,25 @@
                         }
                     }
             );
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-        hb.setStyle(
-                "-fx-padding: 20;\n" +
-                        "    -fx-hgap: 10;\n" +
-                        "    -fx-vgap: 10;");
+
+            hb.setStyle(
+                    "-fx-padding: 20;\n" +
+                            "    -fx-hgap: 10;\n" +
+                            "    -fx-vgap: 10;");
 
-        if(choice)  //search
-            indexSearch++;
-        else        //sugg
-            indexSugg++;
-        System.out.println("(add sugg) INDEX: " + index);
+            if(choice)  //search
+                indexSearch++;
+            else        //sugg
+                indexSugg++;
+
+            System.out.println("(add sugg) INDEX: " + indexSugg);
+            System.out.println("(add search) INDEX: " + indexSearch);
+
+
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+
 
     }
 
Index: src/main/java/it/unipi/dii/largescale/secondchance/controller/NewInsertionController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.it.unipi.dii.largescale.secondchance.controller;\r\n\r\nimport javafx.fxml.*;\r\nimport javafx.scene.control.*;\r\nimport main.java.it.unipi.dii.largescale.secondchance.connection.ConnectionMongoDB;\r\nimport main.java.it.unipi.dii.largescale.secondchance.connection.ConnectionNeo4jDB;\r\nimport main.java.it.unipi.dii.largescale.secondchance.entity.Insertion;\r\nimport main.java.it.unipi.dii.largescale.secondchance.utils.Session;\r\nimport main.java.it.unipi.dii.largescale.secondchance.utils.Utility;\r\nimport org.bson.types.ObjectId;\r\n\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\n\r\npublic class NewInsertionController {\r\n\r\n    @FXML private ComboBox<String> categ;\r\n    @FXML private ToggleGroup myToggleGroup;\r\n    @FXML private TextField price;\r\n    @FXML private ComboBox<String> status;\r\n    @FXML private TextField color;\r\n    @FXML private ComboBox<String> size;\r\n    @FXML private TextField brand;\r\n    @FXML private ComboBox<String> country;\r\n    @FXML private TextArea desc;\r\n    @FXML private TextField link;\r\n\r\n    public void AddNewInsertion() {\r\n        if((categ.getValue().equals(\"-\")) || (status.getValue().equals(\"-\"))\r\n            || (size.getValue().equals(\"-\")) || country.getValue().equals(\"-\")\r\n            || (price.getText().isEmpty()) || link.getText().isEmpty()) {\r\n\r\n            Utility.infoBox(\"You have to fill all the fields\", \"Error\", \"Missing values\");\r\n            return;\r\n        }\r\n\r\n        //check price type\r\n        double p;\r\n        if(!price.getText().matches(\"[0-9]{1,13}(\\\\.[0-9]*)?\")) {\r\n            Utility.infoBox(\"Please insert a correct value for price (e.g. 10.99)\", \"Format error\", \"Price format is not correct\");\r\n            return;\r\n        }\r\n        p = Double.parseDouble(price.getText());\r\n\r\n        //generate id;\r\n        ObjectId id = new ObjectId();\r\n        RadioButton chk = (RadioButton)myToggleGroup.getSelectedToggle(); // Cast object to radio button\r\n        String gender = chk.getText();\r\n\r\n        //generate timestamp\r\n        Date date = new Date();\r\n        String formattedDate = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(date);\r\n\r\n        Insertion i = new Insertion(id.toString(), categ.getValue(), desc.getText(), gender, p, 0, 0, status.getValue(), color.getText(), size.getValue(),\r\n                brand.getText(), country.getValue(), link.getText(), formattedDate, Session.getLoggedUser().getUsername());\r\n        Utility.printTerminal(i.toString());\r\n\r\n        //MongoDB failure\r\n        try {\r\n            ConnectionMongoDB.connMongo.addInsertion(i);\r\n        } catch (Exception e) {\r\n            Utility.infoBox(\"Insertion not published, retry.\", \"Error\", \"Something went wrong on MongoDB\");\r\n            return;\r\n        }\r\n        //Neo4j failure\r\n        if(!ConnectionNeo4jDB.connNeo.addInsertion(i)) {\r\n            Utility.infoBox(\"Insertion not published, retry.\", \"Error\", \"Something went wrong on Neo4j\");\r\n            ConnectionMongoDB.connMongo.deleteInsertionMongo(i.getId());\r\n            return;\r\n        }\r\n        if((!ConnectionNeo4jDB.connNeo.createPostedRelationship(Session.getLoggedUser().getUsername(), i.getId()))){\r\n            Utility.infoBox(\"Insertion not published, retry.\", \"Error\", \"Something went wrong on Neo4j\");\r\n            ConnectionNeo4jDB.connNeo.deleteInsertionNeo4J(i.getId());\r\n            ConnectionMongoDB.connMongo.deleteInsertionMongo(i.getId());\r\n            return;\r\n        }\r\n\r\n        //clear fields\r\n        categ.setValue(\"-\");\r\n        price.setText(\"\");\r\n        status.setValue(\"-\");\r\n        color.setText(\"\");\r\n        size.setValue(\"-\");\r\n        brand.setText(\"\");\r\n        country.setValue(\"-\");\r\n        desc.setText(\"\");\r\n        link.setText(\"\");\r\n\r\n        Utility.infoBox(\"Your insertion has been correctly published!\", \"Success\", \"Correctly published.\");\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/unipi/dii/largescale/secondchance/controller/NewInsertionController.java b/src/main/java/it/unipi/dii/largescale/secondchance/controller/NewInsertionController.java
--- a/src/main/java/it/unipi/dii/largescale/secondchance/controller/NewInsertionController.java	(revision 190fd7128d92f590f9f2fdee59ddb2931f30cfd5)
+++ b/src/main/java/it/unipi/dii/largescale/secondchance/controller/NewInsertionController.java	(date 1644571456774)
@@ -27,6 +27,7 @@
 
     public void AddNewInsertion() {
         if((categ.getValue().equals("-")) || (status.getValue().equals("-"))
+                ||(color.getText().isEmpty()) || (brand.getText().isEmpty())
             || (size.getValue().equals("-")) || country.getValue().equals("-")
             || (price.getText().isEmpty()) || link.getText().isEmpty()) {
 
Index: src/main/resources/FXML/Profile.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<?import javafx.scene.control.Button?>\r\n<?import javafx.scene.control.Label?>\r\n<?import javafx.scene.control.Separator?>\r\n<?import javafx.scene.control.SplitPane?>\r\n<?import javafx.scene.image.Image?>\r\n<?import javafx.scene.image.ImageView?>\r\n<?import javafx.scene.layout.AnchorPane?>\r\n<?import javafx.scene.layout.BorderPane?>\r\n<?import javafx.scene.layout.ColumnConstraints?>\r\n<?import javafx.scene.layout.GridPane?>\r\n<?import javafx.scene.layout.Pane?>\r\n<?import javafx.scene.layout.RowConstraints?>\r\n<?import javafx.scene.text.Font?>\r\n<?import javafx.scene.text.Text?>\r\n\r\n<AnchorPane prefHeight=\"800.0\" prefWidth=\"700.0\" style=\"-fx-background-color: rgb(230, 230, 255);\" xmlns=\"http://javafx.com/javafx/17\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"main.java.it.unipi.dii.largescale.secondchance.controller.ProfileController\">\r\n    <children>\r\n        <SplitPane orientation=\"VERTICAL\" prefHeight=\"800.0\" prefWidth=\"700.0\" style=\"-fx-background-color: rgb(0,0,0);\">\r\n            <items>\r\n                <AnchorPane minHeight=\"0.0\" minWidth=\"0.0\" prefHeight=\"800.0\" prefWidth=\"700.0\" style=\"-fx-background-color: rgb(70,130,180) rgb(70,130,180);\">\r\n                    <children>\r\n                        <Text fx:id=\"titleProfile\" fill=\"WHITE\" layoutX=\"287.0\" layoutY=\"53.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"Your profile\">\r\n                            <font>\r\n                                <Font size=\"24.0\" />\r\n                            </font>\r\n                        </Text>\r\n                        <Button fx:id=\"followersButton\" layoutX=\"400.0\" layoutY=\"158.0\" mnemonicParsing=\"false\" prefHeight=\"25.0\" prefWidth=\"270.0\" style=\"-fx-background-color: rgb(197, 197, 237)rgb(197, 197, 237); -fx-background-radius: 20;\" text=\"Followers\" textFill=\"#65626b\" />\r\n                        <Button fx:id=\"followingButton\" layoutX=\"400.0\" layoutY=\"199.0\" mnemonicParsing=\"false\" prefHeight=\"25.0\" prefWidth=\"270.0\" style=\"-fx-background-color: rgb(197, 197, 237)rgb(197, 197, 237) rgb(197, 197, 237)rgb(197, 197, 237); -fx-background-radius: 30;\" text=\"Following\" textFill=\"#65626b\" />\r\n                        <Button fx:id=\"interestedInsertionsButton\" layoutX=\"400.0\" layoutY=\"238.0\" mnemonicParsing=\"false\" onMouseClicked=\"#showInsertionsLiked\" prefHeight=\"25.0\" prefWidth=\"270.0\" style=\"-fx-background-color: rgb(197, 197, 237)rgb(197, 197, 237) rgb(197, 197, 237)rgb(197, 197, 237); -fx-background-radius: 30;\" text=\"View insertion you are interested in\" textFill=\"#65626b\" />\r\n                        <Button fx:id=\"insertionButton\" layoutX=\"400.0\" layoutY=\"279.0\" mnemonicParsing=\"false\" onMouseClicked=\"#showInsertions\" prefHeight=\"25.0\" prefWidth=\"270.0\" style=\"-fx-background-color: rgb(197, 197, 237)rgb(197, 197, 237) rgb(197, 197, 237)rgb(197, 197, 237); -fx-background-radius: 30;\" text=\"View insertion you published\" textFill=\"#65626b\" />\r\n                        <GridPane fx:id=\"userInfo\" layoutX=\"85.0\" layoutY=\"147.0\" prefHeight=\"180.0\" prefWidth=\"309.0\">\r\n                            <columnConstraints>\r\n                                <ColumnConstraints hgrow=\"SOMETIMES\" maxWidth=\"174.0\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n                                <ColumnConstraints hgrow=\"SOMETIMES\" maxWidth=\"285.0\" minWidth=\"10.0\" prefWidth=\"209.0\" />\r\n                            </columnConstraints>\r\n                            <rowConstraints>\r\n                                <RowConstraints minHeight=\"10.0\" prefHeight=\"30.0\" vgrow=\"SOMETIMES\" />\r\n                                <RowConstraints minHeight=\"10.0\" prefHeight=\"30.0\" vgrow=\"SOMETIMES\" />\r\n                                <RowConstraints minHeight=\"10.0\" prefHeight=\"30.0\" vgrow=\"SOMETIMES\" />\r\n                                <RowConstraints minHeight=\"10.0\" prefHeight=\"30.0\" vgrow=\"SOMETIMES\" />\r\n                                <RowConstraints minHeight=\"10.0\" prefHeight=\"30.0\" vgrow=\"SOMETIMES\" />\r\n                                <RowConstraints minHeight=\"10.0\" prefHeight=\"30.0\" vgrow=\"SOMETIMES\" />\r\n                            </rowConstraints>\r\n                        </GridPane>\r\n                        <Button fx:id=\"btnLogout\" layoutX=\"573.0\" layoutY=\"31.0\" mnemonicParsing=\"false\" onMouseClicked=\"#logout\" style=\"-fx-background-color: rgb(213, 128, 255)rgb(213, 128, 255); -fx-background-radius: 30;\" text=\"Logout\" textFill=\"WHITE\" />\r\n                        <Button fx:id=\"btnAddFunds\" layoutX=\"473.0\" layoutY=\"31.0\" mnemonicParsing=\"false\" onMouseClicked=\"#addFundsShow\" style=\"-fx-background-color: rgb(238, 204, 255)rgb(238, 204, 255); -fx-background-radius: 30;\" text=\"Add Funds\" textFill=\"WHITE\" />\r\n                        <Text fill=\"WHITE\" layoutX=\"320.0\" layoutY=\"423.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"Reviews\">\r\n                            <font>\r\n                                <Font size=\"24.0\" />\r\n                            </font>\r\n                        </Text>\r\n                        <Separator layoutX=\"261.0\" layoutY=\"394.0\" prefWidth=\"200.0\" />\r\n                        <Pane layoutX=\"446.0\" layoutY=\"65.0\" prefHeight=\"44.0\" prefWidth=\"200.0\">\r\n                            <children>\r\n                                <Text fx:id=\"balanceValue\" layoutX=\"70.0\" layoutY=\"29.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"\" wrappingWidth=\"100.0\">\r\n                                    <font>\r\n                                        <Font name=\"System Bold\" size=\"12.0\" />\r\n                                    </font></Text>\r\n                                <Label fx:id=\"balanceText\" layoutX=\"0.0\" layoutY=\"14.0\" text=\"Balance: \" textFill=\"WHITE\">\r\n                                    <font>\r\n                                        <Font size=\"15.0\" />\r\n                                    </font>\r\n                                </Label>\r\n                                <Button fx:id=\"refreshBtn\" layoutX=\"170.0\" layoutY=\"10.0\" mnemonicParsing=\"false\" onMouseClicked=\"#updateUserBalance\" style=\"-fx-background-color: rgb(220,220,220); -fx-background-radius: 30;\">\r\n                                    <graphic>\r\n                                        <ImageView fitHeight=\"16.0\" fitWidth=\"16.0\">\r\n                                            <image>\r\n                                                <Image url=\"@../img/refresh.png\" />\r\n                                            </image>\r\n                                        </ImageView>\r\n                                    </graphic>\r\n                                </Button>\r\n                            </children>\r\n                        </Pane>\r\n                        <BorderPane fx:id=\"review\" layoutX=\"10.0\" layoutY=\"470.0\" prefHeight=\"200.0\" prefWidth=\"680.0\">\r\n                            <left>\r\n                                <Pane fx:id=\"prevReviews\" onMouseClicked=\"#prevReviews\" prefHeight=\"215.0\" prefWidth=\"50.0\" BorderPane.alignment=\"CENTER\">\r\n                                    <children>\r\n                                        <ImageView fitHeight=\"50.0\" fitWidth=\"50.0\" layoutX=\"-1.0\" layoutY=\"74.0\">\r\n                                            <image>\r\n                                                <Image url=\"@../img/prev.png\" />\r\n                                            </image>\r\n                                        </ImageView>\r\n                                    </children>\r\n                                </Pane>\r\n                            </left>\r\n                            <right>\r\n                                <Pane fx:id=\"nextReviews\" onMouseClicked=\"#nextReviews\" prefHeight=\"200.0\" prefWidth=\"50.0\" BorderPane.alignment=\"CENTER\">\r\n                                    <children>\r\n                                        <ImageView fitHeight=\"50.0\" fitWidth=\"50.0\" layoutX=\"-1.0\" layoutY=\"74.0\">\r\n                                            <image>\r\n                                                <Image url=\"@../img/next.png\" />\r\n                                            </image>\r\n                                        </ImageView>\r\n                                    </children>\r\n                                </Pane>\r\n                            </right>\r\n                        </BorderPane>\r\n                        <Pane fx:id=\"profileImage\" layoutX=\"79.0\" layoutY=\"23.0\" prefHeight=\"113.0\" prefWidth=\"161.0\" style=\"-fx-border-radius: 50; -fx-background-radius: 80;\" />\r\n                    </children>\r\n                </AnchorPane>\r\n            </items>\r\n        </SplitPane>\r\n    </children>\r\n</AnchorPane>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/FXML/Profile.fxml b/src/main/resources/FXML/Profile.fxml
--- a/src/main/resources/FXML/Profile.fxml	(revision 190fd7128d92f590f9f2fdee59ddb2931f30cfd5)
+++ b/src/main/resources/FXML/Profile.fxml	(date 1644581394708)
@@ -19,7 +19,7 @@
     <children>
         <SplitPane orientation="VERTICAL" prefHeight="800.0" prefWidth="700.0" style="-fx-background-color: rgb(0,0,0);">
             <items>
-                <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="800.0" prefWidth="700.0" style="-fx-background-color: rgb(70,130,180) rgb(70,130,180);">
+                <AnchorPane fx:id="anchorPane" minHeight="0.0" minWidth="0.0" prefHeight="800.0" prefWidth="700.0" style="-fx-background-color: rgb(70,130,180) rgb(70,130,180);">
                     <children>
                         <Text fx:id="titleProfile" fill="WHITE" layoutX="287.0" layoutY="53.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Your profile">
                             <font>
@@ -28,8 +28,8 @@
                         </Text>
                         <Button fx:id="followersButton" layoutX="400.0" layoutY="158.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="270.0" style="-fx-background-color: rgb(197, 197, 237)rgb(197, 197, 237); -fx-background-radius: 20;" text="Followers" textFill="#65626b" />
                         <Button fx:id="followingButton" layoutX="400.0" layoutY="199.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="270.0" style="-fx-background-color: rgb(197, 197, 237)rgb(197, 197, 237) rgb(197, 197, 237)rgb(197, 197, 237); -fx-background-radius: 30;" text="Following" textFill="#65626b" />
-                        <Button fx:id="interestedInsertionsButton" layoutX="400.0" layoutY="238.0" mnemonicParsing="false" onMouseClicked="#showInsertionsLiked" prefHeight="25.0" prefWidth="270.0" style="-fx-background-color: rgb(197, 197, 237)rgb(197, 197, 237) rgb(197, 197, 237)rgb(197, 197, 237); -fx-background-radius: 30;" text="View insertion you are interested in" textFill="#65626b" />
-                        <Button fx:id="insertionButton" layoutX="400.0" layoutY="279.0" mnemonicParsing="false" onMouseClicked="#showInsertions" prefHeight="25.0" prefWidth="270.0" style="-fx-background-color: rgb(197, 197, 237)rgb(197, 197, 237) rgb(197, 197, 237)rgb(197, 197, 237); -fx-background-radius: 30;" text="View insertion you published" textFill="#65626b" />
+                        <Button fx:id="interestedInsertionsButton" layoutX="400.0" layoutY="238.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="270.0" style="-fx-background-color: rgb(197, 197, 237)rgb(197, 197, 237) rgb(197, 197, 237)rgb(197, 197, 237); -fx-background-radius: 30;" text="View insertion you are interested in" textFill="#65626b" />
+                        <Button fx:id="insertionButton" layoutX="400.0" layoutY="279.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="270.0" style="-fx-background-color: rgb(197, 197, 237)rgb(197, 197, 237) rgb(197, 197, 237)rgb(197, 197, 237); -fx-background-radius: 30;" text="View insertion you published" textFill="#65626b" />
                         <GridPane fx:id="userInfo" layoutX="85.0" layoutY="147.0" prefHeight="180.0" prefWidth="309.0">
                             <columnConstraints>
                                 <ColumnConstraints hgrow="SOMETIMES" maxWidth="174.0" minWidth="10.0" prefWidth="100.0" />
Index: src/main/java/it/unipi/dii/largescale/secondchance/controller/InsertionListLikedController.java
===================================================================
diff --git a/src/main/java/it/unipi/dii/largescale/secondchance/controller/InsertionListLikedController.java b/src/main/java/it/unipi/dii/largescale/secondchance/controller/InsertionListLikedController.java
deleted file mode 100644
--- a/src/main/java/it/unipi/dii/largescale/secondchance/controller/InsertionListLikedController.java	(revision 190fd7128d92f590f9f2fdee59ddb2931f30cfd5)
+++ /dev/null	(revision 190fd7128d92f590f9f2fdee59ddb2931f30cfd5)
@@ -1,144 +0,0 @@
-package main.java.it.unipi.dii.largescale.secondchance.controller;
-
-import javafx.geometry.HPos;
-import javafx.scene.control.Label;
-import javafx.scene.image.ImageView;
-import javafx.scene.layout.*;
-import main.java.it.unipi.dii.largescale.secondchance.connection.ConnectionMongoDB;
-import main.java.it.unipi.dii.largescale.secondchance.connection.ConnectionNeo4jDB;
-import main.java.it.unipi.dii.largescale.secondchance.entity.Insertion;
-import main.java.it.unipi.dii.largescale.secondchance.utils.Utility;
-
-import java.util.ArrayList;
-
-public class InsertionListLikedController {
-
-    private ArrayList<Insertion> insertions;
-    public BorderPane bp;
-    public VBox box;
-    public Pane prev, next;
-    private final int k = 3;
-    private int index;
-    String type_img;
-
-    public void initialize(String username) {
-
-        type_img = "insertion";
-        ArrayList<String> followed_ins = ConnectionNeo4jDB.connNeo.retrieveFollowedInsertionByUser(username);
-        insertions = ConnectionMongoDB.connMongo.findInsertionDetailsNeo4J(followed_ins);
-        //System.out.println("Insertions: " + insertions.get(0));
-
-        box = new VBox(20);
-        index = 0;
-
-        prev.setDisable(true);
-        next.setDisable(true);
-        prev.setVisible(false);
-        next.setVisible(false);
-
-        showInsertionList();
-    }
-
-    public void showInsertionList() {
-
-        box.getChildren().clear();
-
-        //if there are more than k insertions enable next button
-        if (insertions.size() - index > k) {
-            next.setDisable(false);
-            next.setVisible(true);
-        }
-        System.out.println("(show) INDEX: " + index);
-
-        for (int i = 0; i < k && index < insertions.size(); i++) {
-            addInsertions();
-        }
-        bp.setCenter(box);
-
-    }
-
-    private void addInsertions() {
-
-        String uniq_id = insertions.get(index).getId();
-
-        HBox hb = new HBox();
-        VBox info = new VBox();
-
-        ImageView image = Utility.getGoodImage(insertions.get(index).getImage_url(), 150, type_img);
-        Label category = new Label("Category: " + insertions.get(index).getCategory());
-        Label price = new Label(insertions.get(index).getPrice() + "â‚¬");
-        Label views = new Label("Views: " + insertions.get(index).getViews());
-
-        info.getChildren().add(category);
-        info.getChildren().add(price);
-        info.getChildren().add(views);
-        hb.getChildren().add(image);
-        hb.getChildren().add(info);
-        box.getChildren().add(hb);
-
-        image.setOnMouseClicked(event->{
-                    try {
-                        System.out.println(uniq_id);
-                        SearchInsertionController.showInsertionPage(uniq_id);
-                        ConnectionMongoDB.connMongo.updateNumView(uniq_id);
-                        //HomeController.updateInsertionview(uniq_id);
-                    } catch (Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-        );
-
-
-        GridPane.setHalignment(image, HPos.LEFT);
-        GridPane.setHalignment(category, HPos.LEFT);
-        GridPane.setHalignment(price, HPos.LEFT);
-        GridPane.setHalignment(views, HPos.LEFT);
-
-        info.getStyleClass().add("vbox-info");
-        hb.getStyleClass().add("hbox-insertion");
-        box.getStyleClass().add("vbox-insertion");
-
-
-        index++;
-        System.out.println("(add) INDEX: " + index);
-    }
-
-    public void prevPage() {
-        System.out.println("(prev) INDEX: " + index);
-
-        box.getChildren().clear();
-
-        if((index%k) == 0)
-            index -= k;
-        else
-            index -= (index%k);
-        index -= k;
-
-        System.out.println("(prev) INDEX: " + index);
-
-        if (index == 0) {
-            prev.setDisable(true);
-            prev.setVisible(false);
-        }
-
-        showInsertionList();
-
-    }
-
-    public void nextPage() {
-
-        box.getChildren().clear();
-
-        System.out.println("(next) INDEX: " + index);
-
-        showInsertionList();
-
-        if (index == insertions.size()) {
-            next.setDisable(true);
-            next.setVisible(false);
-        }
-
-        prev.setVisible(true);
-        prev.setDisable(false);
-    }
-}
Index: target/classes/FXML/Profile.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<?import javafx.scene.control.Button?>\r\n<?import javafx.scene.control.Label?>\r\n<?import javafx.scene.control.Separator?>\r\n<?import javafx.scene.control.SplitPane?>\r\n<?import javafx.scene.image.Image?>\r\n<?import javafx.scene.image.ImageView?>\r\n<?import javafx.scene.layout.AnchorPane?>\r\n<?import javafx.scene.layout.BorderPane?>\r\n<?import javafx.scene.layout.ColumnConstraints?>\r\n<?import javafx.scene.layout.GridPane?>\r\n<?import javafx.scene.layout.Pane?>\r\n<?import javafx.scene.layout.RowConstraints?>\r\n<?import javafx.scene.text.Font?>\r\n<?import javafx.scene.text.Text?>\r\n\r\n<AnchorPane prefHeight=\"800.0\" prefWidth=\"700.0\" style=\"-fx-background-color: rgb(230, 230, 255);\" xmlns=\"http://javafx.com/javafx/17\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"main.java.it.unipi.dii.largescale.secondchance.controller.ProfileController\">\r\n    <children>\r\n        <SplitPane orientation=\"VERTICAL\" prefHeight=\"800.0\" prefWidth=\"700.0\" style=\"-fx-background-color: rgb(0,0,0);\">\r\n            <items>\r\n                <AnchorPane minHeight=\"0.0\" minWidth=\"0.0\" prefHeight=\"800.0\" prefWidth=\"700.0\" style=\"-fx-background-color: rgb(70,130,180) rgb(70,130,180);\">\r\n                    <children>\r\n                        <Text fx:id=\"titleProfile\" fill=\"WHITE\" layoutX=\"287.0\" layoutY=\"53.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"Your profile\">\r\n                            <font>\r\n                                <Font size=\"24.0\" />\r\n                            </font>\r\n                        </Text>\r\n                        <Button fx:id=\"followersButton\" layoutX=\"400.0\" layoutY=\"158.0\" mnemonicParsing=\"false\" prefHeight=\"25.0\" prefWidth=\"270.0\" style=\"-fx-background-color: rgb(197, 197, 237)rgb(197, 197, 237); -fx-background-radius: 20;\" text=\"Followers\" textFill=\"#65626b\" />\r\n                        <Button fx:id=\"followingButton\" layoutX=\"400.0\" layoutY=\"199.0\" mnemonicParsing=\"false\" prefHeight=\"25.0\" prefWidth=\"270.0\" style=\"-fx-background-color: rgb(197, 197, 237)rgb(197, 197, 237) rgb(197, 197, 237)rgb(197, 197, 237); -fx-background-radius: 30;\" text=\"Following\" textFill=\"#65626b\" />\r\n                        <Button fx:id=\"interestedInsertionsButton\" layoutX=\"400.0\" layoutY=\"238.0\" mnemonicParsing=\"false\" onMouseClicked=\"#showInsertionsLiked\" prefHeight=\"25.0\" prefWidth=\"270.0\" style=\"-fx-background-color: rgb(197, 197, 237)rgb(197, 197, 237) rgb(197, 197, 237)rgb(197, 197, 237); -fx-background-radius: 30;\" text=\"View insertion you are interested in\" textFill=\"#65626b\" />\r\n                        <Button fx:id=\"insertionButton\" layoutX=\"400.0\" layoutY=\"279.0\" mnemonicParsing=\"false\" onMouseClicked=\"#showInsertions\" prefHeight=\"25.0\" prefWidth=\"270.0\" style=\"-fx-background-color: rgb(197, 197, 237)rgb(197, 197, 237) rgb(197, 197, 237)rgb(197, 197, 237); -fx-background-radius: 30;\" text=\"View insertion you published\" textFill=\"#65626b\" />\r\n                        <GridPane fx:id=\"userInfo\" layoutX=\"85.0\" layoutY=\"147.0\" prefHeight=\"180.0\" prefWidth=\"309.0\">\r\n                            <columnConstraints>\r\n                                <ColumnConstraints hgrow=\"SOMETIMES\" maxWidth=\"174.0\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n                                <ColumnConstraints hgrow=\"SOMETIMES\" maxWidth=\"285.0\" minWidth=\"10.0\" prefWidth=\"209.0\" />\r\n                            </columnConstraints>\r\n                            <rowConstraints>\r\n                                <RowConstraints minHeight=\"10.0\" prefHeight=\"30.0\" vgrow=\"SOMETIMES\" />\r\n                                <RowConstraints minHeight=\"10.0\" prefHeight=\"30.0\" vgrow=\"SOMETIMES\" />\r\n                                <RowConstraints minHeight=\"10.0\" prefHeight=\"30.0\" vgrow=\"SOMETIMES\" />\r\n                                <RowConstraints minHeight=\"10.0\" prefHeight=\"30.0\" vgrow=\"SOMETIMES\" />\r\n                                <RowConstraints minHeight=\"10.0\" prefHeight=\"30.0\" vgrow=\"SOMETIMES\" />\r\n                                <RowConstraints minHeight=\"10.0\" prefHeight=\"30.0\" vgrow=\"SOMETIMES\" />\r\n                            </rowConstraints>\r\n                        </GridPane>\r\n                        <Button fx:id=\"btnLogout\" layoutX=\"573.0\" layoutY=\"31.0\" mnemonicParsing=\"false\" onMouseClicked=\"#logout\" style=\"-fx-background-color: rgb(213, 128, 255)rgb(213, 128, 255); -fx-background-radius: 30;\" text=\"Logout\" textFill=\"WHITE\" />\r\n                        <Button fx:id=\"btnAddFunds\" layoutX=\"473.0\" layoutY=\"31.0\" mnemonicParsing=\"false\" onMouseClicked=\"#addFundsShow\" style=\"-fx-background-color: rgb(238, 204, 255)rgb(238, 204, 255); -fx-background-radius: 30;\" text=\"Add Funds\" textFill=\"WHITE\" />\r\n                        <Text fill=\"WHITE\" layoutX=\"320.0\" layoutY=\"423.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"Reviews\">\r\n                            <font>\r\n                                <Font size=\"24.0\" />\r\n                            </font>\r\n                        </Text>\r\n                        <Separator layoutX=\"261.0\" layoutY=\"394.0\" prefWidth=\"200.0\" />\r\n                        <Pane layoutX=\"446.0\" layoutY=\"65.0\" prefHeight=\"44.0\" prefWidth=\"200.0\">\r\n                            <children>\r\n                                <Text fx:id=\"balanceValue\" layoutX=\"70.0\" layoutY=\"29.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"\" wrappingWidth=\"100.0\">\r\n                                    <font>\r\n                                        <Font name=\"System Bold\" size=\"12.0\" />\r\n                                    </font></Text>\r\n                                <Label fx:id=\"balanceText\" layoutX=\"0.0\" layoutY=\"14.0\" text=\"Balance: \" textFill=\"WHITE\">\r\n                                    <font>\r\n                                        <Font size=\"15.0\" />\r\n                                    </font>\r\n                                </Label>\r\n                                <Button fx:id=\"refreshBtn\" layoutX=\"170.0\" layoutY=\"10.0\" mnemonicParsing=\"false\" onMouseClicked=\"#updateUserBalance\" style=\"-fx-background-color: rgb(220,220,220); -fx-background-radius: 30;\">\r\n                                    <graphic>\r\n                                        <ImageView fitHeight=\"16.0\" fitWidth=\"16.0\">\r\n                                            <image>\r\n                                                <Image url=\"@../img/refresh.png\" />\r\n                                            </image>\r\n                                        </ImageView>\r\n                                    </graphic>\r\n                                </Button>\r\n                            </children>\r\n                        </Pane>\r\n                        <BorderPane fx:id=\"review\" layoutX=\"10.0\" layoutY=\"470.0\" prefHeight=\"200.0\" prefWidth=\"680.0\">\r\n                            <left>\r\n                                <Pane fx:id=\"prevReviews\" onMouseClicked=\"#prevReviews\" prefHeight=\"215.0\" prefWidth=\"50.0\" BorderPane.alignment=\"CENTER\">\r\n                                    <children>\r\n                                        <ImageView fitHeight=\"50.0\" fitWidth=\"50.0\" layoutX=\"-1.0\" layoutY=\"74.0\">\r\n                                            <image>\r\n                                                <Image url=\"@../img/prev.png\" />\r\n                                            </image>\r\n                                        </ImageView>\r\n                                    </children>\r\n                                </Pane>\r\n                            </left>\r\n                            <right>\r\n                                <Pane fx:id=\"nextReviews\" onMouseClicked=\"#nextReviews\" prefHeight=\"200.0\" prefWidth=\"50.0\" BorderPane.alignment=\"CENTER\">\r\n                                    <children>\r\n                                        <ImageView fitHeight=\"50.0\" fitWidth=\"50.0\" layoutX=\"-1.0\" layoutY=\"74.0\">\r\n                                            <image>\r\n                                                <Image url=\"@../img/next.png\" />\r\n                                            </image>\r\n                                        </ImageView>\r\n                                    </children>\r\n                                </Pane>\r\n                            </right>\r\n                        </BorderPane>\r\n                        <Pane fx:id=\"profileImage\" layoutX=\"79.0\" layoutY=\"23.0\" prefHeight=\"113.0\" prefWidth=\"161.0\" style=\"-fx-border-radius: 50; -fx-background-radius: 80;\" />\r\n                    </children>\r\n                </AnchorPane>\r\n            </items>\r\n        </SplitPane>\r\n    </children>\r\n</AnchorPane>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/classes/FXML/Profile.fxml b/target/classes/FXML/Profile.fxml
--- a/target/classes/FXML/Profile.fxml	(revision 190fd7128d92f590f9f2fdee59ddb2931f30cfd5)
+++ b/target/classes/FXML/Profile.fxml	(date 1644581394708)
@@ -19,7 +19,7 @@
     <children>
         <SplitPane orientation="VERTICAL" prefHeight="800.0" prefWidth="700.0" style="-fx-background-color: rgb(0,0,0);">
             <items>
-                <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="800.0" prefWidth="700.0" style="-fx-background-color: rgb(70,130,180) rgb(70,130,180);">
+                <AnchorPane fx:id="anchorPane" minHeight="0.0" minWidth="0.0" prefHeight="800.0" prefWidth="700.0" style="-fx-background-color: rgb(70,130,180) rgb(70,130,180);">
                     <children>
                         <Text fx:id="titleProfile" fill="WHITE" layoutX="287.0" layoutY="53.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Your profile">
                             <font>
@@ -28,8 +28,8 @@
                         </Text>
                         <Button fx:id="followersButton" layoutX="400.0" layoutY="158.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="270.0" style="-fx-background-color: rgb(197, 197, 237)rgb(197, 197, 237); -fx-background-radius: 20;" text="Followers" textFill="#65626b" />
                         <Button fx:id="followingButton" layoutX="400.0" layoutY="199.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="270.0" style="-fx-background-color: rgb(197, 197, 237)rgb(197, 197, 237) rgb(197, 197, 237)rgb(197, 197, 237); -fx-background-radius: 30;" text="Following" textFill="#65626b" />
-                        <Button fx:id="interestedInsertionsButton" layoutX="400.0" layoutY="238.0" mnemonicParsing="false" onMouseClicked="#showInsertionsLiked" prefHeight="25.0" prefWidth="270.0" style="-fx-background-color: rgb(197, 197, 237)rgb(197, 197, 237) rgb(197, 197, 237)rgb(197, 197, 237); -fx-background-radius: 30;" text="View insertion you are interested in" textFill="#65626b" />
-                        <Button fx:id="insertionButton" layoutX="400.0" layoutY="279.0" mnemonicParsing="false" onMouseClicked="#showInsertions" prefHeight="25.0" prefWidth="270.0" style="-fx-background-color: rgb(197, 197, 237)rgb(197, 197, 237) rgb(197, 197, 237)rgb(197, 197, 237); -fx-background-radius: 30;" text="View insertion you published" textFill="#65626b" />
+                        <Button fx:id="interestedInsertionsButton" layoutX="400.0" layoutY="238.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="270.0" style="-fx-background-color: rgb(197, 197, 237)rgb(197, 197, 237) rgb(197, 197, 237)rgb(197, 197, 237); -fx-background-radius: 30;" text="View insertion you are interested in" textFill="#65626b" />
+                        <Button fx:id="insertionButton" layoutX="400.0" layoutY="279.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="270.0" style="-fx-background-color: rgb(197, 197, 237)rgb(197, 197, 237) rgb(197, 197, 237)rgb(197, 197, 237); -fx-background-radius: 30;" text="View insertion you published" textFill="#65626b" />
                         <GridPane fx:id="userInfo" layoutX="85.0" layoutY="147.0" prefHeight="180.0" prefWidth="309.0">
                             <columnConstraints>
                                 <ColumnConstraints hgrow="SOMETIMES" maxWidth="174.0" minWidth="10.0" prefWidth="100.0" />
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"78096fe8-9952-45af-bf90-4f98cdf0dd02\" name=\"Changes\" comment=\"add new functions admin page\">\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/resources/CSS/InsertionAdminSearchStyle.css\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/inspectionProfiles/Project_Default.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/inspectionProfiles/Project_Default.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/AddFundsController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/AddFundsController.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/AddProfileImageController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/AddProfileImageController.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/FollowController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/FollowController.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/HomeController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/HomeController.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/InsertionAdminSearchController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/InsertionAdminSearchController.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/SearchPostController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/SearchPostController.java\" afterDir=\"false\" />\r\n    </list>\r\n    <list id=\"03123c90-a928-4e0a-bf69-e1d59086bd15\" name=\"Changes by adelmobrunelli\" comment=\"Changes by adelmobrunelli\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n        <option value=\"CSS File\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"24cGP07hMuydzouSsyqELUKrZS4\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"codeWithMe.voiceChat.enabledByDefault\" value=\"false\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/target/classes/FXML\" />\r\n    <property name=\"list.type.of.created.stylesheet\" value=\"CSS\" />\r\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\r\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\r\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\r\n    <property name=\"project.structure.last.edited\" value=\"Project\" />\r\n    <property name=\"project.structure.proportion\" value=\"0.0\" />\r\n    <property name=\"project.structure.side.proportion\" value=\"0.0\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\matre\\Desktop\\Large-Scale-Project\\target\\classes\\FXML\" />\r\n      <recent name=\"C:\\Users\\matre\\Desktop\\Large-Scale-Project\\target\\classes\" />\r\n      <recent name=\"C:\\Users\\matre\\Desktop\\Large-Scale-Project\\target\\classes\\img\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"SecondChanceGUI\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"main.java.it.unipi.dii.largescale.secondchance.SecondChanceGUI\" />\r\n      <module name=\"Large-Scale-Project\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"main.java.it.unipi.dii.largescale.secondchance.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.SecondChanceGUI\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"78096fe8-9952-45af-bf90-4f98cdf0dd02\" name=\"Changes\" comment=\"\" />\r\n      <created>1643922440258</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1643922440258</updated>\r\n      <workItem from=\"1643922443095\" duration=\"3073000\" />\r\n      <workItem from=\"1643983831619\" duration=\"15905000\" />\r\n      <workItem from=\"1644075264558\" duration=\"7403000\" />\r\n      <workItem from=\"1644146357420\" duration=\"406000\" />\r\n      <workItem from=\"1644147960802\" duration=\"711000\" />\r\n      <workItem from=\"1644152757678\" duration=\"123000\" />\r\n      <workItem from=\"1644162541952\" duration=\"6928000\" />\r\n      <workItem from=\"1644170803249\" duration=\"461000\" />\r\n      <workItem from=\"1644310037703\" duration=\"6467000\" />\r\n      <workItem from=\"1644347340303\" duration=\"8090000\" />\r\n      <workItem from=\"1644395849334\" duration=\"7625000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Fix admin function, fix other problems\">\r\n      <created>1643993961652</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1643993961652</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Changes by adelmobrunelli\">\r\n      <created>1643993973632</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1643993973632</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Fix img_profile, fix followers and following show from profile page, fix registration user\">\r\n      <created>1644003160796</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1644003160796</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Fix do orders and update and put review, error message on clicking insertion after purchase, fix sign up\">\r\n      <created>1644082904622</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1644082904623</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"upadte commit\">\r\n      <created>1644152843260</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1644152843260</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"fix most active user into admin, fix searchinsertion arrows\">\r\n      <created>1644170714400</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1644170714400</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"New insertion with ObjectId\">\r\n      <created>1644228305719</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1644228305719</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Changes regarding new collection balance.\">\r\n      <created>1644255846996</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1644255846996</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"SearchInsertionController arrows fixed.\">\r\n      <created>1644272830774</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1644272830774</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"add new functions admin page\">\r\n      <created>1644334461819</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1644334461819</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"11\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"fix\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Fix admin function, fix other problems\" />\r\n    <MESSAGE value=\"Changes by adelmobrunelli\" />\r\n    <MESSAGE value=\"Fix img_profile, fix followers and following show from profile page, fix registration user\" />\r\n    <MESSAGE value=\"Fix do orders and update and put review, error message on clicking insertion after purchase, fix sign up\" />\r\n    <MESSAGE value=\"upadte commit\" />\r\n    <MESSAGE value=\"fix most active user into admin, fix searchinsertion arrows\" />\r\n    <MESSAGE value=\"Merged the two files FollowersController.java and FollowingController.java. &#10;&#10;Merged the two files FollowersPage.fxml and FollowingPage.fxml.\" />\r\n    <MESSAGE value=\"add new functions admin page\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"add new functions admin page\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/connection/ConnectionMongoDB.java</url>\r\n          <line>182</line>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 190fd7128d92f590f9f2fdee59ddb2931f30cfd5)
+++ b/.idea/workspace.xml	(date 1644591049537)
@@ -5,17 +5,22 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="78096fe8-9952-45af-bf90-4f98cdf0dd02" name="Changes" comment="add new functions admin page">
-      <change afterPath="$PROJECT_DIR$/src/main/resources/CSS/InsertionAdminSearchStyle.css" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/inspectionProfiles/Project_Default.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/inspectionProfiles/Project_Default.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/AddFundsController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/AddFundsController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/AddProfileImageController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/AddProfileImageController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/FollowController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/FollowController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/HomeController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/HomeController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/InsertionAdminSearchController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/InsertionAdminSearchController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/SearchPostController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/SearchPostController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/addReviews.java" beforeDir="false" afterPath="$PROJECT_DIR$/addReviews.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/connection/ConnectionMongoDB.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/connection/ConnectionMongoDB.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/connection/ConnectionNeo4jDB.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/connection/ConnectionNeo4jDB.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/InsertionListController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/InsertionListController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/InsertionListLikedController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/InsertionListLikedController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/NewInsertionController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/NewInsertionController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/ProfileController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/ProfileController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/SearchUserController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/SearchUserController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/resources/FXML/Profile.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/FXML/Profile.fxml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/FXML/Profile.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/FXML/Profile.fxml" afterDir="false" />
     </list>
     <list id="03123c90-a928-4e0a-bf69-e1d59086bd15" name="Changes by adelmobrunelli" comment="Changes by adelmobrunelli" />
+    <list id="6bb4f2c0-83c9-4d43-b728-c7f57c05ff7b" name="Changes by marti" comment="">
+      <change beforePath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/MyOrderController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/MyOrderController.java" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -222,7 +227,7 @@
       <breakpoints>
         <line-breakpoint enabled="true" type="java-line">
           <url>file://$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/connection/ConnectionMongoDB.java</url>
-          <line>182</line>
+          <line>181</line>
           <option name="timeStamp" value="1" />
         </line-breakpoint>
       </breakpoints>
Index: addReviews.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import com.mongodb.BasicDBObject;\r\nimport com.mongodb.ConnectionString;\r\nimport com.mongodb.client.*;\r\nimport org.bson.Document;\r\nimport java.text.*;\r\nimport java.util.*;\r\n\r\npublic class Main {\r\n\r\n\r\n    public static void modifyRatingWithReviews(MongoDatabase database){\r\n\r\n        MongoCollection<Document> user = database.getCollection(\"user\");\r\n\r\n        //build users list\r\n        ArrayList<Document> users = new ArrayList<>();\r\n        MongoCursor<Document> cursor;\r\n        cursor = user.find().iterator();\r\n        while(cursor.hasNext())\r\n            users.add(cursor.next());\r\n\r\n        int i = 0;\r\n        for (Document d : users) {      //for every user\r\n\r\n    System.out.println(\"USERNAME: \" + d.getString(\"username\"));\r\n            //list takes all the embedded reviews\r\n            List<Document> list = null;\r\n            list = d.getList(\"reviews\", Document.class);\r\n\r\n    System.out.println(\"LIST: \" + list);\r\n\r\n            if(list == null)    //if no reviews go to next user\r\n                continue;\r\n\r\n    System.out.println(\"SIZE: \" + list.size());\r\n\r\n            //calculate avg rating of this user\r\n            Double avg = 0.0;\r\n            int sum = 0;\r\n\r\n            for(int j=0; j < list.size(); j++) {\r\n                sum += list.get(j).getInteger(\"rating\");\r\n                System.out.println(\"SUM: \" + sum);\r\n            }\r\n\r\n            avg = Double.valueOf(sum)/Double.valueOf(list.size());\r\n    System.out.println(\"AVG: \" + avg);\r\n\r\n                            // change to do\r\n            // {\"rating\" = avg}\r\n            BasicDBObject newDocument = new BasicDBObject();\r\n            newDocument.put(\"rating\", avg);\r\n            // {$set: {\"rating\": avg}}\r\n            BasicDBObject updateObject = new BasicDBObject();\r\n            updateObject.put(\"$set\", newDocument);\r\n\r\n            BasicDBObject query = new BasicDBObject();\r\n            query.put(\"username\", d.getString(\"username\"));\r\n\r\n            user.updateOne(query, updateObject);\r\n\r\n            i++;\r\n\r\n    System.out.println(\"**************************\");\r\n\r\n        }\r\n\r\n    }\r\n\r\n    public static void embedReviewIntoUser(MongoDatabase database){\r\n\r\n        MongoCollection<Document> user = database.getCollection(\"user\");\r\n        MongoCollection<Document> review = database.getCollection(\"review\");\r\n\r\n        // embed review into user\r\n\r\n        ArrayList<Document> reviews = new ArrayList<>();\r\n        MongoCursor<Document> cursor;\r\n        cursor = review.find().iterator();\r\n        while(cursor.hasNext())\r\n            reviews.add(cursor.next());\r\n\r\n        int i = 0;\r\n        for (Document d : reviews) {\r\n            System.out.println(\"i: \" + i + \" \" + d);\r\n            Document rew = new Document().append(\"timestamp\", d.getString(\"timestamp\")).append(\"reviewer\", d.getString(\"reviewer\")).append(\"title\", d.getString(\"title\")).append(\"text\", d.getString(\"text\")).append(\"rating\", d.getInteger(\"rating\"));\r\n            BasicDBObject query = new BasicDBObject();\r\n\r\n            query.put(\"username\", d.getString(\"seller\"));\r\n\r\n            System.out.println(\"i: \" + i + \" \" + d);\r\n            System.out.println(\"i: \" + i + \" \" + rew);\r\n\r\n            BasicDBObject push_data = new BasicDBObject(\"$push\", new BasicDBObject(\"reviews\", rew));\r\n            user.findOneAndUpdate(query, push_data);\r\n            //review.deleteOne(cur);\r\n            i++;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public static void main(String[] args) throws ParseException {\r\n\r\n        ConnectionString uri = new ConnectionString(\"mongodb://localhost:27017\");\r\n        MongoClient mongoClient = MongoClients.create(uri);\r\n        MongoDatabase database = mongoClient.getDatabase(\"local\");\r\n\r\n        embedReviewIntoUser(database);\r\n        modifyRatingWithReviews(database);\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/addReviews.java b/addReviews.java
--- a/addReviews.java	(revision 190fd7128d92f590f9f2fdee59ddb2931f30cfd5)
+++ b/addReviews.java	(date 1644591048720)
@@ -22,18 +22,13 @@
         int i = 0;
         for (Document d : users) {      //for every user
 
-    System.out.println("USERNAME: " + d.getString("username"));
             //list takes all the embedded reviews
             List<Document> list = null;
             list = d.getList("reviews", Document.class);
 
-    System.out.println("LIST: " + list);
-
             if(list == null)    //if no reviews go to next user
                 continue;
 
-    System.out.println("SIZE: " + list.size());
-
             //calculate avg rating of this user
             Double avg = 0.0;
             int sum = 0;

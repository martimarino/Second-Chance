Index: src/main/java/it/unipi/dii/largescale/secondchance/connection/ConnectionNeo4jDB.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.it.unipi.dii.largescale.secondchance.connection;\r\n\r\nimport main.java.it.unipi.dii.largescale.secondchance.entity.Insertion;\r\nimport main.java.it.unipi.dii.largescale.secondchance.entity.User;\r\nimport main.java.it.unipi.dii.largescale.secondchance.utils.Utility;\r\nimport org.neo4j.driver.*;\r\nimport org.neo4j.driver.Record;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport static org.neo4j.driver.Values.parameters;\r\n\r\npublic class ConnectionNeo4jDB implements AutoCloseable\r\n{\r\n    private Driver driver;\r\n    String uri = \"neo4j://127.0.0.1:7687\";\r\n    String user = \"neo4j\";\r\n    String password = \"2nd-chance\";\r\n    public static ConnectionNeo4jDB connNeo;\r\n\r\n    public void open()\r\n    {\r\n        driver = GraphDatabase.driver( uri, AuthTokens.basic( user, password ) );\r\n    }\r\n\r\n    @Override\r\n    public void close()\r\n    {\r\n        driver.close();\r\n    }\r\n\r\n    public boolean addUser(final User u)\r\n    {\r\n        this.open();\r\n        try ( Session session = driver.session() )\r\n        {\r\n            session.writeTransaction((TransactionWork<Void>) tx -> {\r\n                tx.run(\"MERGE (u:User {username: $username, country: $country})\",\r\n                        parameters(\"username\", u.getUsername(),\r\n                                \"country\", u.getCountry()));\r\n                return null;\r\n            });\r\n            return true;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }finally{\r\n            this.close();\r\n        }\r\n    }\r\n\r\n    public boolean addInsertion(final Insertion i)\r\n    {\r\n        this.open();\r\n        try ( Session session = driver.session() )\r\n        {\r\n            session.writeTransaction((TransactionWork<Void>) tx -> {\r\n                tx.run( \"MERGE (i:Insertion {uniq_id: $uniq_id, category: $category,\" +\r\n                                \"gender: $gender})\",\r\n                        parameters( \"uniq_id\", i.getId(), \"category\", i.getCategory(),\r\n                                \"gender\", i.getGender()));\r\n                return null;\r\n            });\r\n            this.close();\r\n            return true;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        Utility.printTerminal(\"Cannot create new insertion node\");\r\n        return false;\r\n    }\r\n\r\n    public void followUser(String follower, String followed) {\r\n        this.open();\r\n        System.out.println(\"USER_FOLLOWER: \" + follower + \"USER_FOLLOWED : \" + follower);\r\n        try ( Session session = driver.session() )\r\n        {\r\n            session.writeTransaction((TransactionWork<Void>) tx -> {\r\n                tx.run( \"MATCH (u:User),(v) \" +\r\n                                \"WHERE u.username = $username1 AND v.username = $username2 \" +\r\n                                \"CREATE (u)-[:FOLLOWS]->(v)\",\r\n                        parameters( \"username1\", follower, \"username2\", followed));\r\n                return null;\r\n            });\r\n            this.close();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void unfollowUser(String unfollower, String unfollowed) {\r\n        this.open();\r\n        try ( Session session = driver.session() )\r\n        {\r\n            session.writeTransaction((TransactionWork<Void>) tx -> {\r\n                tx.run( \"MATCH (u:User)-[rel:FOLLOWS]->(v)  \" +\r\n                                \"WHERE u.username = $username1 AND v.username = $username2 \" +\r\n                                \"DELETE rel\",\r\n                        parameters( \"username1\", unfollower, \"username2\", unfollowed));\r\n                return null;\r\n            });\r\n            this.close();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public ArrayList<String> getSuggestedUsers(String username, String country, int k) {\r\n        this.open();\r\n        ArrayList<String> suggestions = new ArrayList<>();\r\n        try (Session session = driver.session()) {\r\n\r\n            List<String> similar = session.readTransaction((TransactionWork<List<String>>) tx -> {\r\n\r\n                Result result = tx.run( \"MATCH (u:User)-[:FOLLOWS]->(m)-[:FOLLOWS]->(others) \" +\r\n\r\n                                \"WHERE u.username = $username AND u.country = $country AND others.country = $country \" +\r\n                                \"AND NOT (u)-[:FOLLOWS]->(others) \" +\r\n                                \"RETURN others.username as SuggUsers \" +\r\n                                \"LIMIT $k\",\r\n                        parameters(\"username\", username,\r\n                                \"country\", country,\r\n                                \"k\", k));\r\n                while (result.hasNext()) {\r\n                    Record r = result.next();\r\n                    suggestions.add(r.get(\"SuggUsers\").asString());\r\n                }\r\n                return suggestions;\r\n            });\r\n            Utility.printTerminal(\"NEO4j\\n\" + similar);\r\n            this.close();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return suggestions;\r\n    }\r\n\r\n\r\n    public ArrayList<String> getFollowedInsertions(String username, int k) {\r\n\r\n        this.open();\r\n        ArrayList<String> followed = new ArrayList<>();\r\n        try (Session session = driver.session()) {\r\n\r\n            List<String> insertions = session.readTransaction((TransactionWork<List<String>>) tx -> {\r\n\r\n                Result result = tx.run( \"MATCH (u:User)-[:FOLLOWS]->(m)-[:POSTED]->(i:Insertion) \" +\r\n                                \"WHERE u.username = $username \" +\r\n                                \"RETURN i.uniq_id as SuggIns \" +\r\n                                \"LIMIT $k\",\r\n                        parameters(\"username\", username,\r\n                                \"k\", k));\r\n\r\n                while (result.hasNext()) {\r\n                    Record r = result.next();\r\n                    System.out.println(\"SUGGINS: \" + r.get(\"SuggIns\").asString());\r\n                    followed.add(r.get(\"SuggIns\").asString());\r\n                }\r\n                return followed;\r\n            });\r\n            Utility.printTerminal(\"NEO4j\\n\" + insertions);\r\n            this.close();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return followed;\r\n\r\n    }\r\n\r\n    public boolean likeInsertion(String username, String insertion_id) {\r\n\r\n        this.open();\r\n        System.out.println(\"INSERTION NEO : \" + insertion_id);\r\n\r\n        try (Session session = driver.session()) {\r\n            session.writeTransaction((TransactionWork<Void>) tx -> {\r\n                tx.run(\r\n                        \"MATCH (u:User {username: $username})\" +\r\n                                \"CREATE (u)-[rel:INTERESTED]->(i: Insertion {uniq_id: $id})\", parameters(\"username\", username,\r\n                                \"id\", insertion_id));\r\n                return null;\r\n            });\r\n            return true;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }finally{\r\n            this.close();\r\n        }\r\n    }\r\n\r\n    public boolean dislikeInsertion(String username, String insertion_id) {\r\n\r\n        this.open();\r\n\r\n        try (Session session = driver.session()) {\r\n            session.writeTransaction((TransactionWork<Void>) tx -> {\r\n                tx.run(\r\n                        \"MATCH (u:User { username: $username})-[r:INTERESTED]->(i :Insertion { uniq_id: $id})\\n\" +\r\n                                \"DELETE r\", parameters(\"username\", username,\r\n                                \"id\", insertion_id));\r\n                return null;\r\n            });\r\n            return true;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }finally {\r\n            this.close();\r\n        }\r\n    }\r\n\r\n\r\n    public boolean showIfInterested(String username, String insertion_id) {\r\n\r\n        this.open();\r\n\r\n        try (Session session = driver.session()) {\r\n            Boolean relation = session.readTransaction((TransactionWork<Boolean>) tx -> {\r\n                Result result = tx.run(\"MATCH (u:User { username: $username})-[r:INTERESTED]->(i :Insertion { uniq_id: $id})\\n\" +\r\n                        \"RETURN r\", parameters(\"username\", username,\r\n                        \"id\", insertion_id));\r\n\r\n                return result.hasNext();\r\n            });\r\n            System.out.println(relation);\r\n            this.close();\r\n            return relation;\r\n        }\r\n    }\r\n\r\n    public boolean deleteInsertion(String uniq_id) {\r\n        this.open();\r\n\r\n        try (Session session = driver.session()) {\r\n            session.writeTransaction((TransactionWork<Void>) tx -> {\r\n                tx.run(\"MATCH (i:Insertion{uniq_id : $uniq_id}) DETACH DELETE i;\",\r\n                        parameters(\"uniq_id\", uniq_id));\r\n                return null;\r\n            });\r\n            return true;\r\n        }catch(Exception e)\r\n        {\r\n            return false;\r\n        }finally{\r\n            this.close();\r\n        }\r\n    }\r\n\r\n    public boolean checkIfFollows(String us1, String us2) {\r\n\r\n        this.open();\r\n        Boolean check;\r\n\r\n        try(Session session = driver.session()) {\r\n            check = session.readTransaction((TransactionWork<Boolean>) tx -> {\r\n                Result result = tx.run(\r\n                        \"MATCH (a:User {username: $username1})-[r:FOLLOWS]->(b:User {username: $username2}) \" +\r\n                                \"RETURN r\",\r\n                        parameters( \"username1\", us1,\r\n                                \"username2\", us2));\r\n\r\n                return result.hasNext();\r\n            });\r\n            this.close();\r\n            return check;\r\n        }\r\n    }\r\n\r\n    public void followUnfollowButton(String text, String us1, String us2) {\r\n\r\n        switch (text) {\r\n            case \"Follow\":\r\n                followUser(us1, us2);\r\n                break;\r\n\r\n            case \"Unfollow\":\r\n                unfollowUser(us1, us2);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    public boolean createPostedRelationship(String node1, String node2) {\r\n\r\n        this.open();\r\n        try(Session session = driver.session()) {\r\n                session.writeTransaction((TransactionWork<Void>) tx -> {\r\n                tx.run(\r\n                        \"MATCH (u:User),(i:Insertion) \" +\r\n                                \"WHERE u.username = $username AND i.uniq_id = $id \" +\r\n                                \"CREATE (u)-[:POSTED]->(i)\",\r\n                        parameters( \"username\", node1,\r\n                                \"id\", node2));\r\n                return null;\r\n            });\r\n            this.close();\r\n            return true;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        Utility.printTerminal(\"Cannot create POSTED relationship\");\r\n        return false;\r\n\r\n    }\r\n\r\n    /* ********** USER SOCIAL FUNCTIONALITIES ********** */\r\n\r\n    public ArrayList<String> retrieveFollowersByUser(String user) {\r\n\r\n        this.open();\r\n        ArrayList<String> followers = new ArrayList<>();\r\n\r\n        try (Session session = driver.session()) {\r\n\r\n            List<String> follow = session.readTransaction((TransactionWork<List<String>>) tx -> {\r\n                Result result = tx.run( \"MATCH (u:User) <- [r:FOLLOWS] - (u1:User) \" +\r\n                                \"WHERE u.username = $username \" +\r\n                                \"RETURN u1.username as name \",\r\n                        parameters( \"username\", user));\r\n\r\n                while(result.hasNext())\r\n                {\r\n                    Record r = result.next();\r\n                    followers.add(r.get(\"name\").asString());\r\n                }\r\n                return followers;\r\n            });\r\n            System.out.println(\"*************** NEO4j ***************\");\r\n            if(!follow.isEmpty())\r\n                System.out.println(follow.get(0));\r\n            System.out.println(\"*************************************\");\r\n            this.close();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return followers;\r\n    }\r\n\r\n    public ArrayList<String> retrieveFollowingByUser(String user) {\r\n\r\n        this.open();\r\n        ArrayList<String> following = new ArrayList<>();\r\n\r\n        try (Session session = driver.session()) {\r\n\r\n            List<String> follow = session.readTransaction((TransactionWork<List<String>>) tx -> {\r\n                Result result = tx.run( \"MATCH (u:User) - [r:FOLLOWS] -> (u1:User) \" +\r\n                                \"WHERE u.username = $username \" +\r\n                                \"RETURN u1.username as name \",\r\n                        parameters( \"username\", user));\r\n\r\n                while(result.hasNext())\r\n                {\r\n                    Record r = result.next();\r\n                    following.add(r.get(\"name\").asString());\r\n                }\r\n                return following;\r\n            });\r\n            System.out.println(\"*************** NEO4j ***************\");\r\n            if(!follow.isEmpty())\r\n                System.out.println(follow.get(0));\r\n            System.out.println(\"*************************************\");\r\n            this.close();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return following;\r\n    }\r\n\r\n    public ArrayList<String> retrieveFollowedInsertionByUser(String user) {\r\n\r\n        this.open();\r\n        ArrayList<String> followed_ins = new ArrayList<>();\r\n\r\n        try (Session session = driver.session()) {\r\n\r\n            List<String> follow = session.readTransaction((TransactionWork<List<String>>) tx -> {\r\n                Result result = tx.run( \"MATCH (u:User) - [r:INTERESTED] -> (i:Insertion)\" +\r\n                                \"WHERE u.username = $username \" +\r\n                                \"RETURN i.uniq_id as uniq_id\",\r\n                        parameters( \"username\", user));\r\n\r\n                while(result.hasNext())\r\n                {\r\n                    Record r = result.next();\r\n                    followed_ins.add(r.get(\"uniq_id\").asString());\r\n                }\r\n                return followed_ins;\r\n            });\r\n            System.out.println(\"*************** NEO4j FOLLOWED INSERTIONS ***************\");\r\n            if(!followed_ins.isEmpty())\r\n                System.out.println(followed_ins.get(0));\r\n            System.out.println(\"*************************************\");\r\n            this.close();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return followed_ins;\r\n    }\r\n\r\n    public boolean deleteInsertionNeo4J(String id) {\r\n        this.open();\r\n\r\n        try (Session session = driver.session()) {\r\n            session.writeTransaction((TransactionWork<Void>) tx -> {\r\n                tx.run(\r\n                        \"MATCH (u:Insertion {uniq_id: $id})\" +\r\n                                \"DETACH DELETE u\", parameters(\"id\", id));\r\n                return null;\r\n            });\r\n            return true;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }finally{\r\n            this.close();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/unipi/dii/largescale/secondchance/connection/ConnectionNeo4jDB.java b/src/main/java/it/unipi/dii/largescale/secondchance/connection/ConnectionNeo4jDB.java
--- a/src/main/java/it/unipi/dii/largescale/secondchance/connection/ConnectionNeo4jDB.java	(revision 89fe89836fc89b7929b9b4ec2cd4ce78c55c77e0)
+++ b/src/main/java/it/unipi/dii/largescale/secondchance/connection/ConnectionNeo4jDB.java	(date 1644328817718)
@@ -3,6 +3,7 @@
 import main.java.it.unipi.dii.largescale.secondchance.entity.Insertion;
 import main.java.it.unipi.dii.largescale.secondchance.entity.User;
 import main.java.it.unipi.dii.largescale.secondchance.utils.Utility;
+import org.bson.Document;
 import org.neo4j.driver.*;
 import org.neo4j.driver.Record;
 
@@ -11,30 +12,25 @@
 
 import static org.neo4j.driver.Values.parameters;
 
-public class ConnectionNeo4jDB implements AutoCloseable
-{
+public class ConnectionNeo4jDB implements AutoCloseable {
     private Driver driver;
     String uri = "neo4j://127.0.0.1:7687";
     String user = "neo4j";
     String password = "2nd-chance";
     public static ConnectionNeo4jDB connNeo;
 
-    public void open()
-    {
-        driver = GraphDatabase.driver( uri, AuthTokens.basic( user, password ) );
+    public void open() {
+        driver = GraphDatabase.driver(uri, AuthTokens.basic(user, password));
     }
 
     @Override
-    public void close()
-    {
+    public void close() {
         driver.close();
     }
 
-    public boolean addUser(final User u)
-    {
+    public boolean addUser(final User u) {
         this.open();
-        try ( Session session = driver.session() )
-        {
+        try (Session session = driver.session()) {
             session.writeTransaction((TransactionWork<Void>) tx -> {
                 tx.run("MERGE (u:User {username: $username, country: $country})",
                         parameters("username", u.getUsername(),
@@ -45,20 +41,18 @@
         } catch (Exception e) {
             e.printStackTrace();
             return false;
-        }finally{
+        } finally {
             this.close();
         }
     }
 
-    public boolean addInsertion(final Insertion i)
-    {
+    public boolean addInsertion(final Insertion i) {
         this.open();
-        try ( Session session = driver.session() )
-        {
+        try (Session session = driver.session()) {
             session.writeTransaction((TransactionWork<Void>) tx -> {
-                tx.run( "MERGE (i:Insertion {uniq_id: $uniq_id, category: $category," +
+                tx.run("MERGE (i:Insertion {uniq_id: $uniq_id, category: $category," +
                                 "gender: $gender})",
-                        parameters( "uniq_id", i.getId(), "category", i.getCategory(),
+                        parameters("uniq_id", i.getId(), "category", i.getCategory(),
                                 "gender", i.getGender()));
                 return null;
             });
@@ -74,13 +68,12 @@
     public void followUser(String follower, String followed) {
         this.open();
         System.out.println("USER_FOLLOWER: " + follower + "USER_FOLLOWED : " + follower);
-        try ( Session session = driver.session() )
-        {
+        try (Session session = driver.session()) {
             session.writeTransaction((TransactionWork<Void>) tx -> {
-                tx.run( "MATCH (u:User),(v) " +
+                tx.run("MATCH (u:User),(v) " +
                                 "WHERE u.username = $username1 AND v.username = $username2 " +
                                 "CREATE (u)-[:FOLLOWS]->(v)",
-                        parameters( "username1", follower, "username2", followed));
+                        parameters("username1", follower, "username2", followed));
                 return null;
             });
             this.close();
@@ -91,13 +84,12 @@
 
     public void unfollowUser(String unfollower, String unfollowed) {
         this.open();
-        try ( Session session = driver.session() )
-        {
+        try (Session session = driver.session()) {
             session.writeTransaction((TransactionWork<Void>) tx -> {
-                tx.run( "MATCH (u:User)-[rel:FOLLOWS]->(v)  " +
+                tx.run("MATCH (u:User)-[rel:FOLLOWS]->(v)  " +
                                 "WHERE u.username = $username1 AND v.username = $username2 " +
                                 "DELETE rel",
-                        parameters( "username1", unfollower, "username2", unfollowed));
+                        parameters("username1", unfollower, "username2", unfollowed));
                 return null;
             });
             this.close();
@@ -113,7 +105,7 @@
 
             List<String> similar = session.readTransaction((TransactionWork<List<String>>) tx -> {
 
-                Result result = tx.run( "MATCH (u:User)-[:FOLLOWS]->(m)-[:FOLLOWS]->(others) " +
+                Result result = tx.run("MATCH (u:User)-[:FOLLOWS]->(m)-[:FOLLOWS]->(others) " +
 
                                 "WHERE u.username = $username AND u.country = $country AND others.country = $country " +
                                 "AND NOT (u)-[:FOLLOWS]->(others) " +
@@ -145,7 +137,7 @@
 
             List<String> insertions = session.readTransaction((TransactionWork<List<String>>) tx -> {
 
-                Result result = tx.run( "MATCH (u:User)-[:FOLLOWS]->(m)-[:POSTED]->(i:Insertion) " +
+                Result result = tx.run("MATCH (u:User)-[:FOLLOWS]->(m)-[:POSTED]->(i:Insertion) " +
                                 "WHERE u.username = $username " +
                                 "RETURN i.uniq_id as SuggIns " +
                                 "LIMIT $k",
@@ -185,7 +177,7 @@
         } catch (Exception e) {
             e.printStackTrace();
             return false;
-        }finally{
+        } finally {
             this.close();
         }
     }
@@ -206,7 +198,7 @@
         } catch (Exception e) {
             e.printStackTrace();
             return false;
-        }finally {
+        } finally {
             this.close();
         }
     }
@@ -240,10 +232,9 @@
                 return null;
             });
             return true;
-        }catch(Exception e)
-        {
+        } catch (Exception e) {
             return false;
-        }finally{
+        } finally {
             this.close();
         }
     }
@@ -253,12 +244,12 @@
         this.open();
         Boolean check;
 
-        try(Session session = driver.session()) {
+        try (Session session = driver.session()) {
             check = session.readTransaction((TransactionWork<Boolean>) tx -> {
                 Result result = tx.run(
                         "MATCH (a:User {username: $username1})-[r:FOLLOWS]->(b:User {username: $username2}) " +
                                 "RETURN r",
-                        parameters( "username1", us1,
+                        parameters("username1", us1,
                                 "username2", us2));
 
                 return result.hasNext();
@@ -288,13 +279,13 @@
     public boolean createPostedRelationship(String node1, String node2) {
 
         this.open();
-        try(Session session = driver.session()) {
-                session.writeTransaction((TransactionWork<Void>) tx -> {
+        try (Session session = driver.session()) {
+            session.writeTransaction((TransactionWork<Void>) tx -> {
                 tx.run(
                         "MATCH (u:User),(i:Insertion) " +
                                 "WHERE u.username = $username AND i.uniq_id = $id " +
                                 "CREATE (u)-[:POSTED]->(i)",
-                        parameters( "username", node1,
+                        parameters("username", node1,
                                 "id", node2));
                 return null;
             });
@@ -318,20 +309,19 @@
         try (Session session = driver.session()) {
 
             List<String> follow = session.readTransaction((TransactionWork<List<String>>) tx -> {
-                Result result = tx.run( "MATCH (u:User) <- [r:FOLLOWS] - (u1:User) " +
+                Result result = tx.run("MATCH (u:User) <- [r:FOLLOWS] - (u1:User) " +
                                 "WHERE u.username = $username " +
                                 "RETURN u1.username as name ",
-                        parameters( "username", user));
+                        parameters("username", user));
 
-                while(result.hasNext())
-                {
+                while (result.hasNext()) {
                     Record r = result.next();
                     followers.add(r.get("name").asString());
                 }
                 return followers;
             });
             System.out.println("*************** NEO4j ***************");
-            if(!follow.isEmpty())
+            if (!follow.isEmpty())
                 System.out.println(follow.get(0));
             System.out.println("*************************************");
             this.close();
@@ -349,20 +339,19 @@
         try (Session session = driver.session()) {
 
             List<String> follow = session.readTransaction((TransactionWork<List<String>>) tx -> {
-                Result result = tx.run( "MATCH (u:User) - [r:FOLLOWS] -> (u1:User) " +
+                Result result = tx.run("MATCH (u:User) - [r:FOLLOWS] -> (u1:User) " +
                                 "WHERE u.username = $username " +
                                 "RETURN u1.username as name ",
-                        parameters( "username", user));
+                        parameters("username", user));
 
-                while(result.hasNext())
-                {
+                while (result.hasNext()) {
                     Record r = result.next();
                     following.add(r.get("name").asString());
                 }
                 return following;
             });
             System.out.println("*************** NEO4j ***************");
-            if(!follow.isEmpty())
+            if (!follow.isEmpty())
                 System.out.println(follow.get(0));
             System.out.println("*************************************");
             this.close();
@@ -380,20 +369,19 @@
         try (Session session = driver.session()) {
 
             List<String> follow = session.readTransaction((TransactionWork<List<String>>) tx -> {
-                Result result = tx.run( "MATCH (u:User) - [r:INTERESTED] -> (i:Insertion)" +
+                Result result = tx.run("MATCH (u:User) - [r:INTERESTED] -> (i:Insertion)" +
                                 "WHERE u.username = $username " +
                                 "RETURN i.uniq_id as uniq_id",
-                        parameters( "username", user));
+                        parameters("username", user));
 
-                while(result.hasNext())
-                {
+                while (result.hasNext()) {
                     Record r = result.next();
                     followed_ins.add(r.get("uniq_id").asString());
                 }
                 return followed_ins;
             });
             System.out.println("*************** NEO4j FOLLOWED INSERTIONS ***************");
-            if(!followed_ins.isEmpty())
+            if (!followed_ins.isEmpty())
                 System.out.println(followed_ins.get(0));
             System.out.println("*************************************");
             this.close();
@@ -417,8 +405,101 @@
         } catch (Exception e) {
             e.printStackTrace();
             return false;
-        }finally{
+        } finally {
             this.close();
         }
     }
+
+    public ArrayList<String> findMostFollowedUsers(int k) {
+
+        this.open();
+        ArrayList<String> followedUsers = new ArrayList<>();
+
+        try (Session session = driver.session()) {
+
+            session.readTransaction((TransactionWork<List<String>>) tx -> {
+                Result result = tx.run("match(u:User)-[r:FOLLOWS]->(u1:User) " +
+                                "RETURN u1.username as user, COUNT(r) as counter order by counter DESC limit $k",
+                        parameters("k", k));
+
+                while (result.hasNext()) {
+                    Record r = result.next();
+                    String user = r.get("user").asString();
+                    int count = r.get("counter").asInt();
+                    String us = user + " : " + count;
+                    followedUsers.add(us);
+                }
+
+                return followedUsers;
+
+            });
+        } catch (Exception e)
+        {
+            e.printStackTrace();
+        }
+        return followedUsers;
+    }
+
+    public ArrayList<String> findNumberInterestingForCountry() {
+
+        this.open();
+        ArrayList<String> interesting = new ArrayList<>();
+
+        try (Session session = driver.session()) {
+
+            session.readTransaction((TransactionWork<List<String>>) tx -> {
+                Result result = tx.run("match(u:User)-[r:INTERESTED]->(i:Insertion) " +
+                        "RETURN DISTINCT i.category as category, count(r) AS counter" +
+                        " ORDER BY counter DESC");
+
+                while (result.hasNext()) {
+                    Record r = result.next();
+                    String category = r.get("category").asString();
+                    int count = r.get("counter").asInt();
+                    String ins = category + " : " + count;
+                    interesting.add(ins);
+                }
+
+                return interesting;
+
+            });
+        } catch (Exception e)
+        {
+            e.printStackTrace();
+        }
+        return interesting;
+
+    }
+
+
+    public ArrayList<String> findNumberPostedInsertionForCountry() {
+
+        this.open();
+        ArrayList<String> posted = new ArrayList<>();
+
+        try (Session session = driver.session()) {
+
+            session.readTransaction((TransactionWork<List<String>>) tx -> {
+                Result result = tx.run("match(u:User)-[r:POSTED]->(i:Insertion) " +
+                        "RETURN DISTINCT u.country as country, count(r) AS counter" +
+                        " ORDER BY counter DESC");
+
+                while (result.hasNext()) {
+                    Record r = result.next();
+                    String country = r.get("country").asString();
+                    int count = r.get("counter").asInt();
+                    String ins = country + " : " + count;
+                    posted.add(ins);
+                }
+
+                return posted;
+
+            });
+        } catch (Exception e)
+        {
+            e.printStackTrace();
+        }
+        return posted;
+
+    }
 }
Index: src/main/java/it/unipi/dii/largescale/secondchance/connection/ConnectionMongoDB.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.it.unipi.dii.largescale.secondchance.connection;\r\n\r\nimport com.mongodb.*;\r\nimport com.mongodb.client.*;\r\nimport com.mongodb.client.MongoClient;\r\nimport com.mongodb.client.model.*;\r\nimport com.mongodb.client.result.DeleteResult;\r\nimport com.mongodb.client.result.UpdateResult;\r\nimport main.java.it.unipi.dii.largescale.secondchance.entity.Insertion;\r\nimport main.java.it.unipi.dii.largescale.secondchance.entity.Review;\r\nimport main.java.it.unipi.dii.largescale.secondchance.entity.User;\r\nimport main.java.it.unipi.dii.largescale.secondchance.utils.Session;\r\nimport main.java.it.unipi.dii.largescale.secondchance.utils.Utility;\r\nimport org.bson.Document;\r\nimport org.bson.conversions.Bson;\r\nimport org.bson.types.ObjectId;\r\n\r\nimport javax.print.Doc;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.*;\r\nimport java.util.function.Consumer;\r\n\r\nimport static com.mongodb.client.model.Aggregates.*;\r\nimport static com.mongodb.client.model.Filters.*;\r\nimport static com.mongodb.client.model.Projections.*;\r\nimport static com.mongodb.client.model.Sorts.descending;\r\nimport static com.mongodb.client.model.Updates.inc;\r\nimport static com.mongodb.client.model.Updates.set;\r\n\r\npublic class ConnectionMongoDB{\r\n\r\n    public static ConnectionMongoDB connMongo;\r\n    private MongoClient mongoClient;\r\n    private MongoDatabase db;\r\n    MongoCursor<Document> cursor;\r\n\r\n    MongoCollection<Document> userColl;\r\n    MongoCollection<Document> insertionColl;\r\n    MongoCollection<Document> codeColl;\r\n\r\n    /* ********* CONNECTION SECTION ********* */\r\n\r\n    public void openConnection() {\r\n\r\n        // LOCAL DATABASE WITHOUT REPLICAS\r\n/*\r\n        ConnectionString uri = new ConnectionString(\"mongodb://localhost:27017\");\r\n        mongoClient = MongoClients.create(uri);\r\n        db = mongoClient.getDatabase(\"local\");\r\n\r\n        userColl = db.getCollection(\"user\");\r\n        insertionColl = db.getCollection(\"insertion\");\r\n        codeColl = db.getCollection(\"code\");\r\n*/\r\n        // CONNECTION TO VMS\r\n\r\n\r\n        mongoClient = MongoClients.create(\r\n                \"mongodb://172.16.4.114:27020,172.16.4.115:27020,172.16.4.116:27020/\" +\r\n                        \"?retryWrites=true&w=majority&wtimeout=10000\");\r\n\r\n        // Read Preferences at DB level\r\n        db = mongoClient.getDatabase(\"lsmdb\")\r\n                .withReadPreference(ReadPreference.secondary());\r\n\r\n        // Read Preferences at collection level\r\n        userColl = db.getCollection(\"user\")\r\n                .withReadPreference(ReadPreference.secondary());\r\n\r\n        insertionColl = db.getCollection(\"insertion\")\r\n                .withReadPreference(ReadPreference.secondary());\r\n\r\n        codeColl = db.getCollection(\"code\")\r\n                .withReadPreference(ReadPreference.secondary());\r\n\r\n        // Write concern at DB level\r\n        db = mongoClient.getDatabase(\"lsmdb\")\r\n                .withWriteConcern(WriteConcern.W1);\r\n\r\n        System.out.println(\"**************** USER ******************\");\r\n        System.out.println(userColl.countDocuments());\r\n        System.out.println(\"**************** INSERTION ******************\");\r\n        System.out.println(insertionColl.countDocuments());\r\n        System.out.println(\"**************** CODE ******************\");\r\n        System.out.println(codeColl.countDocuments());\r\n\r\n        // 2 - Find the first document\r\n        userColl.find().limit(1).forEach(printDocuments());\r\n\r\n    }\r\n\r\n    public void closeConnection() {\r\n        mongoClient.close();\r\n    }\r\n\r\n    /* ********* USER SECTION ********* */\r\n\r\n    public boolean registerUser(User u) {\r\n\r\n        if (userAlreadyPresent(u.getUsername())) {\r\n            Utility.infoBox(\"Please, choose another username and try again.\", \"Error\", \"Username already used!\");\r\n            return false;\r\n        }\r\n\r\n        Document user = new Document(\"address\", u.getAddress())\r\n                .append(\"balance\", u.getBalance())\r\n                .append(\"city\", u.getCity())\r\n                .append(\"country\", u.getCountry())\r\n                .append(\"email\", u.getEmail())\r\n                .append(\"img_profile\", u.getImage())\r\n                .append(\"name\", u.getName())\r\n                .append(\"password\", u.getPassword())\r\n                .append(\"suspended\", u.getSuspended())\r\n                .append(\"username\", u.getUsername())\r\n                .append(\"reviews\", new ArrayList<Document>())\r\n                .append(\"sold\", new ArrayList<Document>())\r\n                .append(\"purchased\",new ArrayList<Document>());\r\n\r\n        userColl.insertOne(user);\r\n\r\n        return true;\r\n    }\r\n\r\n    private static Consumer<Document> printDocuments() {\r\n        return doc -> System.out.println(doc.toJson());\r\n    }\r\n\r\n    public Document findUserByUsername(String username) {\r\n\r\n        cursor = userColl.find(eq(\"username\", username)).iterator();\r\n\r\n        if (cursor.hasNext())\r\n            return cursor.next();\r\n\r\n        Utility.infoBox(\"There is no user with this username.\", \"Error\", \"Username not found!\");\r\n        return null;\r\n\r\n    }\r\n\r\n    public boolean userAlreadyPresent(String username) {\r\n\r\n        cursor = userColl.find(eq(\"username\", username)).iterator();\r\n\r\n        return cursor.hasNext();\r\n    }\r\n\r\n    public boolean checkCredentials(String username, String encrypted) {\r\n\r\n        cursor = userColl.find(and(eq(\"username\", username), eq(\"password\", encrypted))).iterator();\r\n\r\n        return cursor.hasNext();\r\n    }\r\n\r\n    public User findUserDetails(String username) {\r\n\r\n        User logUser = new User();\r\n        Document user = userColl.find(eq(\"username\", username)).first();\r\n        logUser.setUsername(user.getString(\"username\"));\r\n        logUser.setName(user.getString(\"name\"));\r\n        logUser.setEmail(user.getString(\"email\"));\r\n        logUser.setAddress(user.getString(\"address\"));\r\n        logUser.setCity(user.getString(\"city\"));\r\n        logUser.setCountry(user.getString(\"country\"));\r\n        logUser.setSuspended(user.getBoolean(\"suspended\"));\r\n        logUser.setBalance(user.getDouble(\"balance\"));\r\n        logUser.setImage(user.getString(\"img_profile\"));\r\n        if((ArrayList<Document>) user.get(\"reviews\") != null){\r\n            logUser.setReviews((ArrayList<Document>) user.get(\"reviews\"));\r\n            logUser.setRating(user.getDouble(\"rating\"));\r\n        }\r\n        if((ArrayList<Document>) user.get(\"sold\") != null)\r\n            logUser.setSold((ArrayList<Document>) user.get(\"sold\"));\r\n        if((ArrayList<Document>) user.get(\"purchased\")!= null)\r\n            logUser.setPurchased((ArrayList<Document>) user.get(\"purchased\"));\r\n\r\n        return logUser;\r\n    }\r\n\r\n    public ArrayList<Document> followedUserInsertions(ArrayList<String> insList) {\r\n\r\n        ArrayList<Document> insertions = new ArrayList<>();\r\n\r\n        for (String s : insList) {\r\n            Document d = insertionColl.find(eq(\"_id\", new ObjectId(s))).first();\r\n            insertions.add(d);\r\n        }\r\n\r\n        return insertions;\r\n    }\r\n\r\n    public ArrayList<Document> findViralInsertions(int k) {\r\n\r\n        ArrayList<Document> insertions = new ArrayList<>();\r\n        Bson sort = sort(descending(\"interested\"));\r\n        Bson limit = limit(k);\r\n\r\n        AggregateIterable<Document> r = insertionColl.aggregate(Arrays.asList(sort ,limit));\r\n\r\n        for (Document document : r)\r\n            insertions.add(document);\r\n\r\n        return insertions;\r\n    }\r\n\r\n    public ArrayList<Document> findUserByFilters(String country, String rating) {\r\n\r\n        ArrayList<Document> users = new ArrayList<>();\r\n        double r ;\r\n        double lowerBound = 0;\r\n        double upperBound = 0;\r\n\r\n        if(!rating.equals(\"rating\")){\r\n            r = Double.parseDouble(rating);\r\n            lowerBound = r-0.5;\r\n            upperBound = r+0.5;\r\n        }\r\n\r\n        if(country.equals(\"country\") && !rating.equals(\"rating\"))\r\n        {\r\n            cursor  = userColl.find(and(lte(\"rating\", upperBound), gt(\"rating\", lowerBound))).iterator();\r\n        }\r\n        else if(!country.equals(\"country\") && rating.equals(\"rating\"))\r\n        {\r\n             cursor  = userColl.find(eq(\"country\", country)).iterator();\r\n        }\r\n        else{\r\n             cursor  = userColl.find(and(eq(\"country\", country), lte(\"rating\", upperBound), gt(\"rating\", lowerBound))).iterator();\r\n        }\r\n\r\n        while(cursor.hasNext())\r\n        {\r\n            users.add(cursor.next());\r\n        }\r\n\r\n        return users;\r\n\r\n    }\r\n\r\n        /* ********* INSERTION SECTION ********* */\r\n\r\n    public ArrayList<Document> findInsertionByFilters(String size, String price, String gender, String status, String category, String color) {\r\n\r\n        ArrayList<Document> insertions = new ArrayList<>();\r\n        List<Bson> filters = new ArrayList<>();\r\n\r\n        if(!size.equals(\"size\")) {\r\n            filters.add(Filters.eq(\"size\", size));\r\n        }\r\n        if(!price.equals(\"price\")) {\r\n            String[] range = price.split(\"-\");\r\n            if(range.length == 1) {\r\n                filters.add(Filters.gte(\"price\", Double.parseDouble(range[0])));\r\n            } else {\r\n                filters.add(Filters.gte(\"price\", Double.parseDouble(range[0])));\r\n                filters.add(Filters.lte(\"price\", Double.parseDouble(range[1])));\r\n            }\r\n        }\r\n        if(!gender.equals(\"gender\")) {\r\n            filters.add(Filters.eq(\"gender\", gender));\r\n        }\r\n        if(!status.equals(\"status\")) {\r\n            filters.add(Filters.eq(\"status\", status));\r\n        }\r\n        if(!category.equals(\"category\")) {\r\n            filters.add(Filters.eq(\"category\", category));\r\n        }\r\n        if(!color.equals(\"color\")) {\r\n            filters.add(Filters.eq(\"color\", color));\r\n        }\r\n\r\n        cursor = insertionColl.find(Filters.and(filters)).iterator();\r\n        while(cursor.hasNext())\r\n            insertions.add(cursor.next());\r\n\r\n        return insertions;\r\n    }\r\n\r\n    public ArrayList<Document> findInsertionBySeller(String seller) {\r\n\r\n        ArrayList<Document> insertions = new ArrayList<>();\r\n\r\n        cursor = insertionColl.find(eq(\"seller\", seller)).iterator();\r\n        while (cursor.hasNext())\r\n            insertions.add(cursor.next());\r\n\r\n        return insertions;\r\n    }\r\n\r\n    public ArrayList<Document> findInsertionByBrand(String brand) {\r\n\r\n        ArrayList<Document> insertions = new ArrayList<>();\r\n\r\n        cursor = insertionColl.find(eq(\"brand\", brand)).iterator();\r\n        while (cursor.hasNext())\r\n            insertions.add(cursor.next());\r\n\r\n        return insertions;\r\n    }\r\n\r\n    public Insertion findInsertion(String insertion_id) {\r\n\r\n        Insertion insertion = new Insertion();\r\n        Document insertion_found = insertionColl.find(eq(\"_id\", new ObjectId(insertion_id))).first();\r\n\r\n        if(insertion_found == null)\r\n            return null;\r\n        insertion.setId(insertion_found.get(\"_id\").toString());\r\n        insertion.setBrand(insertion_found.getString(\"brand\"));\r\n        insertion.setCountry(insertion_found.getString(\"country\"));\r\n        insertion.setCategory(insertion_found.getString(\"category\"));\r\n        insertion.setColor(insertion_found.getString(\"color\"));\r\n        insertion.setDescription(insertion_found.getString(\"description\"));\r\n        insertion.setGender(insertion_found.getString(\"gender\"));\r\n        insertion.setImage_url(insertion_found.getString(\"image_url\"));\r\n        insertion.setInterested(insertion_found.getInteger(\"interested\"));\r\n        insertion.setPrice(insertion_found.getDouble(\"price\"));\r\n        insertion.setViews(insertion_found.getInteger(\"views\"));\r\n        insertion.setSeller(insertion_found.getString(\"seller\"));\r\n        insertion.setSize(insertion_found.getString(\"size\"));\r\n        insertion.setStatus(insertion_found.getString(\"status\"));\r\n        insertion.setTimestamp(insertion_found.getString(\"timestamp\"));\r\n\r\n        return insertion;\r\n\r\n    }\r\n\r\n    public boolean buyCurrentInsertion(String username, Insertion insertion){\r\n\r\n        ClientSession clientSession = mongoClient.startSession();\r\n\r\n        SimpleDateFormat date = new SimpleDateFormat(\"yy-MM-dd HH:mm:ss\");\r\n        String timestamp = date.format(new Date());\r\n\r\n        TransactionBody<String> txnFunc = () -> {\r\n\r\n/*\r\n            Document bal = db.getCollection(\"balance\").find(eq(\"username\", username)).first();\r\n            double balanceBuyer = balance.getDouble(\"credit\") - insertion.getPrice();\r\n\r\n            Bson filter = and(eq(\"username\", username), gte(\"credit\", insertion.getPrice()));\r\n            Bson update = set(\"credit\", balanceBuyer);\r\n\r\n            //update buyer balance\r\n            Document ret = db.getCollection(\"balance\").findOneAndUpdate(filter, update);\r\n\r\n            if (ret == null) {\r\n                Utility.infoBox(\"Cannot purchase, not enough balance\", \"Error\", \"Error purchase\");\r\n                return \"Buyer has not enough balance\";\r\n            }\r\n\r\n            //update seller balance\r\n            Bson filter2 = eq(\"username\", insertion.getSeller());\r\n            Bson update2 = inc(\"credit\", insertion.getPrice());\r\n\r\n*/\r\n            Document balance = db.getCollection(\"user\").find(eq(\"username\", username)).first();\r\n            double balanceBuyer = balance.getDouble(\"balance\") - insertion.getPrice();\r\n\r\n            Bson filter = and(eq(\"username\", username), gte(\"balance\", insertion.getPrice()));\r\n            Bson update = set(\"balance\", balanceBuyer);\r\n\r\n            //update buyer balance\r\n            Document ret = db.getCollection(\"user\").findOneAndUpdate(filter, update);\r\n\r\n            if (ret == null) {\r\n                Utility.infoBox(\"Cannot purchase, not enough balance\", \"Error\", \"Error purchase\");\r\n                return \"Buyer has not enough balance\";\r\n            }\r\n\r\n            //update seller balance\r\n            Bson filter2 = eq(\"username\", insertion.getSeller());\r\n            Bson update2 = inc(\"balance\", insertion.getPrice());\r\n\r\n            Document ret3 = db.getCollection(\"user\").findOneAndUpdate(filter2, update2);\r\n\r\n            if (ret3 == null) {\r\n                Utility.infoBox(\"Cannot buy product\", \"Error\", \"Error purchase\");\r\n                return \"Cannot increment seller balance\";\r\n            }\r\n            //order purchased\r\n            Document purchased = new Document()\r\n                    .append(\"_id\", new ObjectId())\r\n                    .append(\"timestamp\", timestamp)\r\n                    .append(\"seller\", insertion.getSeller())\r\n                    .append(\"reviewed\", false)\r\n                    .append(\"insertion\", new Document(\"image\", insertion.getImage_url()).\r\n                            append(\"price\", insertion.getPrice()).\r\n                            append(\"size\", insertion.getSize()).\r\n                            append(\"status\", insertion.getStatus()).\r\n                            append(\"category\", insertion.getCategory()));\r\n\r\n            //order sold\r\n            Document sold = new Document()\r\n                    .append(\"_id\", new ObjectId())\r\n                    .append(\"timestamp\", timestamp)\r\n                    .append(\"buyer\", username)\r\n                    .append(\"reviewed\", false)\r\n                    .append(\"insertion\", new Document(\"image\", insertion.getImage_url()).\r\n                            append(\"price\", insertion.getPrice()).\r\n                            append(\"size\", insertion.getSize()).\r\n                            append(\"status\", insertion.getStatus()).\r\n                            append(\"category\", insertion.getCategory()));\r\n\r\n            Bson filter_purchased = eq(\"username\", username);\r\n            BasicDBObject update_purchased = new BasicDBObject(\"$push\", new BasicDBObject(\"purchased\", purchased));\r\n\r\n            Bson filter_sold = eq(\"username\", insertion.getSeller());\r\n            BasicDBObject update_sold = new BasicDBObject(\"$push\", new BasicDBObject(\"sold\", sold));\r\n\r\n            //insert new document into order collection\r\n            try {\r\n                userColl.findOneAndUpdate(filter_purchased, update_purchased);\r\n                userColl.findOneAndUpdate(filter_sold, update_sold);\r\n\r\n            } catch (Exception e) {\r\n                System.err.println(\"Unable to insert due to an error: \" + e);\r\n            }\r\n\r\n            ArrayList<Document> purc = null;\r\n\r\n            if(Session.getLogUser().getPurchased() != null)\r\n                purc = Session.getLogUser().getPurchased();\r\n            else\r\n                purc = new ArrayList<Document>();\r\n            purc.add(purchased);\r\n            Session.getLogUser().setPurchased(purc);\r\n\r\n            insertionColl.deleteOne(new Document(\"image_url\", insertion.getImage_url()).append(\"seller\", insertion.getSeller()).append(\"timestamp\", insertion.getTimestamp()));\r\n            return \"OK\";\r\n        };\r\n        return executeTransaction(clientSession, txnFunc);\r\n    }\r\n\r\n    public boolean deleteBuyInsertion(String username, Insertion insertion) {\r\n\r\n        ClientSession clientSession = mongoClient.startSession();\r\n\r\n        TransactionBody<String> txnFunc = () -> {\r\n\r\n            Bson filter = and(eq(\"username\", username), gte(\"balance\", insertion.getPrice()));\r\n            Bson update = inc(\"balance\", insertion.getPrice());\r\n\r\n            //update buyer balance\r\n            Document ret = userColl.findOneAndUpdate(filter, update);\r\n\r\n            //update seller balance\r\n            Bson filter2 = eq(\"username\", insertion.getSeller());\r\n            Bson update2 = inc(\"balance\", -(insertion.getPrice()));\r\n\r\n            Document ret3 = userColl.findOneAndUpdate(filter2, update2);\r\n\r\n            insertionColl.insertOne(Insertion.toDocument(insertion));\r\n\r\n            return \"OK\";\r\n\r\n        };\r\n        return executeTransaction(clientSession, txnFunc);\r\n\r\n    }\r\n\r\n    private boolean executeTransaction(ClientSession clientSession, TransactionBody<String> txnFunc) {\r\n\r\n        String message = \"\";\r\n\r\n        message = clientSession.withTransaction(txnFunc);\r\n\r\n        System.out.println(message);\r\n\r\n        return message.equals(\"OK\");\r\n    }\r\n\r\n    public boolean updateNumInterested(String insertion_id, int i) {\r\n\r\n        Bson filter = eq(\"_id\", new ObjectId(insertion_id));\r\n        Bson update = inc(\"interested\", i);\r\n        try {\r\n            db.getCollection(\"insertion\").findOneAndUpdate(filter, update);\r\n            return true;\r\n        }catch(MongoException me){\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public void updateNumView(String uniq_id) {\r\n\r\n        Bson filter = eq(\"_id\", new ObjectId(uniq_id));\r\n        Bson update = inc(\"views\", 1);\r\n\r\n        db.getCollection(\"insertion\").findOneAndUpdate(filter, update);\r\n\r\n    }\r\n\r\n    /* ********* ADMIN SECTION ********* */\r\n\r\n    public Document verifyUserInDB(String username, boolean choice) {\r\n\r\n        Document user;\r\n\r\n        if (choice)\r\n            user = userColl.find(eq(\"username\", username)).first();\r\n        else\r\n            user = userColl.find(eq(\"name\", username)).first();\r\n\r\n        return user;\r\n    }\r\n\r\n    public Document verifyInsertionInDB(String id, boolean choice) {\r\n\r\n        Document insertion;\r\n\r\n        if (choice)\r\n            insertion = insertionColl.find(eq(\"_id\", new ObjectId(id))).first();\r\n        else\r\n            insertion = insertionColl.find(eq(\"seller\", id)).first();\r\n\r\n        return insertion;\r\n    }\r\n\r\n    private ArrayList<Document> getNumOfOrdersByUserSold() {\r\n\r\n        ArrayList<Document> array = new ArrayList<>();\r\n        ArrayList<Document> user = new ArrayList<>();\r\n\r\n\r\n        cursor = userColl.find().iterator();\r\n\r\n        while(cursor.hasNext())\r\n            user.add(cursor.next());\r\n\r\n        for (int i = 0; i < user.size(); i++) {\r\n\r\n            Bson match = match(eq(\"username\", user.get(i).getString(\"username\")));\r\n            Bson match1 = match(exists(\"sold\"));\r\n            Bson projection = new Document(\"$size\", \"$sold\");\r\n            Bson project = Aggregates.project(new Document(\"count\", projection).append(\"username\",\"$username\"));\r\n            AggregateIterable<Document> aggr = userColl.aggregate(\r\n                    Arrays.asList(\r\n                            match, match1, project\r\n                    )\r\n            );\r\n            System.out.println(\"USER: \" + aggr.first());\r\n\r\n            if(aggr.first() != null)\r\n                array.add(aggr.first());\r\n        }\r\n\r\n\r\n        /*\r\n        DBObject exists = new BasicDBObject(\"$exists\", \"$sold\");\r\n\r\n        //Document query = new Document(\"sold\", new BasicDBObject(\"$exists\", true));\r\n        //System.out.println(\"USER_SOLD: \" + userSold);\r\n\r\n\r\n        Document soldDoc = new Document(\"$ifNull\", Arrays.asList(\"$sold\", \"true\"));\r\n        Document projectDoc = new Document(\"$project\" , new Document(\"sold_doc\", soldDoc).append(\"username\", 1));\r\n        Document groupDoc = new Document(\"$group\", new Document(\"_id\", \"$id\").append(\"details\", new Document(\"$push\", concat)));\r\n        Document ne = new Document(\"$ne\", new Document(\"sold_doc\", \"true\"));\r\n        Document matchDoc = new Document(\"$ne\", ne);\r\n\r\n        Bson projection = new Document(\"$size\", \"$sold\");\r\n        //Bson group = group(\"username\", Accumulators.sum(\"count\", projection\r\n        Bson group = Aggregates.project(new Document(\"count\", projection).append(\"username\",\"$username\"));\r\n        //Bson project = project(fields(excludeId(), include(\"count\"), computed(\"username\", \"$_id\")));\r\n        //Bson sort = sort(descending(\"count\"));\r\n\r\n        Bson unwind = unwind(\"sold\");\r\n        Bson group = group(\"\", Accumulators.sum(\"count\", 1));\r\n        Bson sort = sort(descending(\"count\"));\r\n\r\n        username    count\r\n        A           3\r\n        B           5\r\n\r\n        sort()\r\n\r\n        B\r\n        A\r\n\r\n      */\r\n        return array;\r\n\r\n    }\r\n\r\n    private ArrayList<Document> getNumOfOrders(int k) {\r\n\r\n\r\n        //}\r\n        ArrayList<Document> array = new ArrayList<>();\r\n        ArrayList<Document> user = new ArrayList<>();\r\n\r\n\r\n        //cursor = userColl.find().iterator();\r\n\r\n        //while(cursor.hasNext())\r\n        //user.add(cursor.next());\r\n\r\n        //for (int i = 0; i < user.size(); i++) {\r\n\r\n        //Bson match = match(eq(\"username\", user.get(i).getString(\"username\")));\r\n        Bson match1 = match(exists(\"purchased.0\"));\r\n        Bson projection = new Document(\"$size\", \"$purchased\");\r\n        Bson project = Aggregates.project(new Document(\"count\", projection).append(\"username\",\"$username\"));\r\n        Bson sort = sort(descending(\"count\"));\r\n        Bson limit = limit(k);\r\n        AggregateIterable<Document> aggr = userColl.aggregate(\r\n                Arrays.asList(\r\n                        match1, project, sort, limit\r\n                )\r\n        );\r\n\r\n        for(Document d : aggr)\r\n            System.out.println(\"USER: \" + d.getString(\"username\") + \" \" + d.getInteger(\"count\"));\r\n\r\n        /*\r\n        DBObject exists = new BasicDBObject(\"$exists\", \"$sold\");\r\n\r\n        //Document query = new Document(\"sold\", new BasicDBObject(\"$exists\", true));\r\n        //System.out.println(\"USER_SOLD: \" + userSold);\r\n\r\n\r\n        Document soldDoc = new Document(\"$ifNull\", Arrays.asList(\"$sold\", \"true\"));\r\n        Document projectDoc = new Document(\"$project\" , new Document(\"sold_doc\", soldDoc).append(\"username\", 1));\r\n        Document groupDoc = new Document(\"$group\", new Document(\"_id\", \"$id\").append(\"details\", new Document(\"$push\", concat)));\r\n        Document ne = new Document(\"$ne\", new Document(\"sold_doc\", \"true\"));\r\n        Document matchDoc = new Document(\"$ne\", ne);\r\n\r\n        Bson projection = new Document(\"$size\", \"$sold\");\r\n        //Bson group = group(\"username\", Accumulators.sum(\"count\", projection\r\n        Bson group = Aggregates.project(new Document(\"count\", projection).append(\"username\",\"$username\"));\r\n        //Bson project = project(fields(excludeId(), include(\"count\"), computed(\"username\", \"$_id\")));\r\n        //Bson sort = sort(descending(\"count\"));\r\n\r\n        Bson unwind = unwind(\"sold\");\r\n        Bson group = group(\"\", Accumulators.sum(\"count\", 1));\r\n        Bson sort = sort(descending(\"count\"));\r\n\r\n        username    count\r\n        A           3\r\n        B           5\r\n\r\n        sort()\r\n\r\n        B\r\n        A\r\n\r\n      */\r\n        return array;\r\n\r\n    }\r\n\r\n    public ArrayList<Document> findMostActiveUsersSellers(int k, boolean choice) {\r\n        // true = select the top k users with more purchased orders\r\n        // false = select the top k with more purchased orders\r\n\r\n        ArrayList<Document> orders = new ArrayList<>();\r\n        AggregateIterable<Document> aggr;\r\n        if(choice) {\r\n\r\n            Bson match = match(exists(\"purchased.0\"));\r\n            Bson projection = new Document(\"$size\", \"$purchased\");\r\n            Bson project = Aggregates.project(new Document(\"count\", projection).append(\"username\", \"$username\"));\r\n            Bson sort = sort(descending(\"count\"));\r\n            Bson limit = limit(k);\r\n            aggr = userColl.aggregate(\r\n                    Arrays.asList(\r\n                            match, project, sort, limit\r\n                    )\r\n            );\r\n        }\r\n        else\r\n        {\r\n            Bson match = match(exists(\"sold.0\"));\r\n            Bson projection = new Document(\"$size\", \"$sold\");\r\n            Bson project = Aggregates.project(new Document(\"count\", projection).append(\"username\", \"$username\"));\r\n            Bson sort = sort(descending(\"count\"));\r\n            Bson limit = limit(k);\r\n            aggr = userColl.aggregate(\r\n                    Arrays.asList(\r\n                            match, project, sort, limit\r\n                    )\r\n            );\r\n        }\r\n        for (Document d : aggr)\r\n            orders.add(d);\r\n\r\n        return orders;\r\n    }\r\n\r\n    public ArrayList<Document> findTopKRatedUser(int k, String country) {\r\n\r\n        ArrayList<Document> array = new ArrayList<>();\r\n\r\n        Bson limit = limit(k);\r\n        Bson project = project(fields(excludeId(), include(\"username\"), include(\"rating\")));\r\n        AggregateIterable<Document> aggr  = userColl.aggregate(\r\n                Arrays.asList(\r\n                        Aggregates.match(Filters.eq(\"country\", country)),\r\n                        Aggregates.sort(descending(\"rating\")),\r\n                        project,\r\n                        limit\r\n                )\r\n        );\r\n\r\n        for (Document document : aggr) {\r\n\r\n            //document.append(\"name\", document.getString(\"name\"));\r\n            //document.append(\"rating\", document.getDouble(\"rating\"));\r\n            array.add(document);\r\n        }\r\n        return array;\r\n    }\r\n\r\n    public ArrayList<Document> findTopKInterestingInsertion(int k, String category) {\r\n\r\n        ArrayList<Document> array = new ArrayList<>();\r\n\r\n        Bson limit = limit(k);\r\n        AggregateIterable<Document> aggr = insertionColl.aggregate(\r\n                Arrays.asList(\r\n                        Aggregates.match(Filters.eq(\"category\", category)),\r\n                        Aggregates.sort(descending(\"interested\")),\r\n                        limit\r\n                )\r\n        );\r\n\r\n        for (Document document : aggr)\r\n            array.add(document);\r\n\r\n        return array;\r\n    }\r\n\r\n    public ArrayList<Document> findTopKViewedInsertion(int k, String category) {\r\n\r\n        ArrayList<Document> array = new ArrayList<>();\r\n\r\n        Bson limit = limit(k);\r\n        AggregateIterable<Document> aggr  = insertionColl.aggregate(\r\n                Arrays.asList(\r\n                        Aggregates.match(Filters.eq(\"category\", category)),\r\n                        Aggregates.sort(descending(\"viewed\")),\r\n                        limit\r\n                )\r\n        );\r\n\r\n        for (Document document : aggr)\r\n            array.add(document);\r\n\r\n        return array;\r\n    }\r\n\r\n    public void suspendUser(String username) {\r\n\r\n        Document query = new Document().append(\"username\",  username);\r\n        Bson updates = Updates.combine(\r\n                Updates.set(\"suspended\", true));\r\n                UpdateOptions options = new UpdateOptions().upsert(true);\r\n\r\n        try {\r\n            UpdateResult result = userColl.updateOne(query, updates, options);\r\n            System.out.println(\"Modified document count: \" + result.getModifiedCount());\r\n            System.out.println(\"Upserted id: \" + result.getUpsertedId()); // only contains a value when an upsert is performed\r\n        }catch (MongoException me) {\r\n            System.err.println(\"Unable to update due to an error: \" + me);\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    public void unsuspendUser(String username) {\r\n\r\n        Document query = new Document().append(\"username\",  username);\r\n\r\n        Bson updates = Updates.combine(\r\n                Updates.set(\"suspended\", false));\r\n                UpdateOptions options = new UpdateOptions().upsert(true);\r\n\r\n        try {\r\n            UpdateResult result = userColl.updateOne(query, updates, options);\r\n            System.out.println(\"Modified document count: \" + result.getModifiedCount());\r\n            System.out.println(\"Upserted id: \" + result.getUpsertedId()); // only contains a value when an upsert is performed\r\n        } catch (MongoException me) {\r\n            System.err.println(\"Unable to update due to an error: \" + me);\r\n        }\r\n    }\r\n\r\n    public Insertion findInsertionDetails(String id) {\r\n\r\n        Insertion ins = new Insertion();\r\n        Document insertion = insertionColl.find(eq(\"_id\", new ObjectId(id))).first();\r\n\r\n        ins.setCategory(insertion.getString(\"category\"));\r\n        ins.setPrice(insertion.getDouble(\"price\"));\r\n        ins.setViews(insertion.getInteger(\"views\"));\r\n\r\n        return ins;\r\n    }\r\n\r\n    public ArrayList<Insertion> findMultipleInsertionDetails(String seller) {\r\n\r\n        ArrayList<Insertion> array = new ArrayList<>();\r\n\r\n        AggregateIterable<Document> aggr  = insertionColl.aggregate(\r\n                Arrays.asList(\r\n                        Aggregates.match(Filters.eq(\"seller\", seller))\r\n                )\r\n        );\r\n\r\n        for (Document document : aggr) {\r\n            Insertion ins = new Insertion();\r\n            ins.setCategory(document.getString(\"category\"));\r\n            ins.setPrice(document.getDouble(\"price\"));\r\n            ins.setViews(document.getInteger(\"views\"));\r\n            ins.setId(document.get(\"uniq_id\").toString());\r\n            ins.setImage_url(document.getString(\"image_url\"));\r\n            array.add(ins);\r\n        }\r\n        return array;\r\n    }\r\n\r\n    public ArrayList<Insertion> findInsertionDetailsNeo4J(ArrayList<String> followed_ins)  {\r\n\r\n        Insertion ins;\r\n        ArrayList<Insertion> insertions = new ArrayList<Insertion>();\r\n\r\n        for (String followed_in : followed_ins) {\r\n            Document insertion = insertionColl.find(eq(\"_id\", new ObjectId(followed_in))).first();\r\n\r\n            ins = new Insertion();\r\n            ins.setCategory(insertion.getString(\"category\"));\r\n            ins.setPrice(insertion.getDouble(\"price\"));\r\n            ins.setImage_url(insertion.getString(\"image_url\"));\r\n            ins.setViews(insertion.getInteger(\"views\"));\r\n            ins.setSeller(insertion.getString(\"seller\"));\r\n            ins.setId(insertion.get(\"_id\").toString());\r\n\r\n            insertions.add(ins);\r\n        }\r\n        return insertions;\r\n    }\r\n\r\n    public boolean findByInsertionId (String id) {\r\n\r\n        cursor = insertionColl.find(eq(\"_id\", new ObjectId(id))).iterator();\r\n        return cursor.hasNext();\r\n    }\r\n\r\n    public boolean addInsertion(Insertion i) {\r\n\r\n        Document ins = Insertion.toDocument(i);\r\n        insertionColl.insertOne(ins);\r\n        return true;\r\n\r\n    }\r\n\r\n    public void addReview(Review rev) {\r\n\r\n        Document review = new Document()\r\n                .append(\"timestamp\", rev.getTimestamp())\r\n                .append(\"reviewer\", rev.getReviewer())\r\n                .append(\"title\", rev.getTitle())\r\n                .append(\"text\", rev.getText())\r\n                .append(\"rating\", rev.getRating());\r\n\r\n        System.out.println(\"REVIEW: \" + review);\r\n        BasicDBObject query = new BasicDBObject();\r\n        query.put(\"username\", rev.getSeller());\r\n\r\n        BasicDBObject push_data = new BasicDBObject(\"$push\", new BasicDBObject(\"reviews\", review));\r\n\r\n        userColl.findOneAndUpdate(query, push_data);\r\n    }\r\n\r\n    public void updateSellerRating(String seller) {\r\n\r\n        Document d = userColl.find(eq(\"username\", seller)).first();\r\n        List<Document> list;\r\n        list = d.getList(\"reviews\", Document.class);\r\n\r\n        Double avg;\r\n        int sum = 0;\r\n\r\n        for (Document document : list) {\r\n            sum += document.getInteger(\"rating\");\r\n        }\r\n\r\n        avg = (double) sum / (double) list.size();\r\n\r\n        BasicDBObject newDocument = new BasicDBObject();\r\n        newDocument.put(\"rating\", avg);\r\n        // {$set: {\"rating\": avg}}\r\n        BasicDBObject updateObject = new BasicDBObject();\r\n        updateObject.put(\"$set\", newDocument);\r\n        // condition (where field \"reviews\" exists)\r\n        BasicDBObject query = new BasicDBObject();\r\n        query.put(\"username\", d.getString(\"username\"));\r\n\r\n        userColl.updateOne(query, updateObject);\r\n    }\r\n\r\n    public void setInsertionReviewed(String timestamp, Document up) {\r\n\r\n        /*List<Bson> filters = new ArrayList<>();\r\n        //find user\r\n        filters.add(Filters.eq(\"username\", Session.getLogUser().getUsername()));\r\n        //loop purchased to find timestamp\r\n        filters.add(Filters.eq(\"purchased.timestamp\", timestamp));\r\n\r\n        userColl.findOneAndReplace(Filters.and(filters), up);\r\n*/\r\n        BasicDBObject query = new BasicDBObject();\r\n        query.put(\"username\",Session.getLogUser().getUsername());\r\n        query.put(\"purchased.timestamp\", timestamp);\r\n        BasicDBObject update = new BasicDBObject(\"$set\", new BasicDBObject(\"purchased.$.reviewed\", true));\r\n        userColl.findOneAndUpdate(query, update);\r\n        //userColl.findOneAndUpdate(query, set);*/\r\n    }\r\n\r\n    /* ********** BALANCE SECTION ********** */\r\n\r\n    public void addFundsToWallet(String username, String id_code) {\r\n\r\n        Document code = codeColl.find(eq(\"code\", id_code)).first();\r\n\r\n        if (code == null || Objects.equals(code.getString(\"assigned\"), \"T\")) {\r\n            Utility.infoBox(\"The code that you have inserted is not valid.\", \"Error\", \"Code doesn't exist!\");\r\n            return;\r\n        }\r\n\r\n        double credit = code.getInteger(\"credit\");\r\n\r\n        Document queryUser = new Document().append(\"username\",  username);\r\n        Document queryAdmin = new Document().append(\"code\",  id_code);\r\n\r\n        Document user = userColl.find(eq(\"username\", username)).first();\r\n\r\n        double new_balance = user.getDouble(\"balance\") + credit;\r\n\r\n        Bson updatesAdmin = Updates.combine(\r\n                Updates.set(\"assigned\", \"T\")\r\n        );\r\n\r\n        Bson updatesUser = Updates.combine(\r\n                Updates.set(\"balance\", new_balance)\r\n        );\r\n\r\n        UpdateOptions options = new UpdateOptions().upsert(true);\r\n\r\n        try {\r\n            UpdateResult resultUser = userColl.updateOne(queryUser, updatesUser, options);\r\n            UpdateResult resultAdmin = codeColl.updateOne(queryAdmin, updatesAdmin, options);\r\n            System.out.println(\"Modified document count: \" + resultUser.getModifiedCount());\r\n            System.out.println(\"Upserted id: \" + resultUser.getUpsertedId()); // only contains a value when an upsert is performed\r\n            System.out.println(\"Modified document count: \" + resultAdmin.getModifiedCount());\r\n            System.out.println(\"Upserted id: \" + resultAdmin.getUpsertedId()); // only contains a value when an upsert is performed\r\n        } catch (MongoException me) {\r\n            System.err.println(\"Unable to update due to an error: \" + me);\r\n            return;\r\n        }\r\n\r\n        Utility.infoBox(\"Deposit of \" + code.getInteger(\"credit\") + \"€ euros successfully executed\", \"Success\", \"Deposit done!\");\r\n        deleteCode(code.getString(\"_id\"));\r\n    }\r\n\r\n    public double updateBalance(String username) {\r\n\r\n        Document user = userColl.find(eq(\"username\", username)).first();\r\n\r\n        double balance = user.getDouble(\"balance\");\r\n\r\n        System.out.println(\"NEW BALANCE: \" + String.format(\"%.2f\", balance));\r\n\r\n        return balance;\r\n    }\r\n\r\n    public List<Document> getReviewsByUser(String username) {\r\n\r\n        List<Document> list = null;\r\n\r\n        BasicDBObject whereQuery = new BasicDBObject();\r\n        whereQuery.put(\"username\", username);\r\n\r\n        try (MongoCursor<Document> cursor = userColl.find(whereQuery).iterator()) {\r\n            while (cursor.hasNext()) {\r\n                Document doc = cursor.next();\r\n                if (doc.get(\"reviews\") == null)\r\n                    return new ArrayList<>();\r\n                list = (List<Document>) doc.get(\"reviews\");\r\n\r\n                Document d = list.get(0);\r\n                System.out.println(d.getString(\"reviewer\")); // display specific field\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n\r\n    public boolean deleteInsertionMongo(String id) {\r\n\r\n        Bson query = eq(\"_id\", new ObjectId(id));\r\n\r\n        try {\r\n            DeleteResult result = insertionColl.deleteOne(query);\r\n            return (result.getDeletedCount() == 1);\r\n        } catch (MongoException me) {\r\n            System.err.println(\"Unable to delete due to an error: \" + me);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private void deleteCode(String id) {\r\n\r\n        Bson query = eq(\"_id\", id);\r\n\r\n        try {\r\n            DeleteResult result = codeColl.deleteOne(query);\r\n            System.out.println(\"Deleted document count: \" + result.getDeletedCount());\r\n        } catch (MongoException me) {\r\n            System.err.println(\"Unable to delete due to an error: \" + me);\r\n        }\r\n\r\n    }\r\n\r\n    public ArrayList<Document> findTopRatedUsersByCountry(String country) {\r\n\r\n        ArrayList<Document> list = new ArrayList<>();\r\n\r\n        BasicDBObject whereQuery = new BasicDBObject();\r\n        whereQuery.put(\"country\", country);\r\n\r\n        try (MongoCursor<Document> cursor = userColl.find(whereQuery).iterator()) {\r\n            while (cursor.hasNext()) {\r\n                Document doc = cursor.next();\r\n                if (doc.get(\"rating\") == null)\r\n                    continue;\r\n                list.add(doc);\r\n            }\r\n        }\r\n        return list;\r\n\r\n    }\r\n\r\n    public void deleteUserMongo(String username) {\r\n\r\n        Bson query = eq(\"username\", username);\r\n\r\n        try {\r\n            userColl.deleteOne(query);\r\n        } catch (MongoException me) {\r\n            System.err.println(\"Unable to delete due to an error: \" + me);\r\n        }\r\n    }\r\n\r\n    public void submitNewProfileImg(String url, String user) {\r\n\r\n        Document queryUser = new Document().append(\"username\",  user);\r\n\r\n        Bson updatesUser = Updates.combine(\r\n                Updates.set(\"img_profile\", url)\r\n        );\r\n\r\n        UpdateOptions options = new UpdateOptions().upsert(true);\r\n\r\n        try {\r\n            UpdateResult resultUser = userColl.updateOne(queryUser, updatesUser, options);\r\n            System.out.println(\"Modified document count: \" + resultUser.getModifiedCount());\r\n            System.out.println(\"Upserted id: \" + resultUser.getUpsertedId()); // only contains a value when an upsert is performed\r\n        } catch (MongoException me) {\r\n            System.err.println(\"Unable to update due to an error: \" + me);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/unipi/dii/largescale/secondchance/connection/ConnectionMongoDB.java b/src/main/java/it/unipi/dii/largescale/secondchance/connection/ConnectionMongoDB.java
--- a/src/main/java/it/unipi/dii/largescale/secondchance/connection/ConnectionMongoDB.java	(revision 89fe89836fc89b7929b9b4ec2cd4ce78c55c77e0)
+++ b/src/main/java/it/unipi/dii/largescale/secondchance/connection/ConnectionMongoDB.java	(date 1644328817780)
@@ -650,11 +650,10 @@
     }
 
     public ArrayList<Document> findMostActiveUsersSellers(int k, boolean choice) {
-        // true = select the top k users with more purchased orders
-        // false = select the top k with more purchased orders
 
         ArrayList<Document> orders = new ArrayList<>();
         AggregateIterable<Document> aggr;
+        // true = select the top k users with more purchased orders
         if(choice) {
 
             Bson match = match(exists("purchased.0"));
@@ -668,7 +667,7 @@
                     )
             );
         }
-        else
+        else        // false = select the top k with more purchased orders
         {
             Bson match = match(exists("sold.0"));
             Bson projection = new Document("$size", "$sold");
@@ -738,7 +737,7 @@
         AggregateIterable<Document> aggr  = insertionColl.aggregate(
                 Arrays.asList(
                         Aggregates.match(Filters.eq("category", category)),
-                        Aggregates.sort(descending("viewed")),
+                        Aggregates.sort(descending("views")),
                         limit
                 )
         );
Index: src/main/java/it/unipi/dii/largescale/secondchance/controller/StatsController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.it.unipi.dii.largescale.secondchance.controller;\r\n\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.fxml.FXML;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.chart.PieChart;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.stage.Stage;\r\nimport main.java.it.unipi.dii.largescale.secondchance.connection.ConnectionMongoDB;\r\nimport main.java.it.unipi.dii.largescale.secondchance.utils.Utility;\r\nimport org.bson.Document;\r\n\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\nimport java.lang.reflect.Array;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Objects;\r\n\r\npublic class StatsController {\r\n\r\n    private final String[] countries = new String[]{\"Italy\", \"Canada\", \"Spain\", \"Austria\", \"Germany\", \"France\", \"Brazil\", \"Netherlands\", \"Poland\", \"Ireland\", \"United Kingdom (Great Britain)\"};\r\n    private final String[] categories = new String[]{\"clothing\",\"accessories\", \"bags\",\"beauty\", \"house\", \"jewelry\", \"kids\", \"shoes\"};\r\n\r\n    @FXML private RadioButton rBUsers;\r\n    @FXML private RadioButton rBSellers;\r\n    @FXML private RadioButton rBTopKUsers;\r\n    @FXML private RadioButton rBTopKInterestingIns;\r\n    @FXML private RadioButton rBTopKViewedIns;\r\n\r\n    @FXML private TextField boxKNumber;\r\n    @FXML private TextField txtFieldCountry;\r\n    @FXML private TextField txtFieldCategory;\r\n\r\n    @FXML private Button elaboraButton;\r\n\r\n    public void initialize(){\r\n\r\n        Tooltip countries = new Tooltip(\"Italy, Canada, Spain, Austria, Germany, France, Brazil, Netherlands, Poland, Ireland, United Kingdom\");\r\n        Tooltip categories = new Tooltip(\"clothing,accessories, bags, beauty, house, jewelry, kids, shoes\");\r\n\r\n        elaboraButton.setDisable(true);\r\n        txtFieldCountry.setEditable(false);\r\n        txtFieldCountry.setMouseTransparent(true);\r\n        txtFieldCategory.setEditable(false);\r\n        txtFieldCategory.setMouseTransparent(true);\r\n\r\n        txtFieldCountry.setTooltip(countries);\r\n        txtFieldCategory.setTooltip(categories);\r\n\r\n        rBTopKViewedIns.selectedProperty().addListener((observable, oldValue, newValue) -> {\r\n               System.out.println(\"radio button changed from \" + oldValue + \" to \" + newValue);\r\n\r\n               txtFieldCountry.setText(\"\");\r\n               txtFieldCountry.setEditable(false);\r\n               txtFieldCountry.setMouseTransparent(true);\r\n\r\n               elaboraButton.setDisable(true);\r\n\r\n               if (!txtFieldCategory.isEditable()) {\r\n                   txtFieldCategory.setEditable(true);\r\n                   txtFieldCategory.setMouseTransparent(false);\r\n               }\r\n        });\r\n\r\n       rBTopKInterestingIns.selectedProperty().addListener((observable, oldValue, newValue) -> {\r\n           System.out.println(\"radio button changed from \" + oldValue + \" to \" + newValue);\r\n\r\n           txtFieldCountry.setText(\"\");\r\n           txtFieldCountry.setEditable(false);\r\n           txtFieldCountry.setMouseTransparent(true);\r\n\r\n           elaboraButton.setDisable(true);\r\n\r\n           if (!txtFieldCategory.isEditable()) {\r\n               txtFieldCategory.setEditable(true);\r\n               txtFieldCategory.setMouseTransparent(false);\r\n           }\r\n       });\r\n\r\n        rBTopKUsers.selectedProperty().addListener((observable, oldValue, newValue) -> {\r\n            System.out.println(\"radio button changed from \" + oldValue + \" to \" + newValue);\r\n\r\n            txtFieldCategory.setText(\"\");\r\n            txtFieldCategory.setEditable(false);\r\n            txtFieldCategory.setMouseTransparent(true);\r\n\r\n            elaboraButton.setDisable(true);\r\n\r\n            if (txtFieldCategory.isEditable()) {\r\n                txtFieldCategory.setEditable(false);\r\n                txtFieldCategory.setMouseTransparent(true);\r\n            }\r\n\r\n            txtFieldCountry.setEditable(true);\r\n            txtFieldCountry.setMouseTransparent(false);\r\n\r\n        });\r\n\r\n        rBSellers.selectedProperty().addListener((observable, oldValue, newValue) -> {\r\n            System.out.println(\"radio button changed from \" + oldValue + \" to \" + newValue);\r\n\r\n            txtFieldCountry.setText(\"\");\r\n            txtFieldCategory.setText(\"\");\r\n\r\n            txtFieldCountry.setEditable(false);\r\n            txtFieldCountry.setMouseTransparent(true);\r\n\r\n            txtFieldCategory.setEditable(false);\r\n            txtFieldCategory.setMouseTransparent(true);\r\n\r\n            elaboraButton.setDisable(false);\r\n        });\r\n\r\n        rBUsers.selectedProperty().addListener((observable, oldValue, newValue) -> {\r\n            System.out.println(\"radio button changed from \" + oldValue + \" to \" + newValue);\r\n\r\n            txtFieldCountry.setText(\"\");\r\n            txtFieldCategory.setText(\"\");\r\n\r\n            txtFieldCountry.setEditable(false);\r\n            txtFieldCountry.setMouseTransparent(true);\r\n\r\n            txtFieldCategory.setEditable(false);\r\n            txtFieldCategory.setMouseTransparent(true);\r\n\r\n            elaboraButton.setDisable(false);\r\n        });\r\n\r\n        txtFieldCategory.textProperty().addListener((observable, oldValue, newValue) -> {\r\n            System.out.println(\"text changed from \" + oldValue + \" to \" + newValue);\r\n\r\n            elaboraButton.setDisable(Objects.equals(newValue, \"\"));\r\n        });\r\n\r\n        txtFieldCountry.textProperty().addListener((observable, oldValue, newValue) -> {\r\n            Utility.printTerminal(\"text changed from \" + oldValue + \" to \" + newValue);\r\n\r\n            elaboraButton.setDisable(Objects.equals(newValue, \"\"));\r\n        });\r\n    }\r\n\r\n    public void redirectToStatFunction() throws IOException {\r\n\r\n        int k;\r\n        // Section Most\r\n\r\n        if (Objects.equals(boxKNumber.getText(), \"\")) {\r\n            Utility.infoBox(\"Please insert a valid K number\", \"Error\", \"Empty box!\");\r\n            return;\r\n        }\r\n\r\n        k = Integer.parseInt(boxKNumber.getText());\r\n\r\n        if (rBSellers.isSelected())\r\n            showMostActiveUsersSellers(ConnectionMongoDB.connMongo,false, k);\r\n\r\n        if (rBUsers.isSelected())\r\n            showMostActiveUsersSellers(ConnectionMongoDB.connMongo, true, k);\r\n\r\n        // Section K\r\n\r\n        if (rBTopKUsers.isSelected())\r\n            showTopKRatedUser(ConnectionMongoDB.connMongo, k);\r\n\r\n        if (rBTopKInterestingIns.isSelected())\r\n            showTopKInterestingInsertion(ConnectionMongoDB.connMongo, k);\r\n\r\n        if (rBTopKViewedIns.isSelected())\r\n            showTopKViewedInsertion(ConnectionMongoDB.connMongo, k);\r\n\r\n    }\r\n\r\n    public void showMostActiveUsersSellers(ConnectionMongoDB conn, boolean choice, int k) throws IOException{\r\n\r\n        ArrayList<Document> array = conn.findMostActiveUsersSellers(k, choice);\r\n        StackPane secondaryLayout = new StackPane();\r\n\r\n        ListView<String> list = new ListView<>();\r\n        ObservableList items = FXCollections.observableArrayList();\r\n\r\n        for (int i = 0; i < array.size(); i++) {\r\n\r\n            String str = array.get(i).getString(\"username\") + \":    \" + array.get(i).getInteger(\"count\").toString();\r\n            items.add(str);\r\n        }\r\n\r\n        list.setItems(items);\r\n\r\n        try( FileInputStream imageStream = new FileInputStream(\"target/classes/img/secondchance.png\") ) {\r\n            Image image = new Image(imageStream);\r\n            Scene secondScene = new Scene(secondaryLayout, 920, 400);\r\n\r\n            // New window (Stage)\r\n            Stage newWindow = new Stage();\r\n            newWindow.setTitle(\"Top \" + k);\r\n            newWindow.getIcons().add(image);\r\n            secondaryLayout.getChildren().add(list);\r\n            newWindow.setScene(secondScene);\r\n\r\n            newWindow.show();\r\n        }\r\n    }\r\n\r\n    public void showTopKRatedUser(ConnectionMongoDB conn, int k) throws IOException {\r\n\r\n        ArrayList<Document> array;\r\n        String country = txtFieldCountry.getText();\r\n\r\n        if(!Arrays.asList(countries).contains(country)) {\r\n            Utility.infoBox(\"Please insert a valid country\", \"Error\", \"Country not found!\");\r\n            txtFieldCountry.setText(\"\");\r\n            return;\r\n        }\r\n\r\n        array = conn.findTopRatedUsersByCountry(country);\r\n        int arrayRatings[] = new int[6];\r\n\r\n        for (int i = 0; i < array.size()-1; i++) {\r\n\r\n            int rating = array.get(i).getDouble(\"rating\").intValue();\r\n            arrayRatings[rating]++;\r\n        }\r\n\r\n        ObservableList<PieChart.Data> pieChartData =\r\n                FXCollections.observableArrayList(\r\n                        new PieChart.Data(\"Rating 5\", arrayRatings[5]),\r\n                        new PieChart.Data(\"Rating 4\", arrayRatings[4]),\r\n                        new PieChart.Data(\"Rating 3\", arrayRatings[3]),\r\n                        new PieChart.Data(\"Rating 2\", arrayRatings[2]),\r\n                        new PieChart.Data(\"Rating 1\", arrayRatings[1]));\r\n\r\n        final PieChart chart = new PieChart(pieChartData);\r\n        chart.setTitle(\"Top K Rated User in \" + country);\r\n\r\n        try( FileInputStream imageStream = new FileInputStream(\"target/classes/img/secondchance.png\") ) {\r\n            Image image = new Image(imageStream);\r\n            Scene scene = new Scene(new Group());\r\n            // New window (Stage)\r\n            ((Group) scene.getRoot()).getChildren().add(chart);\r\n            Stage newWindow = new Stage();\r\n            newWindow.getIcons().add(image);\r\n            newWindow.setTitle(\"Top \" + k);\r\n            newWindow.setScene(scene);\r\n            newWindow.show();\r\n        }\r\n    }\r\n\r\n    public void showTopKInterestingInsertion(ConnectionMongoDB conn, int k) throws IOException {\r\n\r\n        ArrayList<Document> array;\r\n        String category = txtFieldCategory.getText();\r\n\r\n        if(!Arrays.asList(categories).contains(category)) {\r\n            Utility.infoBox(\"Please insert a valid category\", \"Error\", \"Category not found!\");\r\n            return;\r\n        }\r\n\r\n        array = conn.findTopKInterestingInsertion(k, category);\r\n\r\n        StackPane secondaryLayout = new StackPane();\r\n\r\n        ListView<String> list = new ListView<String>();\r\n        ObservableList items = FXCollections.observableArrayList();\r\n\r\n        for (int i=0; i < k; i++) {\r\n\r\n            String str = array.get(i).getString(\"description\") + \": \" + array.get(i).getInteger(\"interested\").toString();\r\n            items.add(str);\r\n        }\r\n\r\n        list.setItems(items);\r\n\r\n        try( FileInputStream imageStream = new FileInputStream(\"target/classes/img/secondchance.png\") ) {\r\n            Image image = new Image(imageStream);\r\n            Scene secondScene = new Scene(secondaryLayout, 1200, 800);\r\n\r\n            // New window (Stage)\r\n            Stage newWindow = new Stage();\r\n            newWindow.getIcons().add(image);\r\n            newWindow.setTitle(\"Top \" + k);\r\n            secondaryLayout.getChildren().add(list);\r\n            newWindow.setScene(secondScene);\r\n\r\n            newWindow.show();\r\n        }\r\n    }\r\n\r\n    public void showTopKViewedInsertion(ConnectionMongoDB conn, int k) throws IOException {\r\n\r\n        ArrayList<Document> array;\r\n\r\n        String category = txtFieldCategory.getText();\r\n\r\n        if(!Arrays.asList(categories).contains(category))\r\n            Utility.infoBox(\"Please insert a valid category\", \"Error\", \"Category not found!\");\r\n\r\n        array = conn.findTopKViewedInsertion(k, category);\r\n\r\n        StackPane secondaryLayout = new StackPane();\r\n\r\n        ListView<String> list = new ListView<String>();\r\n        ObservableList items = FXCollections.observableArrayList();\r\n\r\n        for (int i=0; i < k; i++) {\r\n\r\n            String str = array.get(i).getString(\"description\") + \": \" + array.get(i).getInteger(\"views\").toString();\r\n            items.add(str);\r\n        }\r\n\r\n        list.setItems(items);\r\n\r\n        try( FileInputStream imageStream = new FileInputStream(\"target/classes/img/secondchance.png\") ) {\r\n            Image image = new Image(imageStream);\r\n            Scene secondScene = new Scene(secondaryLayout, 1200, 800);\r\n\r\n            // New window (Stage)\r\n            Stage newWindow = new Stage();\r\n            newWindow.getIcons().add(image);\r\n            newWindow.setTitle(\"Top \" + k);\r\n            secondaryLayout.getChildren().add(list);\r\n            newWindow.setScene(secondScene);\r\n\r\n            newWindow.show();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/unipi/dii/largescale/secondchance/controller/StatsController.java b/src/main/java/it/unipi/dii/largescale/secondchance/controller/StatsController.java
--- a/src/main/java/it/unipi/dii/largescale/secondchance/controller/StatsController.java	(revision 89fe89836fc89b7929b9b4ec2cd4ce78c55c77e0)
+++ b/src/main/java/it/unipi/dii/largescale/secondchance/controller/StatsController.java	(date 1644328817740)
@@ -11,6 +11,7 @@
 import javafx.scene.layout.StackPane;
 import javafx.stage.Stage;
 import main.java.it.unipi.dii.largescale.secondchance.connection.ConnectionMongoDB;
+import main.java.it.unipi.dii.largescale.secondchance.connection.ConnectionNeo4jDB;
 import main.java.it.unipi.dii.largescale.secondchance.utils.Utility;
 import org.bson.Document;
 
@@ -25,6 +26,9 @@
 
     private final String[] countries = new String[]{"Italy", "Canada", "Spain", "Austria", "Germany", "France", "Brazil", "Netherlands", "Poland", "Ireland", "United Kingdom (Great Britain)"};
     private final String[] categories = new String[]{"clothing","accessories", "bags","beauty", "house", "jewelry", "kids", "shoes"};
+    public RadioButton followedUsers;
+    public RadioButton categoryInsertion;
+    public RadioButton postedCountry;
 
     @FXML private RadioButton rBUsers;
     @FXML private RadioButton rBSellers;
@@ -38,8 +42,12 @@
 
     @FXML private Button elaboraButton;
 
+    ConnectionNeo4jDB connNeo;
+
     public void initialize(){
 
+        connNeo = new ConnectionNeo4jDB();
+
         Tooltip countries = new Tooltip("Italy, Canada, Spain, Austria, Germany, France, Brazil, Netherlands, Poland, Ireland, United Kingdom");
         Tooltip categories = new Tooltip("clothing,accessories, bags, beauty, house, jewelry, kids, shoes");
 
@@ -130,6 +138,21 @@
 
             elaboraButton.setDisable(false);
         });
+
+        followedUsers.selectedProperty().addListener((observable, oldValue, newValue) -> {
+                    elaboraButton.setDisable(false);
+
+        });
+
+        categoryInsertion.selectedProperty().addListener((observable, oldValue, newValue) -> {
+                elaboraButton.setDisable(false);
+
+        });
+
+        postedCountry.selectedProperty().addListener((observable, oldValue, newValue) -> {
+            elaboraButton.setDisable(false);
+
+        });
 
         txtFieldCategory.textProperty().addListener((observable, oldValue, newValue) -> {
             System.out.println("text changed from " + oldValue + " to " + newValue);
@@ -149,6 +172,15 @@
         int k;
         // Section Most
 
+        if(categoryInsertion.isSelected()) {
+            showNumberInterestingForCategory();
+            return;
+        }
+        if(postedCountry.isSelected()) {
+            showNumberPostedForCountry();
+            return;
+        }
+
         if (Objects.equals(boxKNumber.getText(), "")) {
             Utility.infoBox("Please insert a valid K number", "Error", "Empty box!");
             return;
@@ -157,27 +189,139 @@
         k = Integer.parseInt(boxKNumber.getText());
 
         if (rBSellers.isSelected())
-            showMostActiveUsersSellers(ConnectionMongoDB.connMongo,false, k);
+            showMostActiveUsersSellers(false, k);
 
         if (rBUsers.isSelected())
-            showMostActiveUsersSellers(ConnectionMongoDB.connMongo, true, k);
+            showMostActiveUsersSellers(true, k);
+        if(followedUsers.isSelected())
+            showMostFollowedUsers(k);
 
         // Section K
 
         if (rBTopKUsers.isSelected())
-            showTopKRatedUser(ConnectionMongoDB.connMongo, k);
+            showTopKRatedUser(k);
 
         if (rBTopKInterestingIns.isSelected())
-            showTopKInterestingInsertion(ConnectionMongoDB.connMongo, k);
+            showTopKInterestingInsertion(k);
 
         if (rBTopKViewedIns.isSelected())
-            showTopKViewedInsertion(ConnectionMongoDB.connMongo, k);
+            showTopKViewedInsertion(k);
+
+    }
+
+    private void showNumberPostedForCountry() {
+
+        ArrayList<String> array = connNeo.findNumberPostedInsertionForCountry();
+
+        StackPane secondaryLayout = new StackPane();
+
+        ListView<String> list = new ListView<>();
+        ObservableList items = FXCollections.observableArrayList();
+
+        for (int i = 0; i < array.size(); i++) {
+
+            String str = array.get(i);
+            items.add(str);
+        }
+
+        list.setItems(items);
+
+        try( FileInputStream imageStream = new FileInputStream("target/classes/img/secondchance.png") ) {
+            Image image = new Image(imageStream);
+            Scene secondScene = new Scene(secondaryLayout, 920, 400);
+
+            // New window (Stage)
+            Stage newWindow = new Stage();
+            newWindow.setTitle("Countries ");
+            newWindow.getIcons().add(image);
+            secondaryLayout.getChildren().add(list);
+            newWindow.setScene(secondScene);
+
+            newWindow.show();
+        }catch(IOException e)
+        {
+            e.printStackTrace();
+        }
+
 
     }
 
-    public void showMostActiveUsersSellers(ConnectionMongoDB conn, boolean choice, int k) throws IOException{
+    private void showNumberInterestingForCategory() {
 
-        ArrayList<Document> array = conn.findMostActiveUsersSellers(k, choice);
+        ArrayList<String> array = connNeo.findNumberInterestingForCountry();
+
+        StackPane secondaryLayout = new StackPane();
+
+        ListView<String> list = new ListView<>();
+        ObservableList items = FXCollections.observableArrayList();
+
+        for (int i = 0; i < array.size(); i++) {
+
+            String str = array.get(i);
+            items.add(str);
+        }
+
+        list.setItems(items);
+
+        try( FileInputStream imageStream = new FileInputStream("target/classes/img/secondchance.png") ) {
+            Image image = new Image(imageStream);
+            Scene secondScene = new Scene(secondaryLayout, 920, 400);
+
+            // New window (Stage)
+            Stage newWindow = new Stage();
+            newWindow.setTitle("Categories ");
+            newWindow.getIcons().add(image);
+            secondaryLayout.getChildren().add(list);
+            newWindow.setScene(secondScene);
+
+            newWindow.show();
+        }catch(IOException e)
+        {
+            e.printStackTrace();
+        }
+
+
+    }
+
+    private void showMostFollowedUsers(int k){
+
+        ArrayList<String> array = connNeo.findMostFollowedUsers(k);
+        System.out.println("USER: " + array);
+        StackPane secondaryLayout = new StackPane();
+
+        ListView<String> list = new ListView<>();
+        ObservableList items = FXCollections.observableArrayList();
+
+        for (int i = 0; i < array.size(); i++) {
+
+            String str = array.get(i);
+            items.add(str);
+        }
+
+        list.setItems(items);
+
+        try( FileInputStream imageStream = new FileInputStream("target/classes/img/secondchance.png") ) {
+            Image image = new Image(imageStream);
+            Scene secondScene = new Scene(secondaryLayout, 920, 400);
+
+            // New window (Stage)
+            Stage newWindow = new Stage();
+            newWindow.setTitle("Top " + k);
+            newWindow.getIcons().add(image);
+            secondaryLayout.getChildren().add(list);
+            newWindow.setScene(secondScene);
+
+            newWindow.show();
+        }catch(IOException e)
+        {
+            e.printStackTrace();
+        }
+
+    }
+
+    public void showMostActiveUsersSellers(boolean choice, int k) {
+
+        ArrayList<Document> array = ConnectionMongoDB.connMongo.findMostActiveUsersSellers(k, choice);
         StackPane secondaryLayout = new StackPane();
 
         ListView<String> list = new ListView<>();
@@ -191,7 +335,7 @@
 
         list.setItems(items);
 
-        try( FileInputStream imageStream = new FileInputStream("target/classes/img/secondchance.png") ) {
+        try (FileInputStream imageStream = new FileInputStream("target/classes/img/secondchance.png")) {
             Image image = new Image(imageStream);
             Scene secondScene = new Scene(secondaryLayout, 920, 400);
 
@@ -203,24 +347,27 @@
             newWindow.setScene(secondScene);
 
             newWindow.show();
+        } catch (IOException e)
+        {
+            e.printStackTrace();
         }
     }
 
-    public void showTopKRatedUser(ConnectionMongoDB conn, int k) throws IOException {
+    public void showTopKRatedUser(int k) {
 
         ArrayList<Document> array;
         String country = txtFieldCountry.getText();
 
-        if(!Arrays.asList(countries).contains(country)) {
+        if (!Arrays.asList(countries).contains(country)) {
             Utility.infoBox("Please insert a valid country", "Error", "Country not found!");
             txtFieldCountry.setText("");
             return;
         }
 
-        array = conn.findTopRatedUsersByCountry(country);
+        array = ConnectionMongoDB.connMongo.findTopRatedUsersByCountry(country);
         int arrayRatings[] = new int[6];
 
-        for (int i = 0; i < array.size()-1; i++) {
+        for (int i = 0; i < array.size() - 1; i++) {
 
             int rating = array.get(i).getDouble("rating").intValue();
             arrayRatings[rating]++;
@@ -237,7 +384,7 @@
         final PieChart chart = new PieChart(pieChartData);
         chart.setTitle("Top K Rated User in " + country);
 
-        try( FileInputStream imageStream = new FileInputStream("target/classes/img/secondchance.png") ) {
+        try (FileInputStream imageStream = new FileInputStream("target/classes/img/secondchance.png")) {
             Image image = new Image(imageStream);
             Scene scene = new Scene(new Group());
             // New window (Stage)
@@ -247,10 +394,12 @@
             newWindow.setTitle("Top " + k);
             newWindow.setScene(scene);
             newWindow.show();
+        } catch (IOException e) {
+            e.printStackTrace();
         }
     }
 
-    public void showTopKInterestingInsertion(ConnectionMongoDB conn, int k) throws IOException {
+    public void showTopKInterestingInsertion(int k) {
 
         ArrayList<Document> array;
         String category = txtFieldCategory.getText();
@@ -260,7 +409,7 @@
             return;
         }
 
-        array = conn.findTopKInterestingInsertion(k, category);
+        array = ConnectionMongoDB.connMongo.findTopKInterestingInsertion(k, category);
 
         StackPane secondaryLayout = new StackPane();
 
@@ -288,9 +437,13 @@
 
             newWindow.show();
         }
+        catch(IOException e)
+        {
+            e.printStackTrace();
+        }
     }
 
-    public void showTopKViewedInsertion(ConnectionMongoDB conn, int k) throws IOException {
+    public void showTopKViewedInsertion(int k){
 
         ArrayList<Document> array;
 
@@ -299,7 +452,7 @@
         if(!Arrays.asList(categories).contains(category))
             Utility.infoBox("Please insert a valid category", "Error", "Category not found!");
 
-        array = conn.findTopKViewedInsertion(k, category);
+        array = ConnectionMongoDB.connMongo.findTopKViewedInsertion(k, category);
 
         StackPane secondaryLayout = new StackPane();
 
@@ -326,6 +479,9 @@
             newWindow.setScene(secondScene);
 
             newWindow.show();
+        }catch(IOException e)
+        {
+            e.printStackTrace();
         }
     }
 }
Index: src/main/resources/FXML/Stats.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<?import javafx.scene.control.Button?>\r\n<?import javafx.scene.control.Label?>\r\n<?import javafx.scene.control.RadioButton?>\r\n<?import javafx.scene.control.Separator?>\r\n<?import javafx.scene.control.SplitPane?>\r\n<?import javafx.scene.control.TextField?>\r\n<?import javafx.scene.control.ToggleGroup?>\r\n<?import javafx.scene.layout.AnchorPane?>\r\n<?import javafx.scene.layout.Pane?>\r\n<?import javafx.scene.text.Font?>\r\n\r\n<AnchorPane prefHeight=\"400.0\" prefWidth=\"800.0\" style=\"-fx-background-color: rgb(230, 230, 255) rgb(230, 230, 0);\" xmlns=\"http://javafx.com/javafx/17\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"main.java.it.unipi.dii.largescale.secondchance.controller.StatsController\">\r\n   <children>\r\n      <Label layoutX=\"282.0\" layoutY=\"-1.0\" prefHeight=\"29.0\" prefWidth=\"204.0\" text=\"         Stats Section\" textAlignment=\"CENTER\">\r\n         <font>\r\n            <Font size=\"24.0\" />\r\n         </font>\r\n      </Label>\r\n      <SplitPane dividerPositions=\"0.501254705144291\" layoutX=\"1.0\" layoutY=\"34.0\" prefHeight=\"464.0\" prefWidth=\"799.0\" style=\"-fx-background-color: rgb(230, 230, 255) rgb(230, 230, 255);\">\r\n        <items>\r\n          <AnchorPane minHeight=\"0.0\" minWidth=\"0.0\" prefHeight=\"160.0\" prefWidth=\"100.0\" style=\"-fx-background-color: rgb(230, 230, 255) rgb(230, 230, 255);\">\r\n               <children>\r\n                  <Label layoutX=\"147.0\" layoutY=\"17.0\" text=\"Top K Section\">\r\n                     <font>\r\n                        <Font size=\"18.0\" />\r\n                     </font>\r\n                  </Label>\r\n                  <Pane layoutY=\"41.0\" prefHeight=\"123.0\" prefWidth=\"388.0\">\r\n                     <children>\r\n                        <Label layoutX=\"15.0\" layoutY=\"26.0\" text=\"Insert the Top K number:\">\r\n                           <font>\r\n                              <Font size=\"15.0\" />\r\n                           </font>\r\n                        </Label>\r\n                        <TextField fx:id=\"boxKNumber\" layoutX=\"180.0\" layoutY=\"23.0\" prefHeight=\"26.0\" prefWidth=\"57.0\" promptText=\"K\" />\r\n                        <Separator layoutX=\"94.0\" layoutY=\"97.0\" prefWidth=\"200.0\" />\r\n                     </children>\r\n                  </Pane>\r\n                  <Pane layoutY=\"159.0\" prefHeight=\"290.0\" prefWidth=\"387.0\">\r\n                     <children>\r\n                        <Label layoutX=\"15.0\" layoutY=\"26.0\" text=\"Select the query do you want to perform:\">\r\n                           <font>\r\n                              <Font size=\"15.0\" />\r\n                           </font>\r\n                        </Label>\r\n                        <RadioButton fx:id=\"rBTopKUsers\" layoutX=\"20.0\" layoutY=\"63.0\" mnemonicParsing=\"false\" text=\"Top K Rated User (by country) \">\r\n                           <toggleGroup>\r\n                              <ToggleGroup fx:id=\"TopK\" />\r\n                           </toggleGroup>\r\n                        </RadioButton>\r\n                        <Label layoutX=\"45.0\" layoutY=\"95.0\" text=\"Please insert the country you want:\" />\r\n                        <TextField fx:id=\"txtFieldCountry\" layoutX=\"267.0\" layoutY=\"91.0\" prefHeight=\"26.0\" prefWidth=\"114.0\" promptText=\"Country\" />\r\n                        <RadioButton fx:id=\"rBTopKInterestingIns\" layoutX=\"20.0\" layoutY=\"149.0\" mnemonicParsing=\"false\" text=\"Top K Most Interesting Insertions (by category) \" toggleGroup=\"$TopK\" />\r\n                        <RadioButton fx:id=\"rBTopKViewedIns\" layoutX=\"20.0\" layoutY=\"185.0\" mnemonicParsing=\"false\" text=\"Top K Most Viewed Insertions (by category) \" toggleGroup=\"$TopK\" />\r\n                        <Label layoutX=\"45.0\" layoutY=\"215.0\" text=\"Please insert the category you want:\" />\r\n                        <TextField fx:id=\"txtFieldCategory\" layoutX=\"267.0\" layoutY=\"211.0\" prefHeight=\"26.0\" prefWidth=\"114.0\" promptText=\"Category\" />\r\n                     </children>\r\n                  </Pane>\r\n               </children>\r\n            </AnchorPane>\r\n          <AnchorPane minHeight=\"0.0\" minWidth=\"0.0\" prefHeight=\"160.0\" prefWidth=\"100.0\" style=\"-fx-background-color: rgb(230, 230, 255) rgb(230, 230, 255);\">\r\n               <children>\r\n                  <Label layoutX=\"136.0\" layoutY=\"17.0\" text=\"Most Items Stats\">\r\n                     <font>\r\n                        <Font size=\"18.0\" />\r\n                     </font>\r\n                  </Label>\r\n                  <RadioButton fx:id=\"rBUsers\" layoutX=\"27.0\" layoutY=\"113.0\" mnemonicParsing=\"false\" prefHeight=\"17.0\" prefWidth=\"181.0\" text=\"Most Active Users\" toggleGroup=\"$TopK\" />\r\n                  <RadioButton fx:id=\"rBSellers\" layoutX=\"27.0\" layoutY=\"140.0\" mnemonicParsing=\"false\" prefHeight=\"21.0\" prefWidth=\"197.0\" text=\"Most Active Sellers\" toggleGroup=\"$TopK\" />\r\n                  <Label layoutX=\"22.0\" layoutY=\"67.0\" text=\"Select the query do you want to perform:\">\r\n                     <font>\r\n                        <Font size=\"15.0\" />\r\n                     </font>\r\n                  </Label>\r\n                  <Button fx:id=\"elaboraButton\" layoutX=\"149.0\" layoutY=\"367.0\" mnemonicParsing=\"false\" onMouseClicked=\"#redirectToStatFunction\" style=\"-fx-background-color: rgb(206, 153, 255)rgb(206, 153, 255); -fx-background-radius: 50;\" text=\"Process results\" textFill=\"#fffffff0\" />\r\n               </children></AnchorPane>\r\n        </items>\r\n      </SplitPane>\r\n   </children>\r\n</AnchorPane>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/FXML/Stats.fxml b/src/main/resources/FXML/Stats.fxml
--- a/src/main/resources/FXML/Stats.fxml	(revision 89fe89836fc89b7929b9b4ec2cd4ce78c55c77e0)
+++ b/src/main/resources/FXML/Stats.fxml	(date 1644328817757)
@@ -1,5 +1,9 @@
 <?xml version="1.0" encoding="UTF-8"?>
 
+<?import java.lang.*?>
+<?import javafx.scene.control.*?>
+<?import javafx.scene.layout.*?>
+<?import javafx.scene.text.*?>
 <?import javafx.scene.control.Button?>
 <?import javafx.scene.control.Label?>
 <?import javafx.scene.control.RadioButton?>
@@ -11,72 +15,65 @@
 <?import javafx.scene.layout.Pane?>
 <?import javafx.scene.text.Font?>
 
-<AnchorPane prefHeight="400.0" prefWidth="800.0" style="-fx-background-color: rgb(230, 230, 255) rgb(230, 230, 0);" xmlns="http://javafx.com/javafx/17" xmlns:fx="http://javafx.com/fxml/1" fx:controller="main.java.it.unipi.dii.largescale.secondchance.controller.StatsController">
+<AnchorPane prefHeight="400.0" prefWidth="800.0" style="-fx-background-color: rgb(230, 230, 255) rgb(230, 230, 0);" xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1" fx:controller="main.java.it.unipi.dii.largescale.secondchance.controller.StatsController">
    <children>
-      <Label layoutX="282.0" layoutY="-1.0" prefHeight="29.0" prefWidth="204.0" text="         Stats Section" textAlignment="CENTER">
-         <font>
-            <Font size="24.0" />
-         </font>
-      </Label>
-      <SplitPane dividerPositions="0.501254705144291" layoutX="1.0" layoutY="34.0" prefHeight="464.0" prefWidth="799.0" style="-fx-background-color: rgb(230, 230, 255) rgb(230, 230, 255);">
-        <items>
-          <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="160.0" prefWidth="100.0" style="-fx-background-color: rgb(230, 230, 255) rgb(230, 230, 255);">
-               <children>
-                  <Label layoutX="147.0" layoutY="17.0" text="Top K Section">
-                     <font>
-                        <Font size="18.0" />
-                     </font>
-                  </Label>
-                  <Pane layoutY="41.0" prefHeight="123.0" prefWidth="388.0">
-                     <children>
-                        <Label layoutX="15.0" layoutY="26.0" text="Insert the Top K number:">
-                           <font>
-                              <Font size="15.0" />
-                           </font>
-                        </Label>
-                        <TextField fx:id="boxKNumber" layoutX="180.0" layoutY="23.0" prefHeight="26.0" prefWidth="57.0" promptText="K" />
-                        <Separator layoutX="94.0" layoutY="97.0" prefWidth="200.0" />
-                     </children>
-                  </Pane>
-                  <Pane layoutY="159.0" prefHeight="290.0" prefWidth="387.0">
-                     <children>
-                        <Label layoutX="15.0" layoutY="26.0" text="Select the query do you want to perform:">
-                           <font>
-                              <Font size="15.0" />
-                           </font>
-                        </Label>
-                        <RadioButton fx:id="rBTopKUsers" layoutX="20.0" layoutY="63.0" mnemonicParsing="false" text="Top K Rated User (by country) ">
-                           <toggleGroup>
-                              <ToggleGroup fx:id="TopK" />
-                           </toggleGroup>
-                        </RadioButton>
-                        <Label layoutX="45.0" layoutY="95.0" text="Please insert the country you want:" />
-                        <TextField fx:id="txtFieldCountry" layoutX="267.0" layoutY="91.0" prefHeight="26.0" prefWidth="114.0" promptText="Country" />
-                        <RadioButton fx:id="rBTopKInterestingIns" layoutX="20.0" layoutY="149.0" mnemonicParsing="false" text="Top K Most Interesting Insertions (by category) " toggleGroup="$TopK" />
-                        <RadioButton fx:id="rBTopKViewedIns" layoutX="20.0" layoutY="185.0" mnemonicParsing="false" text="Top K Most Viewed Insertions (by category) " toggleGroup="$TopK" />
-                        <Label layoutX="45.0" layoutY="215.0" text="Please insert the category you want:" />
-                        <TextField fx:id="txtFieldCategory" layoutX="267.0" layoutY="211.0" prefHeight="26.0" prefWidth="114.0" promptText="Category" />
+      <Pane prefHeight="450.0" prefWidth="800.0">
+         <children>
+            <SplitPane prefHeight="450.0" prefWidth="800.0" style="-fx-background-color: rgb(230, 230, 255) rgb(230, 230, 255);">
+               <items>
+                  <Pane prefHeight="448.0" prefWidth="800.0">
+                     <children>
+                      <AnchorPane layoutX="403.0" layoutY="43.0" minHeight="0.0" minWidth="0.0" prefHeight="319.0" prefWidth="397.0" style="-fx-background-color: rgb(230, 230, 255) rgb(230, 230, 255);">
+                           <children>
+                              <RadioButton fx:id="followedUsers" layoutX="63.0" layoutY="122.0" mnemonicParsing="false" prefHeight="17.0" prefWidth="181.0" text="Most followed users">
+                                 <toggleGroup>
+                                    <ToggleGroup fx:id="TopK" />
+                                 </toggleGroup>
+                              </RadioButton>
+                              <RadioButton fx:id="categoryInsertion" layoutX="63.0" layoutY="149.0" mnemonicParsing="false" prefHeight="21.0" prefWidth="197.0" text="Interesting for category" toggleGroup="$TopK" />
+                              <Label layoutX="63.0" layoutY="56.0" text="Select the query do you want to perform:">
+                                 <font>
+                                    <Font size="15.0" />
+                                 </font>
+                              </Label>
+                              <RadioButton fx:id="postedCountry" layoutX="63.0" layoutY="182.0" mnemonicParsing="false" prefHeight="21.0" prefWidth="245.0" text="Number of posted insertion for country" toggleGroup="$TopK" />
+                           </children>
+                        </AnchorPane>
+                      <AnchorPane layoutY="46.0" minHeight="0.0" minWidth="0.0" prefHeight="338.0" prefWidth="416.0" style="-fx-background-color: rgb(230, 230, 255) rgb(230, 230, 255);">
+                           <children>
+                              <Label layoutX="36.0" layoutY="54.0" text="Select the query do you want to perform:">
+                                 <font>
+                                    <Font size="15.0" />
+                                 </font>
+                              </Label>
+                              <RadioButton fx:id="rBTopKUsers" layoutX="41.0" layoutY="91.0" mnemonicParsing="false" text="Top K Rated User (by country) " toggleGroup="$TopK" />
+                              <Label layoutX="66.0" layoutY="123.0" text="Please insert the country you want:" />
+                              <TextField fx:id="txtFieldCountry" layoutX="288.0" layoutY="119.0" prefHeight="26.0" prefWidth="114.0" promptText="Country" />
+                              <RadioButton fx:id="rBTopKInterestingIns" layoutX="41.0" layoutY="161.0" mnemonicParsing="false" text="Top K Most Interesting Insertions (by category) " toggleGroup="$TopK" />
+                              <RadioButton fx:id="rBTopKViewedIns" layoutX="41.0" layoutY="197.0" mnemonicParsing="false" text="Top K Most Viewed Insertions (by category) " toggleGroup="$TopK" />
+                              <Label layoutX="66.0" layoutY="227.0" text="Please insert the category you want:" />
+                              <TextField fx:id="txtFieldCategory" layoutX="288.0" layoutY="223.0" prefHeight="26.0" prefWidth="114.0" promptText="Category" />
+                              <Label layoutX="58.0" layoutY="17.0" text="Insert the Top K number:">
+                                 <font>
+                                    <Font size="15.0" />
+                                 </font>
+                              </Label>
+                              <TextField fx:id="boxKNumber" layoutX="223.0" layoutY="14.0" prefHeight="26.0" prefWidth="57.0" promptText="K" />
+                              <RadioButton fx:id="rBUsers" layoutX="42.0" layoutY="264.0" mnemonicParsing="false" prefHeight="17.0" prefWidth="181.0" text="Users with more purchase" toggleGroup="$TopK" />
+                              <RadioButton fx:id="rBSellers" layoutX="42.0" layoutY="291.0" mnemonicParsing="false" prefHeight="21.0" prefWidth="197.0" text="Users with more sold" toggleGroup="$TopK" />
+                           </children>
+                        </AnchorPane>
+                        <Button fx:id="elaboraButton" layoutX="388.0" layoutY="394.0" mnemonicParsing="false" onMouseClicked="#redirectToStatFunction" style="-fx-background-color: rgb(206, 153, 255)rgb(206, 153, 255); -fx-background-radius: 50;" text="Process results" textFill="#fffffff0" />
                      </children>
                   </Pane>
-               </children>
-            </AnchorPane>
-          <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="160.0" prefWidth="100.0" style="-fx-background-color: rgb(230, 230, 255) rgb(230, 230, 255);">
-               <children>
-                  <Label layoutX="136.0" layoutY="17.0" text="Most Items Stats">
-                     <font>
-                        <Font size="18.0" />
-                     </font>
-                  </Label>
-                  <RadioButton fx:id="rBUsers" layoutX="27.0" layoutY="113.0" mnemonicParsing="false" prefHeight="17.0" prefWidth="181.0" text="Most Active Users" toggleGroup="$TopK" />
-                  <RadioButton fx:id="rBSellers" layoutX="27.0" layoutY="140.0" mnemonicParsing="false" prefHeight="21.0" prefWidth="197.0" text="Most Active Sellers" toggleGroup="$TopK" />
-                  <Label layoutX="22.0" layoutY="67.0" text="Select the query do you want to perform:">
-                     <font>
-                        <Font size="15.0" />
-                     </font>
-                  </Label>
-                  <Button fx:id="elaboraButton" layoutX="149.0" layoutY="367.0" mnemonicParsing="false" onMouseClicked="#redirectToStatFunction" style="-fx-background-color: rgb(206, 153, 255)rgb(206, 153, 255); -fx-background-radius: 50;" text="Process results" textFill="#fffffff0" />
-               </children></AnchorPane>
-        </items>
-      </SplitPane>
+               </items>
+            </SplitPane>
+         </children>
+      </Pane>
+      <Label layoutX="282.0" layoutY="-1.0" prefHeight="29.0" prefWidth="204.0" text="         Stats Section" textAlignment="CENTER">
+         <font>
+            <Font size="24.0" />
+         </font>
+      </Label>
    </children>
 </AnchorPane>
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"78096fe8-9952-45af-bf90-4f98cdf0dd02\" name=\"Changes\" comment=\"fix most active user into admin, fix searchinsertion arrows\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/SearchUserController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/SearchUserController.java\" afterDir=\"false\" />\r\n    </list>\r\n    <list id=\"03123c90-a928-4e0a-bf69-e1d59086bd15\" name=\"Changes by adelmobrunelli\" comment=\"Changes by adelmobrunelli\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"24cGP07hMuydzouSsyqELUKrZS4\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"codeWithMe.voiceChat.enabledByDefault\" value=\"false\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/target/classes\" />\r\n    <property name=\"project.structure.last.edited\" value=\"Project\" />\r\n    <property name=\"project.structure.proportion\" value=\"0.0\" />\r\n    <property name=\"project.structure.side.proportion\" value=\"0.0\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\matre\\Desktop\\Large-Scale-Project\\target\\classes\" />\r\n      <recent name=\"C:\\Users\\matre\\Desktop\\Large-Scale-Project\\target\\classes\\img\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"SecondChanceGUI\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"main.java.it.unipi.dii.largescale.secondchance.SecondChanceGUI\" />\r\n      <module name=\"Large-Scale-Project\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"main.java.it.unipi.dii.largescale.secondchance.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.SecondChanceGUI\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"78096fe8-9952-45af-bf90-4f98cdf0dd02\" name=\"Changes\" comment=\"\" />\r\n      <created>1643922440258</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1643922440258</updated>\r\n      <workItem from=\"1643922443095\" duration=\"3073000\" />\r\n      <workItem from=\"1643983831619\" duration=\"15905000\" />\r\n      <workItem from=\"1644075264558\" duration=\"7403000\" />\r\n      <workItem from=\"1644146357420\" duration=\"406000\" />\r\n      <workItem from=\"1644147960802\" duration=\"711000\" />\r\n      <workItem from=\"1644152757678\" duration=\"123000\" />\r\n      <workItem from=\"1644162541952\" duration=\"6928000\" />\r\n      <workItem from=\"1644170803249\" duration=\"461000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Fix admin function, fix other problems\">\r\n      <created>1643993961652</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1643993961652</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Changes by adelmobrunelli\">\r\n      <created>1643993973632</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1643993973632</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Fix img_profile, fix followers and following show from profile page, fix registration user\">\r\n      <created>1644003160796</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1644003160796</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Fix do orders and update and put review, error message on clicking insertion after purchase, fix sign up\">\r\n      <created>1644082904622</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1644082904623</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"upadte commit\">\r\n      <created>1644152843260</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1644152843260</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"fix most active user into admin, fix searchinsertion arrows\">\r\n      <created>1644170714400</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1644170714400</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"7\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Fix admin function, fix other problems\" />\r\n    <MESSAGE value=\"Changes by adelmobrunelli\" />\r\n    <MESSAGE value=\"Fix img_profile, fix followers and following show from profile page, fix registration user\" />\r\n    <MESSAGE value=\"Fix do orders and update and put review, error message on clicking insertion after purchase, fix sign up\" />\r\n    <MESSAGE value=\"upadte commit\" />\r\n    <MESSAGE value=\"fix most active user into admin, fix searchinsertion arrows\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"fix most active user into admin, fix searchinsertion arrows\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 89fe89836fc89b7929b9b4ec2cd4ce78c55c77e0)
+++ b/.idea/workspace.xml	(date 1644331323088)
@@ -4,9 +4,12 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="78096fe8-9952-45af-bf90-4f98cdf0dd02" name="Changes" comment="fix most active user into admin, fix searchinsertion arrows">
+    <list default="true" id="78096fe8-9952-45af-bf90-4f98cdf0dd02" name="Changes" comment="fix admin functions and add of new admin functions">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/SearchUserController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/SearchUserController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/connection/ConnectionMongoDB.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/connection/ConnectionMongoDB.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/connection/ConnectionNeo4jDB.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/connection/ConnectionNeo4jDB.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/StatsController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/unipi/dii/largescale/secondchance/controller/StatsController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/resources/FXML/Stats.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/FXML/Stats.fxml" afterDir="false" />
     </list>
     <list id="03123c90-a928-4e0a-bf69-e1d59086bd15" name="Changes by adelmobrunelli" comment="Changes by adelmobrunelli" />
     <option name="SHOW_DIALOG" value="false" />
@@ -16,6 +19,7 @@
   </component>
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+    <option name="RESET_MODE" value="KEEP" />
   </component>
   <component name="ProjectId" id="24cGP07hMuydzouSsyqELUKrZS4" />
   <component name="ProjectViewState">
@@ -73,7 +77,12 @@
       <workItem from="1644147960802" duration="711000" />
       <workItem from="1644152757678" duration="123000" />
       <workItem from="1644162541952" duration="6928000" />
-      <workItem from="1644170803249" duration="461000" />
+      <workItem from="1644170803249" duration="546000" />
+      <workItem from="1644241247862" duration="7638000" />
+      <workItem from="1644258504471" duration="12000" />
+      <workItem from="1644258537705" duration="33000" />
+      <workItem from="1644260884540" duration="2213000" />
+      <workItem from="1644328283324" duration="1343000" />
     </task>
     <task id="LOCAL-00001" summary="Fix admin function, fix other problems">
       <created>1643993961652</created>
@@ -117,7 +126,14 @@
       <option name="project" value="LOCAL" />
       <updated>1644170714400</updated>
     </task>
-    <option name="localTasksCounter" value="7" />
+    <task id="LOCAL-00007" summary="fix show &quot;n&quot; as rating into rating field user">
+      <created>1644171324130</created>
+      <option name="number" value="00007" />
+      <option name="presentableId" value="LOCAL-00007" />
+      <option name="project" value="LOCAL" />
+      <updated>1644171324130</updated>
+    </task>
+    <option name="localTasksCounter" value="8" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -142,6 +158,7 @@
     <MESSAGE value="Fix do orders and update and put review, error message on clicking insertion after purchase, fix sign up" />
     <MESSAGE value="upadte commit" />
     <MESSAGE value="fix most active user into admin, fix searchinsertion arrows" />
-    <option name="LAST_COMMIT_MESSAGE" value="fix most active user into admin, fix searchinsertion arrows" />
+    <MESSAGE value="fix show &quot;n&quot; as rating into rating field user" />
+    <option name="LAST_COMMIT_MESSAGE" value="fix show &quot;n&quot; as rating into rating field user" />
   </component>
 </project>
\ No newline at end of file
